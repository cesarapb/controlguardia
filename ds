<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Gestión de Acceso</title>
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');

    :root {
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        --dark-gradient: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
        --glass-bg: rgba(255, 255, 255, 0.08);
        --glass-border: rgba(255, 255, 255, 0.18);
        --text-primary: #1a1a1a;
        --text-secondary: #6b7280;
        --text-light: rgba(255, 255, 255, 0.9);
        --shadow-lg: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        --shadow-xl: 0 35px 60px -12px rgba(0, 0, 0, 0.3);
        --border-radius: 24px;
        --border-radius-sm: 16px;
        --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 25%, #16213e  50%, #0f0f23 100%);
        min-height: 100vh;
        color: var(--text-primary);
        overflow-x: hidden;
        position: relative;
    }

    body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background:
            radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
            radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
            radial-gradient(circle at 40% 80%, rgba(120, 219, 255, 0.3) 0%, transparent 50%);
        z-index: -1;
        animation: backgroundFloat 20s ease-in-out infinite;
    }

    @keyframes backgroundFloat {
        0%, 100% { transform: scale(1) rotate(0deg); }
        50% { transform: scale(1.1) rotate(1deg); }
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
        position: relative;
        z-index: 1;
    }

    /* ===== PANELES PRINCIPALES ===== */
    .loading-panel,
    .welcome-panel,
    .login-panel {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 1;
        transition: opacity 0.3s ease;
    }

    .loading-container,
    .welcome-container,
    .login-container {
        max-width: 450px;
        width: 90%;
        padding: 50px;
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: var(--border-radius);
        backdrop-filter: blur(20px);
        box-shadow: var(--shadow-xl);
        position: relative;
        overflow: hidden;
        text-align: center;
    }

    .welcome-container {
        max-width: 600px;
        padding: 60px 40px;
        animation: slideUpFade 1s ease-out forwards;
    }

    .welcome-container::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: conic-gradient(from 0deg, transparent, rgba(102, 126, 234, 0.1), transparent);
        animation: rotate 10s linear infinite;
        z-index: -1;
    }

    /* ===== ANIMACIONES ===== */
    @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    @keyframes slideUpFade {
        from {
            opacity: 0;
            transform: translateY(50px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes modernSpin {
        0% { transform: rotate(0deg) scale(1); }
        50% { transform: rotate(180deg) scale(1.1); }
        100% { transform: rotate(360deg) scale(1); }
    }

    @keyframes textGlow {
        from { filter: brightness(1); }
        to { filter: brightness(1.2); }
    }

    @keyframes slideInFromRight {
        from {
            opacity: 0;
            transform: translateX(100px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes slideInFromBottom {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes slideOutToBottom {
        from {
            opacity: 1;
            transform: translateY(0);
            max-height: 200px;
        }
        to {
            opacity: 0;
            transform: translateY(20px);
            max-height: 0;
            padding: 0;
            margin: 0;
        }
    }

    @keyframes contentFadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    /* ===== LOADING COMPONENTS ===== */
    .loading-content {
        text-align: center;
        padding: 40px;
    }

    .loading-logo {
        width: 80px;
        height: 80px;
        margin: 0 auto 30px;
        position: relative;
    }

    .loading-ring {
        width: 80px;
        height: 80px;
        border: 3px solid transparent;
        border-top: 3px solid #667eea;
        border-right: 3px solid #764ba2;
        border-radius: 50%;
        animation: modernSpin 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite;
        position: absolute;
    }

    .loading-ring:nth-child(2) {
        width: 60px;
        height: 60px;
        top: 10px;
        left: 10px;
        border-top: 2px solid #f093fb;
        border-right: 2px solid #f5576c;
        animation-duration: 1.5s;
        animation-direction: reverse;
    }

    .loading-ring:nth-child(3) {
        width: 40px;
        height: 40px;
        top: 20px;
        left: 20px;
        border-top: 2px solid #4facfe;
        border-right: 2px solid #00f2fe;
        animation-duration: 1s;
    }

    .loading-text {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 10px;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: textGlow 2s ease-in-out infinite alternate;
    }

    .loading-subtitle {
        font-size: 0.9rem;
        opacity: 0.7;
        font-weight: 300;
        letter-spacing: 1px;
    }

    /* ===== TÍTULOS Y TEXTOS ===== */
    .welcome-title {
        font-size: 2.8rem;
        font-weight: 800;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 24px;
        line-height: 1.1;
        letter-spacing: -2px;
    }

    .welcome-subtitle {
        font-size: 1.3rem;
        color: var(--text-light);
        margin-bottom: 40px;
        font-weight: 300;
        opacity: 0.9;
        letter-spacing: 0.5px;
    }

    .login-title {
        text-align: center;
        font-size: 1.8rem;
        font-weight: 700;
        margin-bottom: 32px;
        color: var(--text-light);
        letter-spacing: -1px;
    }

    .admin-title {
        font-size: 2.2rem;
        font-weight: 800;
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        letter-spacing: -1px;
        margin: 0;
    }

    .card-title {
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 24px;
        color: var(--text-light);
        letter-spacing: -0.5px;
    }

    /* ===== COMPANY BRANDING ===== */
    .company-branding {
        margin-bottom: 32px;
        padding-bottom: 24px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .company-name {
        font-size: 1.8rem;
        font-weight: 700;
        background: linear-gradient(135deg, #ffffff 0%, #f0f0f0 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 8px;
        line-height: 1.1;
        letter-spacing: -1px;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .company-location {
        font-size: 1.1rem;
        color: rgba(255, 255, 255, 0.8);
        font-weight: 500;
        letter-spacing: 2px;
        text-transform: uppercase;
        margin-bottom: 0;
    }

    .company-header {
        text-align: center;
        margin-bottom: 24px;
        padding-bottom: 16px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .company-name-small {
        font-size: 1.1rem;
        font-weight: 600;
        color: rgba(255, 255, 255, 0.9);
        letter-spacing: 1px;
        margin: 0;
        text-transform: uppercase;
    }

    .company-admin-name {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
        font-weight: 500;
        letter-spacing: 1px;
        margin-bottom: 8px;
        text-transform: uppercase;
    }

    /* ===== GLASS MORPHISM CARDS ===== */
    .glass-card {
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: var(--border-radius);
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        box-shadow: var(--shadow-xl);
        transition: var(--transition);
        position: relative;
        overflow: hidden;
    }

    .glass-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    }

    .glass-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 40px 80px -12px rgba(0, 0, 0, 0.4);
        border-color: rgba(255, 255, 255, 0.3);
    }

    /* ===== MODERN CARDS ===== */
    .modern-card {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--border-radius-sm);
        padding: 32px;
        margin-bottom: 24px;
        backdrop-filter: blur(10px);
        transition: var(--transition);
        position: relative;
        overflow: hidden;
    }

    .modern-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        background: var(--primary-gradient);
        transform: scaleX(0);
        transition: transform 0.3s ease;
    }

    .modern-card:hover::before {
        transform: scaleX(1);
    }

    .modern-card:hover {
        transform: translateY(-4px);
        border-color: rgba(255, 255, 255, 0.2);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    }

    /* ===== ADMIN PANEL ===== */
    .admin-panel {
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        border-radius: var(--border-radius);
        padding: 40px;
        backdrop-filter: blur(20px);
        box-shadow: var(--shadow-xl);
        min-height: 700px;
        position: relative;
        overflow: hidden;
    }

    .admin-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 40px;
        flex-wrap: wrap;
        gap: 20px;
        padding-bottom: 20px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 16px;
        background: rgba(255, 255, 255, 0.05);
        padding: 12px 20px;
        border-radius: 50px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .user-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 700;
        font-size: 1.2rem;
        box-shadow: 0 8px 16px rgba(102, 126, 234, 0.3);
    }

    .user-name {
        color: var(--text-light);
        font-weight: 600;
        font-size: 1rem;
    }

    /* ===== BUTTONS ===== */
    .neo-btn {
        background: var(--primary-gradient);
        border: none;
        border-radius: var(--border-radius-sm);
        padding: 16px 40px;
        font-size: 1.1rem;
        font-weight: 600;
        color: white;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        transition: var(--transition);
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
        letter-spacing: 0.5px;
    }

    .neo-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.6s ease;
    }

    .neo-btn:hover::before {
        left: 100%;
    }

    .neo-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 20px 40px rgba(102, 126, 234, 0.6);
    }

    .neo-btn:active {
        transform: translateY(-1px);
    }

    .logout-btn {
        background: var(--secondary-gradient);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 50px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        transition: var(--transition);
        box-shadow: 0 4px 12px rgba(240, 147, 251, 0.3);
    }

    .logout-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(240, 147, 251, 0.4);
    }

    .btn-primary {
        background: var(--primary-gradient);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: var(--border-radius-sm);
        cursor: pointer;
        font-weight: 600;
        transition: var(--transition);
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 30px rgba(102, 126, 234, 0.4);
    }

    .btn-secondary {
        background: rgba(255, 255, 255, 0.1);
        color: var(--text-light);
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 12px 24px;
        border-radius: var(--border-radius-sm);
        cursor: pointer;
        font-weight: 500;
        transition: var(--transition);
        backdrop-filter: blur(10px);
    }

    .btn-secondary:hover {
        background: rgba(255, 255, 255, 0.15);
        transform: translateY(-2px);
    }

    .btn-sm {
        padding: 6px 12px;
        font-size: 0.7rem;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        border: 1px solid transparent;
    }

    .btn-edit {
        background: rgba(59, 130, 246, 0.2);
        color: #3b82f6;
        border-color: rgba(59, 130, 246, 0.3);
    }

    .btn-edit:hover {
        background: rgba(59, 130, 246, 0.3);
        transform: translateY(-2px);
    }

    .btn-toggle {
        background: rgba(251, 191, 36, 0.2);
        color: #fbbf24;
        border-color: rgba(251, 191, 36, 0.3);
    }

    .btn-toggle:hover {
        background: rgba(251, 191, 36, 0.3);
        transform: translateY(-2px);
    }

    .btn-delete {
        background: rgba(239, 68, 68, 0.2);
        color: #ef4444;
        border-color: rgba(239, 68, 68, 0.3);
    }

    .btn-delete:hover {
        background: rgba(239, 68, 68, 0.3);
        transform: translateY(-2px);
    }

    .btn-qr {
        background: rgba(168, 85, 247, 0.2);
        color: #a855f7;
        border-color: rgba(168, 85, 247, 0.3);
    }

    .btn-qr:hover {
        background: rgba(168, 85, 247, 0.3);
        transform: translateY(-2px);
    }

    .btn-reject {
        background: rgba(239, 68, 68, 0.2);
        color: #ef4444;
        border-color: rgba(239, 68, 68, 0.3);
    }

    .btn-reject:hover {
        background: rgba(239, 68, 68, 0.3);
        transform: translateY(-2px);
    }

    .btn-desbloquear {
        background: rgba(34, 197, 94, 0.2);
        color: #22c55e;
        border-color: rgba(34, 197, 94, 0.3);
    }

    .btn-desbloquear:hover {
        background: rgba(34, 197, 94, 0.3);
        transform: translateY(-2px);
    }

    .btn-bloquear {
        background: rgba(239, 68, 68, 0.2);
        color: #ef4444;
        border-color: rgba(239, 68, 68, 0.3);
    }

    .btn-bloquear:hover {
        background: rgba(239, 68, 68, 0.3);
        transform: translateY(-2px);
    }

    .btn-cerrar-bloqueo {
        background: rgba(107, 114, 128, 0.2);
        color: #6b7280;
        border-color: rgba(107, 114, 128, 0.3);
    }

    .btn-cerrar-bloqueo:hover {
        background: rgba(107, 114, 128, 0.3);
        transform: translateY(-2px);
    }

    .add-patente-btn {
        background: rgba(34, 197, 94, 0.2);
        color: #22c55e;
        border: 1px solid rgba(34, 197, 94, 0.3);
        padding: 8px 16px;
        border-radius: var(--border-radius-sm);
        cursor: pointer;
        font-size: 0.8rem;
        margin-top: 8px;
    }

    .add-patente-btn:hover {
        background: rgba(34, 197, 94, 0.3);
    }

    .btn-cambiar-seleccion {
        background: rgba(59, 130, 246, 0.2);
        color: #3b82f6;
        border: 1px solid rgba(59, 130, 246, 0.3);
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 0.8rem;
        cursor: pointer;
        margin-top: 8px;
    }

    .btn-cambiar-seleccion:hover {
        background: rgba(59, 130, 246, 0.3);
    }

    .btn-eliminar-feriado {
        background: rgba(239, 68, 68, 0.2);
        color: #ef4444;
        border: 1px solid rgba(239, 68, 68, 0.3);
        padding: 4px 8px;
        border-radius: 6px;
        font-size: 0.7rem;
        cursor: pointer;
    }

    .btn-eliminar-feriado:hover {
        background: rgba(239, 68, 68, 0.3);
    }

    .btn-remove-acompañante {
        background: rgba(239, 68, 68, 0.2);
        color: #ef4444;
        border: 1px solid rgba(239, 68, 68, 0.3);
        padding: 6px 12px;
        border-radius: 8px;
        font-size: 0.75rem;
        cursor: pointer;
        transition: var(--transition);
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .btn-remove-acompañante:hover {
        background: rgba(239, 68, 68, 0.3);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(239, 68, 68, 0.2);
    }

    .btn-remove-acompañante::before {
        content: '✕';
        font-weight: bold;
    }

    /* ===== GROUP BUTTONS ===== */
    .btn-group {
        padding: 8px 16px;
        font-size: 0.8rem;
        border-radius: var(--border-radius-sm);
        cursor: pointer;
        transition: var(--transition);
        border: 1px solid transparent;
        font-weight: 600;
    }

    .btn-group-authorize {
        background: rgba(34, 197, 94, 0.2);
        color: #22c55e;
        border-color: rgba(34, 197, 94, 0.3);
    }

    .btn-group-authorize:hover {
        background: rgba(34, 197, 94, 0.3);
        transform: translateY(-2px);
    }

    .btn-group-reject {
        background: rgba(239, 68, 68, 0.2);
        color: #ef4444;
        border-color: rgba(239, 68, 68, 0.3);
    }

    .btn-group-reject:hover {
        background: rgba(239, 68, 68, 0.3);
        transform: translateY(-2px);
    }

    .btn-group-select {
        background: rgba(59, 130, 246, 0.2);
        color: #3b82f6;
        border-color: rgba(59, 130, 246, 0.3);
    }

    .btn-group-select:hover {
        background: rgba(59, 130, 246, 0.3);
        transform: translateY(-2px);
    }

    .btn-table {
        padding: 4px 8px;
        font-size: 0.7rem;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        border: 1px solid transparent;
        margin: 1px;
    }

    /* ===== TABS ===== */
    .tabs {
        display: flex;
        gap: 8px;
        margin-bottom: 40px;
        overflow-x: auto;
        padding: 8px;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 60px;
        border: 1px solid rgba(255, 255, 255, 0.08);
    }

    .tab {
        padding: 14px 28px;
        background: transparent;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        font-weight: 500;
        color: rgba(255, 255, 255, 0.7);
        transition: var(--transition);
        white-space: nowrap;
        font-size: 0.95rem;
        position: relative;
        overflow: hidden;
    }

    .tab::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--primary-gradient);
        opacity: 0;
        transition: var(--transition);
        z-index: -1;
    }

    .tab.active {
        color: white;
        font-weight: 600;
        transform: scale(1.05);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }

    .tab.active::before {
        opacity: 1;
    }

    .tab:hover:not(.active) {
        color: white;
        background: rgba(255, 255, 255, 0.1);
        transform: translateY(-2px);
    }

    .admin-tabs-container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 20px;
        max-width: 100%;
    }

    .tab-responsive {
        flex: 0 1 auto;
        min-width: 120px;
        max-width: 180px;
        padding: 10px 12px;
        font-size: 0.85rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 4px;
        flex: 0 1 auto;
        min-width: 120px;
        max-width: 180px;
        padding: 10px 12px;
        font-size: 0.85rem;
        white-space: nowrap;
        overflow: visible;
        text-overflow: ellipsis;
    }

    .tab-counter {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.7rem;
        font-weight: 700;
        margin-left: 8px;
        animation: pulse 2s infinite;
        box-shadow: 0 2px 8px rgba(239, 68, 68, 0.4);
        display: inline-block;
               background: #ef4444;
               color: white;
               border-radius: 10px;
               padding: 2px 6px;
               font-size: 0.7rem;
               font-weight: bold;
               margin-left: 6px;
               min-width: 16px;
               text-align: center;
               line-height: 1.2;
               vertical-align: middle;
           }

           .tab-counter:empty {
               display: none !important;
           }

           .tab-responsive.active .tab-counter {
               background: #22c55e;
           }

           /* ===== TAB CONTENT ===== */
           .tab-content {
               display: none;
               animation: contentFadeIn 0.5s ease-out;
           }

           .tab-content.active {
               display: block;
           }

           /* ===== FORMS ===== */
           .form-group {
               margin-bottom: 24px;
               position: relative;
           }

           .form-group:last-of-type {
               margin-bottom: 32px;
           }

           .form-group label {
               display: block;
               margin-bottom: 8px;
               font-weight: 500;
               color: var(--text-light);
               font-size: 0.9rem;
               letter-spacing: 0.3px;
           }

           .form-row {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
               gap: 24px;
               margin-bottom: 24px;
           }

           .form-actions {
               display: flex;
               gap: 16px;
               justify-content: flex-end;
               margin-top: 32px;
               flex-wrap: wrap;
           }

           .modern-input {
               width: 100%;
               padding: 14px 18px;
               background: rgba(255, 255, 255, 0.05);
               border: 1px solid rgba(255, 255, 255, 0.1);
               border-radius: var(--border-radius-sm);
               font-size: 0.9rem;
               color: var(--text-light);
               transition: var(--transition);
               backdrop-filter: blur(10px);
           }

           .modern-input::placeholder {
               color: rgba(255, 255, 255, 0.4);
           }

           .modern-input:focus {
               outline: none;
               border-color: #667eea;
               background: rgba(255, 255, 255, 0.08);
               box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
               transform: translateY(-2px);
           }

           .modern-input.valid {
               border-color: #22c55e;
               background: rgba(34, 197, 94, 0.05);
           }

           .modern-input.invalid {
               border-color: #ef4444;
               background: rgba(239, 68, 68, 0.05);
           }

           .documento-extranjero {
               color: #ef4444 !important;
               font-weight: 600;
           }

           select {
               width: 100%;
               padding: 14px 18px;
               background: rgba(255, 255, 255, 0.05);
               border: 1px solid rgba(255, 255, 255, 0.1);
               border-radius: var(--border-radius-sm);
               color: var(--text-light);
               font-size: 0.9rem;
               transition: var(--transition);
               backdrop-filter: blur(10px);
               cursor: pointer;
           }

           select:focus {
               outline: none;
               border-color: #667eea;
               background: rgba(255, 255, 255, 0.08);
               box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
           }

           select option {
               background: #1a1a2e;
               color: var(--text-light);
               padding: 12px;
           }

           textarea.modern-input {
               min-height: 80px;
               padding: 10px 12px;
               height: auto;
           }

           /* ===== CHECKBOXES ===== */
           .custom-checkbox {
               display: flex;
               align-items: center;
               gap: 12px;
               margin-bottom: 16px;
           }

           .custom-checkbox input[type="checkbox"] {
               width: 20px;
               height: 20px;
               accent-color: #667eea;
           }

           .custom-checkbox label {
               color: var(--text-light);
               font-weight: 500;
               cursor: pointer;
           }

           .registro-delegado-checkbox {
               display: flex;
               align-items: center;
               gap: 12px;
               margin-bottom: 16px;
               padding: 12px 16px;
               background: rgba(102, 126, 234, 0.1);
               border-radius: var(--border-radius-sm);
               border: 1px solid rgba(102, 126, 234, 0.2);
           }

           .registro-delegado-checkbox input[type="checkbox"] {
               width: 20px;
               height: 20px;
               accent-color: #667eea;
           }

           .registro-delegado-checkbox label {
               color: var(--text-light);
               font-weight: 500;
               cursor: pointer;
               margin: 0;
           }

           .registro-delegado-info {
               background: rgba(59, 130, 246, 0.1);
               border: 1px solid rgba(59, 130, 246, 0.2);
               border-radius: var(--border-radius-sm);
               padding: 12px 16px;
               margin-top: 8px;
               color: #3b82f6;
               font-size: 0.85rem;
               display: none;
           }

           .indefinido-checkbox {
               display: flex;
               align-items: center;
               gap: 12px;
               margin-bottom: 16px;
           }

           .indefinido-checkbox input[type="checkbox"] {
               width: 20px;
               height: 20px;
               accent-color: #667eea;
           }

           .indefinido-checkbox label {
               color: var(--text-light);
               font-weight: 500;
               cursor: pointer;
           }

           /* ===== PERMISSIONS ===== */
           .permissions-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 16px;
               margin: 20px 0;
           }

           .permission-item {
               display: flex;
               align-items: center;
               gap: 12px;
               padding: 12px 16px;
               background: rgba(255, 255, 255, 0.05);
               border-radius: var(--border-radius-sm);
               border: 1px solid rgba(255, 255, 255, 0.1);
               transition: var(--transition);
           }

           .permission-item:hover {
               background: rgba(255, 255, 255, 0.08);
               border-color: rgba(255, 255, 255, 0.2);
           }

           .permission-item input[type="checkbox"] {
               width: 20px;
               height: 20px;
               accent-color: #667eea;
               cursor: pointer;
           }

           .permission-item label {
               color: var(--text-light);
               font-weight: 500;
               cursor: pointer;
               margin: 0;
           }

           .permission-item:has(input:disabled) {
               opacity: 0.5;
               pointer-events: none;
           }

           .permission-item input:disabled {
               cursor: not-allowed;
           }

           .permission-item input:disabled + label {
               cursor: not-allowed;
               color: rgba(255, 255, 255, 0.4);
           }

           /* ===== STATUS BADGES ===== */
           .status-badge {
               padding: 6px 16px;
               border-radius: 50px;
               font-size: 0.8rem;
               font-weight: 600;
               display: inline-block;
               text-transform: uppercase;
               letter-spacing: 0.5px;
               position: relative;
               overflow: hidden;
           }

           .status-active {
               background: linear-gradient(135deg, #10b981 0%, #059669 100%);
               color: #ffffff;
               border: 2px solid rgba(255, 255, 255, 0.3);
               box-shadow: 0 0 25px rgba(16, 185, 129, 0.5);
               font-weight: 800;
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
           }

           .status-inactive {
               background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
               color: #ffffff;
               border: 2px solid rgba(255, 255, 255, 0.3);
               box-shadow: 0 0 25px rgba(239, 68, 68, 0.5);
               font-weight: 800;
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
           }

           .status-pending {
               background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
               color: #ffffff;
               border: 2px solid rgba(255, 255, 255, 0.3);
               box-shadow: 0 0 25px rgba(245, 158, 11, 0.5);
               font-weight: 800;
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
           }

           .status-authorized {
               background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
               color: #ffffff;
               border: 2px solid rgba(255, 255, 255, 0.3);
               box-shadow: 0 0 25px rgba(59, 130, 246, 0.5);
               font-weight: 800;
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
           }

           .status-rejected {
               background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);
               color: #ffffff;
               border: 2px solid rgba(255, 255, 255, 0.3);
               box-shadow: 0 0 25px rgba(220, 38, 38, 0.5);
               font-weight: 800;
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
           }

           .status-bloqueado {
               background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);
               color: #ffffff;
               border: 2px solid rgba(255, 255, 255, 0.3);
               box-shadow: 0 0 25px rgba(220, 38, 38, 0.5);
               font-weight: 800;
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
           }

           .status-desbloqueado {
               background: linear-gradient(135deg, #059669 0%, #047857 100%);
               color: #ffffff;
               border: 2px solid rgba(255, 255, 255, 0.3);
               box-shadow: 0 0 25px rgba(5, 150, 105, 0.5);
               font-weight: 800;
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
           }

           /* ===== ROLE BADGES ===== */
           .role-badge {
               position: absolute;
               top: 12px;
               right: 12px;
               padding: 4px 12px;
               border-radius: 20px;
               font-size: 0.7rem;
               font-weight: 700;
               text-transform: uppercase;
               letter-spacing: 0.5px;
           }

           .role-reg {
               background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
               color: white;
           }

           .role-subreg {
               background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
               color: white;
           }

           .role-admin {
               background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
               color: white;
           }

           .role-aut {
               background: linear-gradient(135deg, #10b981 0%, #059669 100%);
               color: white;
           }

           .role-guard {
               background: linear-gradient(135deg, #16a34a 0%, #059669 100%);
               color: white;
           }

           .role-admin-delegado {
               background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
               color: white;
               border: 2px solid rgba(255, 255, 255, 0.4);
               font-weight: 800;
               font-size: 0.65rem;
               animation: pulse 2s infinite;
           }

           .role-reg-subreg {
               background: linear-gradient(135deg, #8b5cf6 0%, #06b6d4 100%);
               color: white;
           }

           /* ===== CARDS STRUCTURES ===== */
           .users-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
               gap: 16px;
               margin-top: 20px;
           }

           .user-card,
           .registro-card,
           .esperada-card,
           .bloqueo-card,
           .dias-especiales-card,
           .dias-especiales-registro-card {
               background: rgba(15, 23, 42, 0.8);
               border: 2px solid rgba(255, 255, 255, 0.2);
               border-radius: var(--border-radius-sm);
               padding: 20px;
               backdrop-filter: blur(25px);
               transition: var(--transition);
               position: relative;
               overflow: hidden;
               box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
               margin-bottom: 20px;
           }

           .user-card:hover,
           .registro-card:hover,
           .esperada-card:hover,
           .bloqueo-card:hover,
           .dias-especiales-card:hover,
           .dias-especiales-registro-card:hover {
               background: rgba(15, 23, 42, 0.9);
               transform: translateY(-6px);
               border-color: rgba(255, 255, 255, 0.4);
               box-shadow: 0 16px 32px rgba(0, 0, 0, 0.5);
           }

           .esperada-card.autorizada,
           .dias-especiales-registro-card.autorizado {
               border-color: rgba(34, 197, 94, 0.5);
               background: rgba(34, 197, 94, 0.1);
           }

           .esperada-card.rechazada,
           .dias-especiales-registro-card.rechazado {
               border-color: rgba(239, 68, 68, 0.5);
               background: rgba(239, 68, 68, 0.1);
           }

           .dias-especiales-registro-card.pendiente {
               border-color: rgba(245, 158, 11, 0.5);
               background: rgba(245, 158, 11, 0.05);
           }

           .bloqueo-card.inactivo {
               border-color: rgba(107, 114, 128, 0.4);
               background: rgba(107, 114, 128, 0.1);
               opacity: 0.7;
           }

           .registro-card.selected {
               border-color: #667eea;
               box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.3);
               transform: translateY(-2px);
           }

           .resultado-busqueda {
               border-left: 4px solid #667eea;
               position: relative;
           }

           .resultado-busqueda::before {
               content: '🔍';
               position: absolute;
               top: 12px;
               right: 12px;
               background: rgba(102, 126, 234, 0.1);
               padding: 4px 8px;
               border-radius: 50%;
               font-size: 0.8rem;
           }

           .resultado-empresa {
               background: rgba(59, 130, 246, 0.1);
               border-left: 3px solid #3b82f6;
           }

           .resultado-subcontrato {
               background: rgba(168, 85, 247, 0.1);
               border-left: 3px solid #a855f7;
           }

           .registro-asignado {
               border-left: 4px solid #3b82f6;
           }

           .registro-subcontrato {
               border-left: 4px solid #f59e0b;
           }

           .user-card-header {
               display: flex;
               align-items: center;
               gap: 12px;
               margin-bottom: 16px;
           }

           .user-card-avatar {
               width: 50px;
               height: 50px;
               border-radius: 50%;
               background: var(--primary-gradient);
               display: flex;
               align-items: center;
               justify-content: center;
               color: white;
               font-weight: 700;
               font-size: 1.2rem;
               box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
           }

           .user-card-info h3 {
               color: #ffffff;
               font-size: 1.1rem;
               font-weight: 700;
               margin-bottom: 4px;
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
           }

           .user-card-info p {
               color: #e2e8f0;
               font-size: 0.8rem;
               font-weight: 500;
           }

           .user-detail-item {
               display: flex;
               justify-content: space-between;
               margin-bottom: 6px;
               padding: 6px 0;
               border-bottom: 1px solid rgba(255, 255, 255, 0.1);
           }

           .user-detail-label {
               color: #ffffff;
               font-size: 0.75rem;
               font-weight: 600;
               text-transform: uppercase;
               letter-spacing: 0.3px;
           }

           .user-detail-value {
               color: #f1f5f9;
               font-size: 0.75rem;
               font-weight: 500;
           }

           .user-permissions {
               margin-bottom: 16px;
           }

           .user-permissions h4 {
               color: #ffffff;
               font-size: 0.8rem;
               font-weight: 700;
               margin-bottom: 8px;
               text-transform: uppercase;
               letter-spacing: 0.5px;
           }

           .permission-tags {
               display: flex;
               flex-wrap: wrap;
               gap: 4px;
           }

           .permission-tag {
               background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
               color: #ffffff;
               padding: 3px 8px;
               border-radius: 12px;
               font-size: 0.65rem;
               font-weight: 600;
               border: 1px solid rgba(255, 255, 255, 0.2);
               text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
               margin: 2px;
               display: inline-block;
           }

           .user-card-actions {
               display: flex;
               gap: 8px;
               flex-wrap: wrap;
           }

           /* ===== PATENTES ===== */
           .patentes-container {
               display: flex;
               flex-wrap: wrap;
               gap: 8px;
               margin-top: 8px;
           }

           .patente-tag {
               background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
               color: white;
               padding: 4px 12px;
               border-radius: 15px;
               font-size: 0.8rem;
               font-weight: 600;
               display: flex;
               align-items: center;
               gap: 8px;
           }

           .patente-remove {
               background: rgba(255, 255, 255, 0.2);
               border: none;
               border-radius: 50%;
               width: 20px;
               height: 20px;
               color: white;
               cursor: pointer;
               font-size: 0.7rem;
               display: flex;
               align-items: center;
               justify-content: center;
           }

           .patente-remove:hover {
               background: rgba(255, 255, 255, 0.3);
           }

           #llegaPieMsg {
               color: #fbbf24;
               font-size: 0.8rem;
               margin-top: 8px;
               display: none;
           }

           /* ===== SELECTION CONTROLS ===== */
           .selection-controls {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 20px;
               padding: 16px;
               background: rgba(255, 255, 255, 0.05);
               border-radius: var(--border-radius-sm);
               border: 1px solid rgba(255, 255, 255, 0.1);
           }

           .selection-info {
               color: var(--text-light);
               font-size: 0.9rem;
               font-weight: 500;
           }

           .group-actions {
               display: flex;
               gap: 12px;
           }

           .selected-count {
               background: var(--primary-gradient);
               color: white;
               padding: 4px 12px;
               border-radius: 15px;
               font-size: 0.8rem;
               font-weight: 600;
               margin-left: 8px;
           }

           .card-checkbox {
               position: absolute;
               top: 16px;
               left: 16px;
               z-index: 10;
           }

           .card-checkbox input[type="checkbox"] {
               width: 20px;
               height: 20px;
               accent-color: #667eea;
               cursor: pointer;
               border-radius: 4px;
           }

           .advanced-selection-controls {
               background: rgba(255, 255, 255, 0.05);
               border: 1px solid rgba(255, 255, 255, 0.1);
               border-radius: var(--border-radius-sm);
               padding: 20px;
               margin-bottom: 20px;
           }

           .selection-tabs {
               display: flex;
               gap: 8px;
               margin-bottom: 16px;
               padding: 4px;
               background: rgba(255, 255, 255, 0.03);
               border-radius: 50px;
               border: 1px solid rgba(255, 255, 255, 0.08);
           }

           .selection-tab {
               padding: 8px 16px;
               background: transparent;
               border: none;
               border-radius: 50px;
               cursor: pointer;
               font-weight: 500;
               color: rgba(255, 255, 255, 0.7);
               transition: var(--transition);
               white-space: nowrap;
               font-size: 0.9rem;
               position: relative;
               overflow: hidden;
           }

           .selection-tab::before {
               content: '';
               position: absolute;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background: var(--primary-gradient);
               opacity: 0;
               transition: var(--transition);
               z-index: -1;
           }

           .selection-tab.active {
               color: white;
               font-weight: 600;
               transform: scale(1.05);
               box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
           }

           .selection-tab.active::before {
               opacity: 1;
           }

           .selection-tab:hover:not(.active) {
               color: white;
               background: rgba(255, 255, 255, 0.1);
               transform: translateY(-1px);
           }

           .selection-content {
               display: none;
           }

           .selection-content.active {
               display: block;
           }

           .filter-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 12px;
               margin-bottom: 16px;
           }

           .filter-item {
               display: flex;
               align-items: center;
               gap: 8px;
               padding: 8px 12px;
               background: rgba(255, 255, 255, 0.05);
               border-radius: var(--border-radius-sm);
               border: 1px solid rgba(255, 255, 255, 0.1);
               cursor: pointer;
               transition: var(--transition);
           }

           .filter-item:hover {
               background: rgba(255, 255, 255, 0.1);
               border-color: rgba(255, 255, 255, 0.2);
           }

           .filter-item input[type="checkbox"] {
               width: 16px;
               height: 16px;
               accent-color: #667eea;
           }

           .filter-item label {
               color: var(--text-light);
               font-size: 0.9rem;
               cursor: pointer;
               margin: 0;
               flex: 1;
           }

           .filter-count {
               background: rgba(102, 126, 234, 0.2);
               color: #667eea;
               padding: 2px 6px;
               border-radius: 10px;
               font-size: 0.7rem;
               font-weight: 600;
           }

           .separador-resultados {
               padding: 8px 12px;
               background: rgba(255, 255, 255, 0.05);
               color: #9ca3af;
               font-size: 0.8rem;
               font-weight: bold;
               text-align: center;
               border-top: 1px solid rgba(255, 255, 255, 0.1);
               border-bottom: 1px solid rgba(255, 255, 255, 0.1);
           }

           /* ===== NOTIFICATIONS ===== */
           .notification {
               position: fixed;
               top: 20px;
               right: 20px;
               padding: 16px 24px;
               border-radius: var(--border-radius-sm);
               color: white;
               font-weight: 500;
               z-index: 1001;
               backdrop-filter: blur(20px);
               border: 1px solid rgba(255, 255, 255, 0.2);
               animation: slideInFromRight 0.3s ease-out;
               box-shadow: var(--shadow-lg);
           }

           .notification.success {
               background: rgba(34, 197, 94, 0.9);
           }

           .notification.error {
               background: rgba(239, 68, 68, 0.9);
           }

           .notification.info {
               background: rgba(59, 130, 246, 0.9);
           }

           /* ===== BADGES ORIGIN ===== */
           .origen-badge {
               position: absolute;
               top: 10px;
               right: 10px;
               padding: 4px 8px;
               border-radius: 12px;
               font-size: 0.7rem;
               font-weight: bold;
               z-index: 10;
           }

           .origen-propio {
               background: rgba(59, 130, 246, 0.2);
               color: #3b82f6;
               border: 1px solid rgba(59, 130, 246, 0.3);
           }

           .origen-delegado {
               background: rgba(245, 158, 11, 0.2);
               color: #f59e0b;
               border: 1px solid rgba(245, 158, 11, 0.3);
           }

           .origen-subregistrador {
               background: rgba(16, 185, 129, 0.2);
               color: #10b981;
               border: 1px solid rgba(16, 185, 129, 0.3);
           }

           /* ===== BLOQUEOS ===== */
           .bloqueo-tipo {
               position: absolute;
               top: 12px;
               right: 12px;
               padding: 4px 12px;
               border-radius: 20px;
               font-size: 0.7rem;
               font-weight: 700;
               text-transform: uppercase;
               letter-spacing: 0.5px;
           }

           .bloqueo-persona {
               background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
               color: white;
           }

           .bloqueo-vehiculo {
               background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
               color: white;
           }

           .tipo-bloqueo-toggle {
               display: flex;
               gap: 8px;
               margin-bottom: 20px;
               padding: 8px;
               background: rgba(255, 255, 255, 0.05);
               border-radius: 50px;
               border: 1px solid rgba(255, 255, 255, 0.1);
           }

           .toggle-option {
               flex: 1;
               padding: 12px 20px;
               background: transparent;
               border: none;
               border-radius: 50px;
               color: rgba(255, 255, 255, 0.7);
               cursor: pointer;
               transition: var(--transition);
               font-weight: 500;
   }

   .toggle-option.active {
       background: var(--primary-gradient);
       color: white;
       font-weight: 600;
       box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
   }

   .bloqueo-alert {
       background: rgba(239, 68, 68, 0.9);
       color: white;
       padding: 16px 24px;
       border-radius: var(--border-radius-sm);
       margin-bottom: 20px;
       border: 1px solid rgba(255, 255, 255, 0.2);
       font-weight: 600;
       display: flex;
       align-items: center;
       gap: 12px;
   }

   /* ===== FERIADOS ===== */
   .feriado-item {
       display: flex;
       justify-content: space-between;
       align-items: center;
       padding: 12px 16px;
       background: rgba(255, 255, 255, 0.05);
       border-radius: var(--border-radius-sm);
       margin-bottom: 8px;
       border: 1px solid rgba(255, 255, 255, 0.1);
   }

   .feriado-fecha {
       font-weight: 600;
       color: #ffffff;
   }

   .feriado-nombre {
       color: #e2e8f0;
       flex: 1;
       margin-left: 16px;
   }

   .feriados-selector {
       max-height: 200px;
       overflow-y: auto;
       padding: 12px;
       background: rgba(255, 255, 255, 0.03);
       border-radius: var(--border-radius-sm);
       border: 1px solid rgba(255, 255, 255, 0.08);
   }

   .feriado-checkbox {
       display: flex;
       align-items: center;
       gap: 12px;
       padding: 8px 0;
       border-bottom: 1px solid rgba(255, 255, 255, 0.05);
   }

   .feriado-checkbox:last-child {
       border-bottom: none;
   }

   .feriado-checkbox input[type="checkbox"] {
       width: 18px;
       height: 18px;
       accent-color: #667eea;
   }

   .feriado-checkbox label {
       color: var(--text-light);
       font-size: 0.9rem;
       cursor: pointer;
       flex: 1;
   }

   /* ===== DÍAS ESPECIALES ===== */
   .tipo-dia-checkboxes {
       display: flex;
       gap: 20px;
       margin: 20px 0;
       flex-wrap: wrap;
   }

   .tipo-dia-item {
       display: flex;
       align-items: center;
       gap: 12px;
       padding: 12px 16px;
       background: rgba(255, 255, 255, 0.05);
       border-radius: var(--border-radius-sm);
       border: 1px solid rgba(255, 255, 255, 0.1);
       transition: var(--transition);
       cursor: pointer;
   }

   .tipo-dia-item:hover {
       background: rgba(255, 255, 255, 0.08);
       border-color: rgba(255, 255, 255, 0.2);
   }

   .tipo-dia-item input[type="checkbox"] {
       width: 20px;
       height: 20px;
       accent-color: #667eea;
       cursor: pointer;
   }

   .tipo-dia-item label {
       color: var(--text-light);
       font-weight: 500;
       cursor: pointer;
       margin: 0;
   }

   .fecha-options {
       margin-top: 16px;
       padding: 16px;
       background: rgba(255, 255, 255, 0.03);
       border-radius: var(--border-radius-sm);
       border: 1px solid rgba(255, 255, 255, 0.08);
   }

   .fecha-option {
       display: flex;
       align-items: center;
       gap: 12px;
       margin-bottom: 12px;
   }

   .fecha-option input[type="radio"] {
       width: 16px;
       height: 16px;
       accent-color: #667eea;
   }

   .fecha-option label {
       color: var(--text-light);
       font-size: 0.9rem;
   }

   .multiple-dates-container {
       display: none;
       gap: 8px;
       flex-wrap: wrap;
       margin-top: 12px;
   }

   .single-date-container {
       display: none;
       margin-top: 12px;
   }

   .date-tag {
       background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
       color: white;
       padding: 4px 12px;
       border-radius: 15px;
       font-size: 0.8rem;
       font-weight: 600;
       display: flex;
       align-items: center;
       gap: 8px;
   }

   .date-remove {
       background: rgba(255, 255, 255, 0.2);
       border: none;
       border-radius: 50%;
       width: 18px;
       height: 18px;
       color: white;
       cursor: pointer;
       font-size: 0.7rem;
       display: flex;
       align-items: center;
       justify-content: center;
   }

   .date-remove:hover {
       background: rgba(255, 255, 255, 0.3);
   }

   .tipo-dia-section {
       margin-bottom: 24px;
       padding: 16px;
       background: rgba(255, 255, 255, 0.02);
       border-radius: var(--border-radius-sm);
       border: 1px solid rgba(255, 255, 255, 0.05);
   }

   .fechas-detalle {
       margin: 12px 0;
       padding: 12px;
       background: rgba(255, 255, 255, 0.03);
       border-radius: var(--border-radius-sm);
       border: 1px solid rgba(255, 255, 255, 0.08);
   }

   .fechas-detalle h5 {
       color: white;
       margin: 0 0 8px 0;
       font-size: 0.9rem;
       font-weight: 600;
       display: flex;
       align-items: center;
       gap: 8px;
   }

   .fecha-item {
       display: inline-block;
       background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
       color: white;
       padding: 3px 8px;
       border-radius: 12px;
       font-size: 0.7rem;
       font-weight: 600;
       margin: 2px 4px;
       border: 1px solid rgba(255, 255, 255, 0.2);
   }

   .feriado-item {
       display: block;
       background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
       color: white;
       padding: 4px 10px;
       border-radius: 8px;
       font-size: 0.75rem;
       font-weight: 600;
       margin: 3px 0;
       border: 1px solid rgba(255, 255, 255, 0.2);
   }

   .tipo-sabado {
       background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
       color: white;
   }

   .tipo-domingo {
       background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
       color: white;
   }

   .tipo-feriado {
       background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
       color: white;
   }

   .tipo-dia-badge {
       display: inline-block;
       padding: 2px 8px;
       border-radius: 12px;
       font-size: 0.7rem;
       font-weight: 600;
       margin: 2px;
   }

   /* ===== SEARCH ===== */
   .busqueda-resultados {
       max-height: 200px;
       overflow-y: auto;
       background: rgba(255, 255, 255, 0.05);
       border-radius: var(--border-radius-sm);
       border: 1px solid rgba(255, 255, 255, 0.1);
       margin-top: 8px;
   }

   .resultado-item {
       padding: 12px;
       border-bottom: 1px solid rgba(255, 255, 255, 0.1);
       cursor: pointer;
       transition: var(--transition);
   }

   .resultado-item:hover {
       background: rgba(255, 255, 255, 0.1);
   }

   .resultado-item:last-child {
       border-bottom: none;
   }

   .resultado-nombre {
       font-weight: 600;
       color: white;
       margin-bottom: 4px;
   }

   .resultado-detalles {
       font-size: 0.8rem;
       color: #e2e8f0;
   }

   .persona-seleccionada {
       background: rgba(34, 197, 94, 0.1);
       border: 1px solid rgba(34, 197, 94, 0.3);
       border-radius: var(--border-radius-sm);
       padding: 12px;
       margin-bottom: 16px;
   }

   .persona-seleccionada h4 {
       color: #22c55e;
       margin: 0 0 8px 0;
       font-size: 1rem;
   }

   .persona-seleccionada p {
       color: var(--text-light);
       margin: 4px 0;
       font-size: 0.9rem;
   }

   #contadorResultados,
   #contadorAsistencias,
   #contadorMisRegistros,
   #contadorMisSubcontratos {
       background: rgba(102, 126, 234, 0.1);
       border: 1px solid rgba(102, 126, 234, 0.2);
       border-radius: var(--border-radius-sm);
       padding: 12px 20px;
       color: var(--text-light);
       font-weight: 500;
   }

   #numeroResultados,
   #numeroAsistencias,
   #numeroMisRegistros,
   #numeroMisSubcontratos {
       background: var(--primary-gradient);
       color: white;
       padding: 2px 8px;
       border-radius: 12px;
       font-weight: 600;
       margin: 0 4px;
   }

   /* ===== ACOMPAÑANTES ===== */
   .acompañantes-section {
       margin-top: 16px;
       padding: 16px;
       background: rgba(255, 255, 255, 0.03);
       border-radius: var(--border-radius-sm);
       border: 1px solid rgba(255, 255, 255, 0.08);
   }

   .acompañantes-section h4 {
       color: var(--text-light);
       margin-bottom: 16px;
       font-size: 1rem;
       font-weight: 600;
       display: flex;
       align-items: center;
       gap: 8px;
   }

   .acompañantes-section h4::before {
       content: '👥';
       font-size: 1.1rem;
   }

   #cantidadAcompañantes {
       width: 100%;
       padding: 12px 16px;
       background: rgba(255, 255, 255, 0.05);
       border: 1px solid rgba(255, 255, 255, 0.1);
       border-radius: var(--border-radius-sm);
       color: var(--text-light);
       font-size: 0.9rem;
       transition: var(--transition);
   }

   #cantidadAcompañantes:focus {
       outline: none;
       border-color: #667eea;
       background: rgba(255, 255, 255, 0.08);
       box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
       transform: translateY(-1px);
   }

   #acompañantesList {
       margin-top: 16px;
   }

   .acompañante-item {
       background: rgba(255, 255, 255, 0.05);
       border: 1px solid rgba(255, 255, 255, 0.1);
       border-radius: var(--border-radius-sm);
       padding: 16px;
       margin-bottom: 12px;
       position: relative;
       transition: var(--transition);
       animation: slideInFromBottom 0.3s ease-out;
   }

   .acompañante-item:hover {
       background: rgba(255, 255, 255, 0.08);
       border-color: rgba(255, 255, 255, 0.2);
       transform: translateY(-2px);
   }

   .acompañante-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 12px;
       padding-bottom: 8px;
       border-bottom: 1px solid rgba(255, 255, 255, 0.1);
   }

   .acompañante-numero {
       background: var(--primary-gradient);
       color: white;
       padding: 6px 14px;
       border-radius: 20px;
       font-size: 0.8rem;
       font-weight: 600;
       box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
       display: flex;
       align-items: center;
       gap: 6px;
   }

   .acompañante-numero::before {
       content: '👤';
       font-size: 0.9rem;
   }

   .acompañante-numero:hover {
       transform: scale(1.05);
       box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
   }

   .acompañante-item.complete {
       border-color: rgba(34, 197, 94, 0.4);
       background: rgba(34, 197, 94, 0.03);
   }

   .acompañante-item.complete .acompañante-numero {
       background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
   }

   .acompañante-item.complete .acompañante-numero::after {
       content: ' ✓';
       font-size: 0.7rem;
   }

   .acompañante-item .form-row {
       display: grid;
       grid-template-columns: 1fr 1fr;
       gap: 16px;
       margin-bottom: 0;
   }

   .acompañante-item .form-group {
       margin-bottom: 0;
   }

   .acompañante-item .custom-checkbox {
       margin-bottom: 12px;
       grid-column: 1 / -1;
       padding: 8px 12px;
       background: rgba(255, 255, 255, 0.03);
       border-radius: 8px;
       border: 1px solid rgba(255, 255, 255, 0.05);
   }

   .acompañante-item .custom-checkbox input[type="checkbox"] {
       width: 16px;
       height: 16px;
       accent-color: #667eea;
   }

   .acompañante-item .custom-checkbox label {
       font-size: 0.8rem;
       color: var(--text-light);
       font-weight: 500;
   }

   .acompañante-item .modern-input {
       padding: 10px 14px;
       font-size: 0.85rem;
       background: rgba(255, 255, 255, 0.04);
       border: 1px solid rgba(255, 255, 255, 0.08);
   }

   .acompañante-item .modern-input:focus {
       background: rgba(255, 255, 255, 0.08);
       border-color: #667eea;
       transform: translateY(-1px);
   }

   .acompañante-item label {
       color: var(--text-light);
       font-size: 0.8rem;
       font-weight: 500;
       margin-bottom: 6px;
       display: flex;
       align-items: center;
       gap: 4px;
   }

   .acompañante-item label[for*="documento"]::before {
       content: '🆔';
       font-size: 0.8rem;
   }

   .acompañante-item label[for*="nombre"]::before {
       content: '👤';
       font-size: 0.8rem;
   }

   .acompañante-item .documento-extranjero {
       color: #ef4444 !important;
       font-weight: 600;
       border-color: rgba(239, 68, 68, 0.3) !important;
   }

   .acompañantes-help {
       background: rgba(59, 130, 246, 0.1);
       border: 1px solid rgba(59, 130, 246, 0.2);
       border-radius: var(--border-radius-sm);
       padding: 12px 16px;
       margin-top: 12px;
       color: #3b82f6;
       font-size: 0.8rem;
       display: flex;
       align-items: center;
       gap: 8px;
       animation: fadeIn 0.3s ease-out;
   }

   .acompañantes-help::before {
       content: 'ℹ️';
       font-size: 1rem;
   }

   .acompañantes-counter {
       background: rgba(102, 126, 234, 0.1);
       border: 1px solid rgba(102, 126, 234, 0.2);
       border-radius: var(--border-radius-sm);
       padding: 8px 12px;
       margin-top: 8px;
       color: var(--text-light);
       font-size: 0.8rem;
       text-align: center;
   }

   .acompañante-item + .acompañante-item::before {
       content: '';
       position: absolute;
       top: -6px;
       left: 16px;
       right: 16px;
       height: 1px;
       background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
   }

   .acompañante-item:focus-within {
       border-color: rgba(102, 126, 234, 0.4);
       box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
   }

   .acompañante-item .form-group label::after {
       content: ' *';
       color: #ef4444;
       font-weight: bold;
   }

   /* ===== TABLES ===== */
   .tabla-dias-especiales {
       width: 100%;
       border-collapse: collapse;
       margin-top: 20px;
       background: rgba(255, 255, 255, 0.03);
       border-radius: var(--border-radius-sm);
       overflow: hidden;
   }

   .tabla-dias-especiales th,
   .tabla-dias-especiales td {
       padding: 12px;
       text-align: left;
       border-bottom: 1px solid rgba(255, 255, 255, 0.1);
       color: var(--text-light);
   }

   .tabla-dias-especiales th {
       background: rgba(255, 255, 255, 0.08);
       font-weight: 600;
       color: white;
       font-size: 0.9rem;
       text-transform: uppercase;
       letter-spacing: 0.5px;
   }

   .tabla-dias-especiales tr:hover {
       background: rgba(255, 255, 255, 0.05);
   }

   .fechas-especiales {
       font-size: 0.8rem;
       color: #e2e8f0;
   }

   /* ===== HIDDEN CLASS ===== */
   .hidden {
       display: none !important;
   }

   /* ===== SCROLLBAR STYLING ===== */
   ::-webkit-scrollbar {
       width: 8px;
       height: 8px;
   }

   ::-webkit-scrollbar-track {
       background: rgba(255, 255, 255, 0.05);
       border-radius: 4px;
   }

   ::-webkit-scrollbar-thumb {
       background: var(--primary-gradient);
       border-radius: 4px;
   }

   ::-webkit-scrollbar-thumb:hover {
       background: var(--secondary-gradient);
   }

   /* ===== RESPONSIVE DESIGN ===== */
   @media (max-width: 1200px) {
       .tab-responsive {
           min-width: 100px;
           max-width: 150px;
           font-size: 0.8rem;
           padding: 8px 10px;
       }

       .tab-responsive .tab-counter {
           font-size: 0.65rem;
           padding: 1px 4px;
           margin-left: 4px;
       }
   }

   @media (max-width: 768px) {
       .container {
           padding: 10px;
       }

       /* FORMULARIOS - 2 COLUMNAS BALANCEADAS */
       .form-row {
           display: grid;
           grid-template-columns: 1fr 1fr;
           gap: 10px;
           margin-bottom: 14px;
           align-items: end;
       }

       .modern-input,
       select {
           padding: 8px 12px;
           font-size: 0.85rem;
           line-height: 1.2;
           min-height: 36px;
           height: 36px;
           width: 100%;
           box-sizing: border-box;
       }

       .form-group {
           margin-bottom: 8px;
           width: 100%;
       }

       .form-group label {
           margin-bottom: 4px;
           font-size: 0.8rem;
           font-weight: 500;
           height: 16px;
           display: block;
           line-height: 1.1;
       }

       /* CHECKBOX DOCUMENTO EXTRANJERO */
       .custom-checkbox {
           grid-column: 1 / -1;
           margin-bottom: 8px;
           padding: 6px 10px;
           background: rgba(255, 255, 255, 0.05);
           border-radius: 8px;
           border: 1px solid rgba(255, 255, 255, 0.08);
           display: flex;
           align-items: center;
           gap: 8px;
           max-width: 250px;
       }

       .custom-checkbox input[type="checkbox"] {
           width: 16px;
           height: 16px;
           margin: 0;
       }

       .custom-checkbox label {
           font-size: 0.75rem;
           margin: 0;
           height: auto;
           line-height: 1.2;
       }

       /* CAMPOS QUE OCUPAN TODA LA FILA */
       .form-group:has(textarea),
       .form-group:has(.patentes-container),
       .form-group:has(.acompañantes-section),
       .form-group:has(#motivoDiasEspeciales),
       .form-group:has(#buscarPersonaDiasEspeciales),
       .form-group:has(#campoBusqueda),
       .form-group:has(#busquedaAsistencias),
       .form-group:has(#buscarMisRegistros),
       .form-group:has(#buscarMisSubcontratos) {
           grid-column: 1 / -1;
       }

       .registro-delegado-checkbox {
           grid-column: 1 / -1;
           margin-bottom: 10px;
           padding: 8px 12px;
           max-width: 100%;
       }

       .registro-delegado-info {
           grid-column: 1 / -1;
           margin-bottom: 10px;
           padding: 8px 12px;
           font-size: 0.8rem;
       }

       #proveedorGroup,
       #guiaGroup {
           grid-column: 1 / -1;
       }

       .form-group:has(#patente) {
           grid-column: 1 / -1;
       }

       .form-group:has(#patente) > div {
           display: flex;
           gap: 8px;
           align-items: end;
       }

       .form-group:has(#patente) input[type="text"] {
           flex: 1;
       }

       .form-group:has(#patente) .add-patente-btn {
           flex-shrink: 0;
           margin-top: 0;
           padding: 6px 12px;
           font-size: 0.75rem;
       }

       .patentes-container {
           gap: 4px;
           margin-top: 6px;
       }

       .patente-tag {
           font-size: 0.7rem;
           padding: 3px 8px;
           margin: 1px;
       }

       #llegaPieMsg {
           font-size: 0.75rem;
           margin-top: 6px;
           padding: 4px 8px;
           background: rgba(251, 191, 36, 0.1);
           border-radius: 6px;
           border: 1px solid rgba(251, 191, 36, 0.3);
       }

       textarea.modern-input {
           min-height: 70px;
           padding: 8px 10px;
           height: auto;
           resize: vertical;
       }

       .btn-primary,
       .btn-secondary {
           padding: 8px 16px;
           font-size: 0.85rem;
           min-height: 36px;
       }

       .form-actions {
           grid-column: 1 / -1;
           flex-direction: column;
           gap: 8px;
           margin-top: 16px;
       }

       /* ACOMPAÑANTES */
       .acompañantes-section {
           margin-top: 12px;
           padding: 10px;
       }

       .acompañante-item {
           padding: 10px;
           margin-bottom: 8px;
       }

       .acompañante-header {
           margin-bottom: 8px;
       }

       .acompañante-numero {
           font-size: 0.7rem;
           padding: 2px 8px;
       }

       .btn-remove-acompañante {
           padding: 3px 6px;
           font-size: 0.65rem;
       }

       .acompañante-item .form-row {
           grid-template-columns: 1fr;
           gap: 8px;
       }

       .acompañante-item .modern-input {
           min-height: 32px;
           height: 32px;
       }

       /* TABS RESPONSIVE - 3 COLUMNAS EXACTAS */
       .admin-tabs-container {
           display: grid;
           grid-template-columns: repeat(3, 1fr);
           gap: 4px;
           padding: 6px;
           margin-bottom: 16px;
       }

       .tab-responsive {
           font-size: 0.7rem;
           padding: 8px 4px;
           min-height: 40px;
           display: flex;
           flex-direction: column;
           align-items: center;
           justify-content: center;
           gap: 2px;
           text-align: center;
           border-radius: 12px;
           transition: var(--transition);
       }

       .tab-responsive .tab-text {
           line-height: 1.1;
       }

       .tab-responsive .tab-counter {
           font-size: 0.6rem;
           padding: 1px 3px;
           margin: 0;
           min-width: 12px;
           background: #ef4444;
           color: white;
           border-radius: 50%;
       }

       .modern-card {
           padding: 16px 12px;
           margin-bottom: 12px;
       }

       .card-title {
           font-size: 1.1rem;
           margin-bottom: 12px;
       }

       .admin-header {
           flex-direction: column;
           align-items: flex-start;
           gap: 12px;
           padding: 12px;
       }

       .admin-title {
           font-size: 1.6rem;
       }

       .user-info {
           flex-wrap: wrap;
           gap: 8px;
           padding: 8px 12px;
           width: 100%;
           justify-content: center;
       }

       .user-avatar {
           width: 36px;
           height: 36px;
           font-size: 1rem;
       }

       .welcome-container {
           max-width: 95%;
           width: 95%;
           padding: 40px 20px;
           margin: 0 auto;
       }

       .welcome-title {
           font-size: 2rem;
           letter-spacing: -1px;
           line-height: 1.2;
           word-break: break-word;
       }

       .company-branding {
           margin-bottom: 20px;
           padding-bottom: 16px;
       }

       .company-name {
           font-size: 1.4rem;
           line-height: 1.1;
           margin-bottom: 6px;
       }

       .company-location {
           font-size: 0.9rem;
           letter-spacing: 1px;
       }

       .welcome-subtitle {
           font-size: 1rem;
           margin-bottom: 20px;
           line-height: 1.3;
       }

       .neo-btn {
           padding: 12px 24px;
           font-size: 1rem;
           width: 100%;
           max-width: 280px;
       }

       .users-grid {
                  grid-template-columns: 1fr;
                  gap: 12px;
              }

              .user-card,
              .registro-card,
              .esperada-card,
              .bloqueo-card,
              .dias-especiales-card {
                  padding: 16px;
                  margin-bottom: 12px;
              }

              .user-card-actions {
                  justify-content: center;
                  flex-wrap: wrap;
                  gap: 8px;
              }

              .btn-sm {
                  padding: 6px 10px;
                  font-size: 0.7rem;
              }

              .selection-controls,
              .advanced-selection-controls {
                  flex-direction: column;
                  gap: 12px;
                  padding: 12px;
              }

              .group-actions {
                  flex-wrap: wrap;
                  gap: 8px;
                  justify-content: center;
              }

              .btn-group {
                  padding: 8px 12px;
                  font-size: 0.75rem;
              }

              .notification {
                  right: 10px;
                  left: 10px;
                  top: 10px;
                  width: auto;
                  padding: 12px 16px;
                  font-size: 0.85rem;
              }

              .permissions-grid {
                  grid-template-columns: 1fr;
                  gap: 8px;
              }

              .permission-item {
                  padding: 8px 12px;
              }

              .filter-grid {
                  grid-template-columns: 1fr;
                  gap: 8px;
              }

              .fechas-detalle {
                  padding: 8px;
              }

              .tipo-dia-checkboxes {
                  flex-direction: column;
                  gap: 10px;
              }

              .fecha-options {
                  padding: 12px;
              }

              .tabla-dias-especiales {
                  font-size: 0.8rem;
              }

              .tabla-dias-especiales th,
              .tabla-dias-especiales td {
                  padding: 8px;
              }

              .tipo-bloqueo-toggle {
                  flex-direction: column;
                  gap: 6px;
                  padding: 6px;
              }

              .toggle-option {
                  padding: 8px 16px;
                  text-align: center;
              }

              .feriados-selector {
                  max-height: 150px;
                  padding: 8px;
              }

              .feriado-checkbox {
                  padding: 6px 0;
              }

              .multiple-dates-container {
                  gap: 6px;
              }

              .date-tag,
              .fecha-item {
                  font-size: 0.7rem;
                  padding: 2px 6px;
                  margin: 1px 2px;
              }

              #contadorResultados,
              #contadorAsistencias,
              #contadorMisRegistros,
              #contadorMisSubcontratos {
                  padding: 8px 12px;
                  font-size: 0.85rem;
              }

              .login-container {
                  max-width: 95%;
                  width: 95%;
                  padding: 30px 20px;
              }

              .login-title {
                  font-size: 1.6rem;
                  margin-bottom: 20px;
              }

              .company-header {
                  margin-bottom: 16px;
                  padding-bottom: 12px;
              }

              .company-name-small {
                  font-size: 1rem;
              }

              .loading-container {
                  padding: 30px 20px;
                  max-width: 95%;
                  width: 95%;
              }

              .loading-logo {
                  width: 60px;
                  height: 60px;
                  margin-bottom: 20px;
              }

              .loading-ring {
                  width: 60px;
                  height: 60px;
              }

              .loading-ring:nth-child(2) {
                  width: 45px;
                  height: 45px;
                  top: 7.5px;
                  left: 7.5px;
              }

              .loading-ring:nth-child(3) {
                  width: 30px;
                  height: 30px;
                  top: 15px;
                  left: 15px;
              }

              .loading-text {
                  font-size: 1.2rem;
              }

              .loading-subtitle {
                  font-size: 0.8rem;
              }

              #fechaDesdeAsistencias,
              #fechaHastaAsistencias {
                  width: 100%;
                  min-width: 0;
                  flex: 1;
              }

              .form-row:has(#fechaDesdeAsistencias),
              .form-row:has(#fechaHastaAsistencias) {
                  grid-template-columns: 1fr 1fr;
              }

              #fechaDesdeAsistencias,
              #fechaHastaAsistencias {
                  min-width: 120px;
              }

              .form-group:has(#fechaDesdeAsistencias),
              .form-group:has(#fechaHastaAsistencias) {
                  min-width: 0;
                  flex: 1;
              }

              #asistencias .form-row {
                  display: grid;
                  grid-template-columns: 1fr 1fr;
                  gap: 10px;
                  margin-bottom: 14px;
              }

              #asistencias .form-row .form-group:nth-child(3) {
                  grid-column: 1 / -1;
              }

              #asistencias .form-row .form-group:first-child:has(#busquedaAsistencias) {
                  grid-column: 1 / -1;
              }
          }

          @media (max-width: 480px) {
              .container {
                  padding: 8px;
              }

              .modern-input,
              select {
                  padding: 6px 10px;
                  font-size: 0.8rem;
                  min-height: 32px;
                  height: 32px;
              }

              .form-group label {
                  font-size: 0.75rem;
                  height: 14px;
              }

              .form-row {
                  gap: 8px;
                  margin-bottom: 12px;
              }

              .custom-checkbox {
                  padding: 4px 8px;
                  max-width: 200px;
              }

              .custom-checkbox input[type="checkbox"] {
                  width: 14px;
                  height: 14px;
              }

              .custom-checkbox label {
                  font-size: 0.7rem;
              }

              .btn-primary,
              .btn-secondary {
                  padding: 6px 12px;
                  font-size: 0.75rem;
                  min-height: 32px;
              }

              .welcome-container {
                  padding: 30px 16px;
              }

              .welcome-title {
                  font-size: 1.6rem;
                  letter-spacing: 0px;
                  margin-bottom: 16px;
              }

              .company-name {
                  font-size: 1.2rem;
              }

              .company-location {
                  font-size: 0.8rem;
              }

              .welcome-subtitle {
                  font-size: 0.9rem;
                  margin-bottom: 16px;
              }

              .modern-card {
                  padding: 12px 8px;
              }

              .card-title {
                  font-size: 1rem;
                  margin-bottom: 10px;
              }

              .tab-responsive {
                  font-size: 0.65rem;
                  padding: 6px 2px;
                  min-height: 35px;
              }

              .tab-responsive .tab-counter {
                  font-size: 0.55rem;
                  padding: 1px 2px;
              }

              .patente-tag {
                  font-size: 0.65rem;
                  padding: 2px 6px;
              }

              .add-patente-btn {
                  padding: 4px 8px;
                  font-size: 0.7rem;
              }

              .acompañante-item {
                  padding: 8px;
              }

              .acompañante-numero {
                  font-size: 0.65rem;
                  padding: 2px 6px;
              }

              .btn-remove-acompañante {
                  padding: 2px 4px;
                  font-size: 0.6rem;
              }

              .acompañante-item .modern-input {
                  min-height: 28px;
                  height: 28px;
                  font-size: 0.75rem;
              }

              #fechaDesdeAsistencias,
              #fechaHastaAsistencias {
                  min-width: 100px;
                  font-size: 0.75rem;
              }
          }


       </style>
     </head>
                <body>
                <!-- Loading Panel -->
                <div id="loadingPanel" class="loading-panel">
                   <div class="loading-container">
                        <div class="loading-logo">
                            <div class="loading-ring"></div>
                            <div class="loading-ring"></div>
                            <div class="loading-ring"></div>
                        </div>
                          <h2 class="loading-text">Inicializando Sistema</h2>
                          <p class="loading-subtitle">Cargando módulos de seguridad...</p>
                   </div>
                </div>

                <div class="container">
                  <!-- Welcome Panel -->
                  <div id="welcomePanel" class="welcome-panel hidden">
                      <div class="welcome-container">
                          <div class="company-branding">
                              <h1 class="company-name">DS GLOBAL SERVICIOS</h1>
                              <p class="company-location">El ROSAL</p>
                          </div>
                          <h2 class="welcome-title">AccessControl Pro</h2>
                          <p class="welcome-subtitle">Sistema Inteligente de Gestión de Accesos con IA</p>
                          <button class="neo-btn" onclick="showLogin()">
                              <span>Acceder al Sistema</span>
                          </button>
                      </div>
                  </div>

                  <!-- Login Panel -->
                  <div id="loginPanel" class="login-panel hidden">
                      <div class="login-container">
                          <div class="company-header">
                              <h3 class="company-name-small">DS GLOBAL SERVICIOS - El ROSAL</h3>
                          </div>
                        <h2 class="login-title">Autenticación</h2>
                        <form id="loginForm">
                            <div class="form-group">
                                <label for="username">ID de Usuario</label>
                                <input type="text" id="username" name="username" class="modern-input" placeholder="Ingrese su ID único" required>
                            </div>
                            <div class="form-group">
                                <label for="password">Clave de Acceso</label>
                                <input type="password" id="password" name="password" class="modern-input" placeholder="••••••••" required>
                            </div>
                            <button type="submit" class="neo-btn" style="width: 100%;">
                                <span>Iniciar Sesión Segura</span>
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Admin Panel -->
                <div id="adminPanel" class="admin-panel hidden">
                  <div class="admin-header">
                      <div>
                          <div class="company-admin-name">DS GLOBAL SERVICIOS - El ROSAL</div>
                      </div>
                    <div class="user-info">
                        <div class="user-avatar" id="userAvatar">A</div>
                        <div>
                            <div class="user-name" id="currentUser">Administrador</div>
                            <div style="font-size: 0.8rem; opacity: 0.7;">Conectado</div>
                        </div>
                        <button class="logout-btn" onclick="logout()">Desconectar</button>
                    </div>
                </div>

                <div class="tabs" id="adminTabs">
                    <button class="tab active" onclick="showTab('registrar')">📝 Registrar</button>
                    <button class="tab" onclick="showTab('buscar')">🔍 Buscar</button>
                    <button class="tab" onclick="showTab('autorizar')">✅ Autorizar</button>
                    <button class="tab" onclick="showTab('dias-especiales')">⭐ Días Especiales</button>
                    <button class="tab" onclick="showTab('feriados')">🏖️ Feriados</button>
                    <button class="tab" onclick="showTab('esperadas')">⏰ Esperadas</button>
                    <button class="tab" onclick="showTab('bloqueos')">🚫 Bloqueos</button>
                    <button class="tab" onclick="showTab('usuarios')">👥 Usuarios</button>

                </div>

                <!-- Tab: Registrar -->
                <div id="registrar" class="tab-content active">
                    <div class="modern-card">
                        <h3 class="card-title">📝 Registro de Acceso</h3>
                        <form id="registroForm">
                            <div class="form-row">
                                <div class="form-group">
                                    <div class="custom-checkbox">
                                        <input type="checkbox" id="esDocumentoExtranjero" onchange="toggleDocumentoExtranjero()">
                                        <label for="esDocumentoExtranjero">Documento Extranjero</label>
                                    </div>
                                    <label for="documento" id="documentoLabel">RUT</label>
                                    <input type="text" id="documento" name="documento" class="modern-input" placeholder="12.345.678-9" required maxlength="12">
                                    <div id="documentoMessage" style="display: none; margin-top: 5px; font-size: 0.8rem;"></div>
                                </div>
                                <div class="form-group">
                                    <label for="nombreRegistro">Nombre Completo *</label>
                                    <input type="text" id="nombreRegistro" name="nombreRegistro" class="modern-input" placeholder="Juan Carlos Pérez" required>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="empresaRegistro">Empresa/Constructora *</label>
                                    <input type="text" id="empresaRegistro" name="empresaRegistro" class="modern-input" placeholder="Nombre de la empresa" required>
                                </div>

                                <div class="form-group">
                                    <label for="subContrato">Sub Contrato</label>
                                    <input type="text" id="subContrato" name="subContrato" class="modern-input" placeholder="Nombre del subcontrato">
                                </div>
                            </div>
                            <div id="registroDelegadoGroup" style="display: none;">
                                <div class="custom-checkbox registro-delegado-checkbox">
                                    <input type="checkbox" id="esRegistroDelegado" onchange="toggleRegistroDelegado()">
                                    <label for="esRegistroDelegado">Registrar en nombre de otra empresa/subcontrato</label>
                                </div>
                                <div id="registroDelegadoInfo" class="registro-delegado-info">
                                    ℹ️ Esta persona será asignada automáticamente al registrador/sub-registrador correspondiente según la empresa y subcontrato seleccionados.
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="tipoPersona">Tipo *</label>
                                    <select id="tipoPersona" name="tipoPersona" required onchange="toggleProveedorFields()">
                                        <option value="">Seleccionar tipo...</option>
                                        <option value="trabajador">👷 Trabajador</option>
                                        <option value="proveedor">🚛 Proveedor</option>
                                        <option value="visita">👤 Visita</option>
                                    </select>
                                </div>
                                <div class="form-group" id="proveedorGroup" style="display: none;">
                                    <label for="empresaProveedora">Empresa Proveedora *</label>
                                    <input type="text" id="empresaProveedora" name="empresaProveedora" class="modern-input" placeholder="Nombre empresa proveedora">
                                </div>
                            </div>

                            <div class="form-row" id="guiaGroup" style="display: none;">
                                <div class="form-group">
                                    <label for="numeroGuia">Número de Guía *</label>
                                    <input type="text" id="numeroGuia" name="numeroGuia" class="modern-input" placeholder="Número de guía">
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="patente">Patentes</label>
                                <div style="display: flex; gap: 12px; align-items: end;">
                                    <input type="text" id="patente" name="patente" class="modern-input" placeholder="AA-BB-11" style="flex: 1;">
                                    <button type="button" class="add-patente-btn" onclick="agregarPatente()">+ Agregar</button>
                                </div>
                                <div id="patentesContainer" class="patentes-container"></div>
                                <div id="llegaPieMsg" style="color: #fbbf24; font-size: 0.8rem; margin-top: 8px; display: none;">
                                    ⚠️ Esta persona llega a pie
                                </div>
                            </div>

                            <!-- Sección de Acompañantes -->
                            <div class="form-group" id="acompañantesGroup" style="display: none;">
                                <label for="cantidadAcompañantes">Cantidad de Acompañantes en el Vehículo</label>
                                <input type="number" id="cantidadAcompañantes" name="cantidadAcompañantes"
                                       class="modern-input" placeholder="0" min="0" max="20"
                                       onchange="generarCamposAcompañantes()">
                                <div id="acompañantesContainer" class="acompañantes-section" style="display: none;">
                                    <h4 style="color: var(--text-light); margin-bottom: 16px;">Datos de Acompañantes:</h4>
                                    <div id="acompañantesList"></div>
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn-primary">Registrar</button>
                                <button type="button" class="btn-secondary" onclick="limpiarRegistro()">Limpiar Formulario</button>
                            </div>
                        </form>
                    </div>

                    <!-- Registros del día -->
                    <div class="modern-card">
                        <h3 class="card-title">📋 Registros de Hoy</h3>
                        <div id="registrosHoy" class="users-grid">
                            <!-- Las tarjetas de registros se generarán aquí -->
                        </div>
                    </div>
                </div>

                <!-- Tab: Buscar -->
                <div id="buscar" class="tab-content">
                    <div class="modern-card">
                        <h3 class="card-title">🔍 Búsqueda Avanzada</h3>

                        <!-- Barra de búsqueda principal -->
                        <div class="form-row">
                            <div class="form-group" style="flex: 2;">
                                <label for="campoBusqueda">Buscar</label>
                                <input type="text" id="campoBusqueda" class="modern-input"
                                       placeholder="RUT, Nombre, Patente, Empresa, Subcontrato, etc..."
                                       onkeyup="realizarBusqueda()">
                            </div>
                            <div class="form-group" style="flex: 1;">
                                <label>&nbsp;</label>
                                <div style="display: flex; gap: 12px;">
                                    <!--<button type="button" class="btn-primary" onclick="realizarBusqueda()">🔍 Buscar</button>-->
                                    <button type="button" class="btn-secondary" onclick="limpiarBusqueda()">🗑️ Limpiar</button>
                                </div>
                            </div>
                        </div>

                        <!-- Filtros de fecha -->
                        <div class="form-row">
                            <div class="form-group">
                                <label for="filtroFecha">Período</label>
                                <select id="filtroFecha" onchange="cambiarFiltroFecha()">
                                    <option value="todos">Todos los registros</option>
                                    <option value="hoy">Hoy</option>
                                    <option value="semana">Esta semana</option>
                                    <option value="mes">Este mes</option>
                                    <option value="personalizado">Rango personalizado</option>
                                </select>
                            </div>
                            <div class="form-group" id="fechaDesdeGroup" style="display: none;">
                                <label for="fechaDesde">Desde</label>
                                <input type="date" id="fechaDesde" class="modern-input" onchange="realizarBusqueda()">
                            </div>
                            <div class="form-group" id="fechaHastaGroup" style="display: none;">
                                <label for="fechaHasta">Hasta</label>
                                <input type="date" id="fechaHasta" class="modern-input" onchange="realizarBusqueda()">
                            </div>
                        </div>

                        <!-- Filtros adicionales -->
                        <div class="form-row">
                            <div class="form-group">
                                <label for="filtroTipo">Tipo</label>
                                <select id="filtroTipo" onchange="realizarBusqueda()">
                                    <option value="">Todos los tipos</option>
                                    <option value="trabajador">Trabajador (Registro)</option>
                                    <option value="asistencia_trabajador">Asistencia Trabajador</option>
                                    <option value="proveedor">Proveedor</option>
                                    <option value="visita">Visita</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="filtroActivo">Estado Activo</label>
                                <select id="filtroActivo" onchange="realizarBusqueda()">
                                    <option value="">Todos</option>
                                    <option value="true">Activos</option>
                                    <option value="false">Inactivos</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <div style="display: flex; gap: 12px;">
                                    <button type="button" class="btn-secondary" onclick="mostrarTodosLosRegistros()">📋 Mostrar Todos</button>
                                </div>
                            </div>
                        </div>

                        <!-- Filtros adicionales -->
                        <div class="form-row">
                            <div class="form-group">
                                <label for="filtroEstado">Estado</label>
                                <select id="filtroEstado" onchange="realizarBusqueda()">
                                    <option value="">Todos los estados</option>
                                    <option value="pendiente">Pendiente</option>
                                    <option value="autorizado">Autorizado</option>
                                    <option value="rechazado">Rechazado</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="filtroTipo">Tipo</label>
                                <select id="filtroTipo" onchange="realizarBusqueda()">
                                    <option value="">Todos los tipos</option>
                                    <option value="trabajador">Trabajador</option>
                                    <option value="asistencia_trabajador">Asistencia</option>
                                    <option value="proveedor">Proveedor</option>
                                    <option value="visita">Visita</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="filtroActivo">Activo</label>
                                <select id="filtroActivo" onchange="realizarBusqueda()">
                                    <option value="">Todos</option>
                                    <option value="true">Activos</option>
                                    <option value="false">Inactivos</option>
                                </select>
                            </div>
                        </div>

                        <!-- Contador de resultados -->
                        <div id="contadorResultados" class="selection-info" style="margin-bottom: 20px; display: none;">
                            Se encontraron <span id="numeroResultados">0</span> registros
                        </div>
                    </div>

                    <!-- Resultados de búsqueda -->
                    <div class="modern-card">
                        <h3 class="card-title">📋 Resultados de Búsqueda</h3>
                        <div id="resultadosBusqueda" class="users-grid">
                            <p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">
                                Utilice el buscador para encontrar registros o presione "Mostrar Todos"
                            </p>
                        </div>
                    </div>
                </div>

                <!-- Tab: Autorizar -->
                <div id="autorizar" class="tab-content">
                    <div class="modern-card">
                        <h3 class="card-title">✅ Pendientes de Autorización</h3>

                        <!-- Controles de selección avanzada -->
                        <div class="advanced-selection-controls" id="advancedSelectionControls" style="display: none;">
                            <h4 style="color: var(--text-light); margin-bottom: 16px; font-size: 1rem;">🎯 Selección Avanzada</h4>

                            <div class="selection-tabs">
                                <button class="selection-tab active" onclick="showSelectionTab('individual')">Individual</button>
                                <button class="selection-tab" onclick="showSelectionTab('empresa')">Por Empresa</button>
                                <button class="selection-tab" onclick="showSelectionTab('subcontrato')">Por Subcontrato</button>
                                <button class="selection-tab" onclick="showSelectionTab('todos')">Selección Masiva</button>
                            </div>

                            <!-- Selección Individual -->
                            <div id="selectionIndividual" class="selection-content active">
                                <p style="color: rgba(255,255,255,0.7); font-size: 0.9rem; margin-bottom: 12px;">
                                    Seleccione registros individualmente haciendo clic en los checkboxes de cada tarjeta.
                                </p>
                                <div style="display: flex; gap: 12px;">
                                    <button class="btn-group btn-group-select" onclick="clearAllSelections()">Limpiar Selección</button>
                                </div>
                            </div>

                            <!-- Selección por Empresa -->
                            <div id="selectionEmpresa" class="selection-content">
                                <p style="color: rgba(255,255,255,0.7); font-size: 0.9rem; margin-bottom: 12px;">
                                    Seleccione todos los registros de empresas específicas:
                                </p>
                                <div id="empresasFilter" class="filter-grid">
                                    <!-- Se genera dinámicamente -->
                                </div>
                                <div style="display: flex; gap: 12px; margin-top: 12px;">
                                    <button class="btn-group btn-group-select" onclick="selectAllEmpresas()">Seleccionar Todas las Empresas</button>
                                    <button class="btn-group btn-group-select" onclick="clearEmpresasSelection()">Limpiar Empresas</button>
                                </div>
                            </div>

                            <!-- Selección por Subcontrato -->
                            <div id="selectionSubcontrato" class="selection-content">
                                <p style="color: rgba(255,255,255,0.7); font-size: 0.9rem; margin-bottom: 12px;">
                                    Seleccione todos los registros de subcontratos específicos:
                                </p>
                                <div id="subcontratosFilter" class="filter-grid">
                                    <!-- Se genera dinámicamente -->
                                </div>
                                <div style="display: flex; gap: 12px; margin-top: 12px;">
                                    <button class="btn-group btn-group-select" onclick="selectAllSubcontratos()">Seleccionar Todos los Subcontratos</button>
                                    <button class="btn-group btn-group-select" onclick="clearSubcontratosSelection()">Limpiar Subcontratos</button>
                                </div>
                            </div>

                            <!-- Selección Masiva -->
                            <div id="selectionTodos" class="selection-content">
                                <p style="color: rgba(255,255,255,0.7); font-size: 0.9rem; margin-bottom: 12px;">
                                    Seleccione todos los registros pendientes de una vez:
                                </p>
                                <div style="display: flex; gap: 12px;">
                                    <button class="btn-group btn-group-select" onclick="selectAllPending()">Seleccionar Todos</button>
                                    <button class="btn-group btn-group-select" onclick="clearAllSelections()">Limpiar Selección</button>
                                </div>
                            </div>
                        </div>

                        <!-- Controles de selección y acciones grupales -->
                        <div class="selection-controls" id="selectionControls" style="display: none;">
                            <div class="selection-info">
                                <span id="selectedCount">0</span> registros seleccionados
                                <span class="selected-count" id="selectedBadge" style="display: none;">0</span>
                            </div>
                            <div class="group-actions">
                                <button class="btn-group btn-group-select" onclick="selectAllPending()">Seleccionar Todos</button>
                                <button class="btn-group btn-group-select" onclick="clearAllSelections()">Limpiar Selección</button>
                                <button class="btn-group btn-group-authorize" onclick="authorizeSelected()" id="authorizeGroupBtn" disabled>
                                    ✅ Autorizar Seleccionados
                                </button>
                                <button class="btn-group btn-group-reject" onclick="rejectSelected()" id="rejectGroupBtn" disabled>
                                    ❌ Rechazar Seleccionados
                                </button>
                            </div>
                        </div>

                        <div id="registrosPendientes" class="users-grid">
                            <!-- Las tarjetas de registros pendientes se generarán aquí -->
                        </div>
                    </div>
                </div>

                <!-- Tab: Días Especiales -->
                <div id="dias-especiales" class="tab-content">
                    <div class="modern-card">
                        <h3 class="card-title">⭐ Registro de Días Especiales</h3>

                        <!-- Buscador de persona/empresa/subcontrato -->
                        <div class="form-group">
                            <label for="buscarPersonaDiasEspeciales">Buscar Persona, Empresa o Subcontrato</label>
                            <input type="text" id="buscarPersonaDiasEspeciales" class="modern-input"
                                   placeholder="RUT, Nombre, Empresa, Subcontrato..."
                                   onkeyup="buscarPersonaDiasEspeciales()"
                                   autocomplete="off">
                            <div id="resultadosBusquedaDias" class="busqueda-resultados" style="display: none;"></div>
                        </div>

                        <!-- Persona seleccionada -->
                        <div id="personaSeleccionadaDias" style="display: none;">
                            <div class="persona-seleccionada">
                                <h4>Persona/Registro Seleccionado:</h4>
                                <p id="nombreSeleccionado"></p>
                                <p id="documentoSeleccionado"></p>
                                <p id="empresaSeleccionada"></p>
                                <p id="subcontratoSeleccionado"></p>
                                <button type="button" class="btn-cambiar-seleccion" onclick="cambiarSeleccionDias()">Cambiar Selección</button>
                            </div>
                        </div>

                        <form id="diasEspecialesForm">

                            <!-- Tipos de días especiales -->
                            <div class="form-group">
                                <label>Tipos de Días Especiales *</label>

                                <!-- SÁBADOS -->
                                <div class="tipo-dia-section">
                                    <div class="tipo-dia-item">
                                        <input type="checkbox" id="tipoSabado" onchange="toggleTipoDia('sabado')">
                                        <label for="tipoSabado">🗓️ Sábados</label>
                                    </div>

                                    <!-- Opciones para Sábados - INMEDIATAMENTE DEBAJO -->
                                    <div id="opcionesSabado" class="fecha-options" style="display: none;">
                                        <div class="fecha-option">
                                            <input type="radio" id="sabadoMultiples" name="sabadoTipo" value="multiples" onchange="toggleFechasSabado('multiples')">
                                            <label for="sabadoMultiples">Seleccionar múltiples sábados</label>
                                        </div>
                                        <div class="fecha-option">
                                            <input type="radio" id="sabadoFecha" name="sabadoTipo" value="fecha" onchange="toggleFechasSabado('fecha')">
                                            <label for="sabadoFecha">Fecha específica</label>
                                        </div>
                                        <div id="sabadoMultiplesContainer" class="multiple-dates-container" style="display: none;">
                                            <input type="date" id="sabadoFechaInput" class="modern-input" style="width: auto; margin-right: 8px;">
                                            <button type="button" class="add-patente-btn" onclick="agregarFechaSabado()">+ Agregar Sábado</button>
                                            <div id="sabadosFechas" class="multiple-dates-container" style="margin-top: 12px;"></div>
                                        </div>
                                        <div id="sabadoFechaContainer" class="single-date-container" style="display: none;">
                                            <input type="date" id="sabadoFechaEspecifica" class="modern-input">
                                        </div>
                                    </div>
                                </div>

                                <!-- DOMINGOS -->
                                <div class="tipo-dia-section">
                                    <div class="tipo-dia-item">
                                        <input type="checkbox" id="tipoDomingo" onchange="toggleTipoDia('domingo')">
                                        <label for="tipoDomingo">📅 Domingos</label>
                                    </div>

                                    <!-- Opciones para Domingos - INMEDIATAMENTE DEBAJO -->
                                    <div id="opcionesDomingo" class="fecha-options" style="display: none;">
                                        <div class="fecha-option">
                                            <input type="radio" id="domingoMultiples" name="domingoTipo" value="multiples" onchange="toggleFechasDomingo('multiples')">
                                            <label for="domingoMultiples">Seleccionar múltiples domingos</label>
                                        </div>
                                        <div class="fecha-option">
                                            <input type="radio" id="domingoFecha" name="domingoTipo" value="fecha" onchange="toggleFechasDomingo('fecha')">
                                            <label for="domingoFecha">Fecha específica</label>
                                        </div>
                                        <div id="domingoMultiplesContainer" class="multiple-dates-container" style="display: none;">
                                            <input type="date" id="domingoFechaInput" class="modern-input" style="width: auto; margin-right: 8px;">
                                            <button type="button" class="add-patente-btn" onclick="agregarFechaDomingo()">+ Agregar Domingo</button>
                                            <div id="domingosFechas" class="multiple-dates-container" style="margin-top: 12px;"></div>
                                        </div>
                                        <div id="domingoFechaContainer" class="single-date-container" style="display: none;">
                                            <input type="date" id="domingoFechaEspecifica" class="modern-input">
                                        </div>
                                    </div>
                                </div>

                                <!-- FERIADOS -->
                                <div class="tipo-dia-section">
                                    <div class="tipo-dia-item">
                                        <input type="checkbox" id="tipoFeriado" onchange="toggleTipoDia('feriado')">
                                        <label for="tipoFeriado">🏖️ Feriados</label>
                                    </div>

                                    <!-- Opciones para Feriados - INMEDIATAMENTE DEBAJO -->
                                    <div id="opcionesFeriado" class="fecha-options" style="display: none;">
                                        <div id="feriadosSelector" class="feriados-selector">
                                            <!-- Los feriados se cargarán dinámicamente aquí -->
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Motivo -->
                            <div class="form-group">
                                <label for="motivoDiasEspeciales">Motivo *</label>
                                <textarea id="motivoDiasEspeciales" name="motivoDiasEspeciales" class="modern-input"
                                          placeholder="Describa el motivo para solicitar días especiales"
                                          rows="3" required></textarea>
                            </div>

                            <div class="form-actions">
                                <button type="button" class="btn-secondary" onclick="limpiarDiasEspeciales()">Limpiar Formulario</button>
                                <button type="submit" class="btn-primary">Registrar Días Especiales</button>
                            </div>
                        </form>
                    </div>

                    <!-- Días especiales registrados en formato de tarjetas -->
                    <div class="modern-card">
                        <h3 class="card-title">📋 Días Especiales Registrados</h3>

                        <!-- Buscador -->
                        <div class="form-row">
                            <div class="form-group" style="flex: 2;">
                                <label for="buscarDiasEspeciales">Buscar</label>
                                <input type="text" id="buscarDiasEspeciales" class="modern-input"
                                       placeholder="RUT, Nombre, Empresa, Motivo..."
                                       onkeyup="buscarDiasEspeciales()">
                            </div>
                            <div class="form-group">
                                <label for="filtroEstadoDias">Estado</label>
                                <select id="filtroEstadoDias" onchange="buscarDiasEspeciales()">
                                    <option value="">Todos</option>
                                    <option value="pendiente">Pendiente</option>
                                    <option value="autorizado">Autorizado</option>
                                    <option value="rechazado">Rechazado</option>
                                </select>
                            </div>
                        </div>

                        <!-- Tarjetas de días especiales -->
                        <div id="diasEspecialesContainer" class="users-grid">
                            <!-- Las tarjetas se generarán dinámicamente aquí -->
                        </div>
                    </div>
                </div>

                <!-- Tab: Feriados -->
                <div id="feriados" class="tab-content">
                    <div class="modern-card">
                        <h3 class="card-title">🏖️ Gestión de Feriados</h3>

                        <!-- Generar feriados automáticamente -->
                        <div class="form-row">
                            <div class="form-group">
                                <label for="añoFeriados">Año</label>
                                <select id="añoFeriados">
                                    <option value="2024">2024</option>
                                    <option value="2025" selected>2025</option>
                                    <option value="2026">2026</option>
                                    <option value="2027">2027</option>
                                    <option value="2028">2028</option>
                                    <option value="2029">2029</option>
                                    <option value="2030">2030</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <button type="button" class="btn-primary" onclick="generarFeriadosChile()">
                                    Generar Feriados de Chile
                                </button>
                            </div>
                        </div>

                        <!-- Agregar feriado personalizado -->
                        <form id="feriadoForm">
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="fechaFeriado">Fecha</label>
                                    <input type="date" id="fechaFeriado" name="fechaFeriado" class="modern-input" required>
                                </div>
                                <div class="form-group">
                                    <label for="nombreFeriado">Nombre del Feriado</label>
                                    <input type="text" id="nombreFeriado" name="nombreFeriado" class="modern-input" placeholder="Día especial personalizado" required>
                                </div>
                            </div>
                            <div class="form-actions">
                                <button type="button" class="btn-secondary" onclick="limpiarFeriado()">Limpiar</button>
                                <button type="submit" class="btn-primary">Agregar Feriado</button>
                            </div>
                        </form>
                    </div>

                    <!-- Lista de feriados -->
                    <div class="modern-card">
                        <h3 class="card-title">📅 Feriados Registrados</h3>
                        <div id="listaFeriados">
                            <!-- Los feriados se mostrarán aquí -->
                        </div>
                    </div>
                </div>

                <!-- Tab: Esperadas -->
                <div id="esperadas" class="tab-content">
                    <div class="modern-card">
                        <h3 class="card-title">⏰ Registro de Personas Esperadas</h3>
                        <form id="esperadaForm">
                            <div class="form-row">
                                <div class="form-group">
                                    <div class="custom-checkbox">
                                      <input type="checkbox" id="esDocumentoExtranjeroEsperada" onchange="toggleDocumentoExtranjeroEsperada()">
                                      <label for="esDocumentoExtranjeroEsperada">Documento Extranjero</label>
                                  </div>
                                  <label for="documentoEsperada" id="documentoEsperadaLabel">RUT</label>
                                  <input type="text" id="documentoEsperada" name="documentoEsperada" class="modern-input" placeholder="12.345.678-9" required maxlength="12">
                                  <div id="documentoEsperadaMessage" style="display: none; margin-top: 5px; font-size: 0.8rem;"></div>
                              </div>
                              <div class="form-group">
                                  <label for="nombreEsperada">Nombre Completo *</label>
                                  <input type="text" id="nombreEsperada" name="nombreEsperada" class="modern-input" placeholder="Juan Carlos Pérez" required>
                              </div>
                          </div>

                          <div class="form-row">
                              <div class="form-group">
                                  <label for="fechaEspera">Fecha de Espera *</label>
                                  <input type="date" id="fechaEspera" name="fechaEspera" class="modern-input" required>
                              </div>
                              <div class="form-group">
                                  <label for="quienEspera">Quien Espera *</label>
                                  <input type="text" id="quienEspera" name="quienEspera" class="modern-input" placeholder="Nombre de quien espera" required>
                              </div>
                          </div>

                          <div class="form-actions">
                              <button type="button" class="btn-secondary" onclick="limpiarEsperada()">Limpiar Formulario</button>
                              <button type="submit" class="btn-primary">Registrar Esperada</button>
                          </div>
                      </form>
                  </div>

                  <!-- Personas Esperadas -->
                  <div class="modern-card">
                      <h3 class="card-title">📋 Personas Esperadas</h3>
                      <div id="personasEsperadas" class="users-grid">
                          <!-- Las tarjetas de personas esperadas se generarán aquí -->
                      </div>
                  </div>
              </div>

              <!-- Tab: Bloqueos -->
              <div id="bloqueos" class="tab-content">
                  <div class="modern-card">
                      <h3 class="card-title">🚫 Sistema de Bloqueos</h3>

                      <!-- Toggle para tipo de bloqueo -->
                      <div class="tipo-bloqueo-toggle">
                          <button type="button" class="toggle-option active" id="togglePersona" onclick="cambiarTipoBloqueo('persona')">
                              👤 Personas
                          </button>
                          <button type="button" class="toggle-option" id="toggleVehiculo" onclick="cambiarTipoBloqueo('vehiculo')">
                              🚗 Vehículos
                          </button>
                      </div>

                      <form id="bloqueoForm">
                          <!-- Campos para persona -->
                          <div id="camposPersona">
                              <div class="form-row">
                                  <div class="form-group">
                                      <div class="custom-checkbox">
                                          <input type="checkbox" id="esDocumentoExtranjeroBloqueo" onchange="toggleDocumentoExtranjeroBloqueo()">
                                          <label for="esDocumentoExtranjeroBloqueo">Documento Extranjero</label>
                                      </div>
                                      <label for="documentoBloqueo" id="documentoBloqueoLabel">RUT</label>
                                      <input type="text" id="documentoBloqueo" name="documentoBloqueo" class="modern-input" placeholder="12.345.678-9" required maxlength="12">
                                  </div>
                                  <div class="form-group">
                                      <label for="nombreBloqueo">Nombre Completo *</label>
                                      <input type="text" id="nombreBloqueo" name="nombreBloqueo" class="modern-input" placeholder="Juan Carlos Pérez" required>
                                  </div>
                              </div>
                          </div>

                          <!-- Campos para vehículo -->
                          <div id="camposVehiculo" style="display: none;">
                              <div class="form-row">
                                  <div class="form-group">
                                      <label for="patenteBloqueo">Patente *</label>
                                      <input type="text" id="patenteBloqueo" name="patenteBloqueo" class="modern-input" placeholder="AA-BB-11" required>
                                  </div>
                              </div>
                          </div>

                          <!-- Campos comunes -->
                          <div class="form-row">
                              <div class="form-group">
                                  <label for="motivoBloqueo">Motivo *</label>
                                  <select id="motivoBloqueo" name="motivoBloqueo" required>
                                      <option value="">Seleccionar motivo...</option>
                                      <option value="incidente_seguridad">Incidente de Seguridad</option>
                                      <option value="documentacion_pendiente">Documentación Pendiente</option>
                                      <option value="sancion_disciplinaria">Sanción Disciplinaria</option>
                                      <option value="revision_administrativa">Revisión Administrativa</option>
                                      <option value="solicitud_empresa">Solicitud de Empresa</option>
                                      <option value="otro">Otro</option>
                                  </select>
                              </div>
                              <div class="form-group" id="otroMotivoGroup" style="display: none;">
                                  <label for="otroMotivo">Especificar Motivo</label>
                                  <input type="text" id="otroMotivo" name="otroMotivo" class="modern-input" placeholder="Especifique el motivo">
                              </div>
                          </div>

                          <div class="indefinido-checkbox">
                              <input type="checkbox" id="bloqueoIndefinido" onchange="toggleFechasBloqueo()">
                              <label for="bloqueoIndefinido">Bloqueo Indefinido</label>
                          </div>

                          <div class="form-row" id="fechasBloqueoGroup">
                              <div class="form-group">
                                  <label for="fechaDesdeBloqueo">Fecha Desde *</label>
                                  <input type="date" id="fechaDesdeBloqueo" name="fechaDesdeBloqueo" class="modern-input" required>
                              </div>
                              <div class="form-group">
                                  <label for="fechaHastaBloqueo">Fecha Hasta *</label>
                                  <input type="date" id="fechaHastaBloqueo" name="fechaHastaBloqueo" class="modern-input" required>
                              </div>
                          </div>

                          <div class="form-actions">
                              <button type="button" class="btn-secondary" onclick="limpiarBloqueo()">Limpiar Formulario</button>
                              <button type="submit" class="btn-primary">Registrar Bloqueo</button>
                          </div>
                      </form>
                  </div>

                  <!-- Buscador de bloqueos -->
                  <div class="modern-card">
                      <h3 class="card-title">🔍 Buscar Bloqueos</h3>
                      <div class="form-row">
                          <div class="form-group" style="flex: 2;">
                              <label for="buscarBloqueo">Buscar</label>
                              <input type="text" id="buscarBloqueo" class="modern-input"
                                     placeholder="RUT, Nombre, Patente, Motivo..."
                                     onkeyup="buscarBloqueos()">
                          </div>
                          <div class="form-group">
                              <label for="filtroEstadoBloqueo">Estado</label>
                              <select id="filtroEstadoBloqueo" onchange="buscarBloqueos()">
                                  <option value="">Todos</option>
                                  <option value="activo">Activos</option>
                                  <option value="inactivo">Inactivos</option>
                              </select>
                          </div>
                      </div>
                  </div>

                  <!-- Lista de bloqueos -->
                  <div class="modern-card">
                      <h3 class="card-title">📋 Bloqueos Registrados</h3>
                      <div id="listaBloqueos" class="users-grid">
                          <!-- Las tarjetas de bloqueos se generarán aquí -->
                      </div>
                  </div>
              </div>

              <!-- Tab: Asistencias -->
              <div id="asistencias" class="tab-content">
                  <div class="modern-card">
                      <h3 class="card-title">📊 Control de Asistencias y Visitas</h3>

                      <!-- Búsqueda avanzada para asistencias -->
                      <div class="form-row">
                          <div class="form-group" style="flex: 2;">
                              <label for="busquedaAsistencias">Buscar</label>
                              <input type="text" id="busquedaAsistencias" class="modern-input"
                                     placeholder="RUT, Documento, Nombre, Empresa, Subcontrato..."
                                     onkeyup="buscarAsistencias()">
                          </div>
                          <div class="form-group">
                              <label for="filtroTipoAsistencia">Tipo</label>
                              <select id="filtroTipoAsistencia" onchange="buscarAsistencias()">
                                  <option value="">Todos los tipos</option>
                                  <option value="asistencia_trabajador">Asistencias Trabajadores</option>
                                  <option value="proveedor">Proveedores</option>
                                  <option value="visita">Visitas</option>
                              </select>
                          </div>
                      </div>

                      <!-- Filtros de fecha específicos -->
                      <div class="form-row">
                          <div class="form-group">
                              <label for="fechaDesdeAsistencias">Fecha Desde</label>
                              <input type="date" id="fechaDesdeAsistencias" class="modern-input" onchange="buscarAsistencias()">
                          </div>
                          <div class="form-group">
                              <label for="fechaHastaAsistencias">Fecha Hasta</label>
                              <input type="date" id="fechaHastaAsistencias" class="modern-input" onchange="buscarAsistencias()">
                          </div>
                          <div class="form-group">
                              <label>&nbsp;</label>
                              <div style="display: flex; gap: 12px;">
                                  <button type="button" class="btn-primary" onclick="buscarAsistencias()">🔍 Buscar</button>
                                  <button type="button" class="btn-secondary" onclick="limpiarBusquedaAsistencias()">🗑️ Limpiar</button>
                                  <button type="button" class="btn-secondary" onclick="cargarTodasAsistencias()">📋 Mostrar Todas</button>
                              </div>
                          </div>
                      </div>

                      <!-- Contador de resultados -->
                      <div id="contadorAsistencias" class="selection-info" style="margin-bottom: 20px; display: none;">
                          Se encontraron <span id="numeroAsistencias">0</span> registros
                      </div>
                  </div>

                  <!-- Resultados de asistencias -->
                  <div class="modern-card">
                      <h3 class="card-title">📋 Resultados</h3>
                      <div id="resultadosAsistencias" class="users-grid">
                          <p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">
                              Utilice los filtros para buscar asistencias y visitas
                          </p>
                      </div>
                  </div>
              </div>

              <!-- Tab: Usuarios -->
              <div id="usuarios" class="tab-content">
                  <div class="modern-card">
                      <h3 class="card-title">👥 Gestión de Usuarios del Sistema</h3>
                      <form id="usuarioForm">
                          <div class="form-row">
                              <div class="form-group">
                                  <label for="rutUsuario">RUT</label>
                                  <div style="position: relative;">
                                      <input type="text" id="rutUsuario" name="rutUsuario" class="modern-input" placeholder="12.345.678-9" required maxlength="12">
                                      <span id="rutValidationIcon" class="validation-icon" style="display: none;"></span>
                                  </div>
                                  <div id="rutMessage" class="rut-message" style="display: none;"></div>
                              </div>
                              <div class="form-group">
                                  <label for="nombreUsuario">Nombre Completo</label>
                                  <input type="text" id="nombreUsuario" name="nombreUsuario" class="modern-input" placeholder="Juan Carlos Pérez" required>
                              </div>
                          </div>
                          <div class="form-row">
                              <div class="form-group">
                                  <label for="empresaUsuario">Empresa</label>
                                  <input type="text" id="empresaUsuario" name="empresaUsuario" class="modern-input" placeholder="Nombre de la empresa" required>
                              </div>
                              <div class="form-group">
                                  <label for="tipoRol">Tipo de Rol</label>
                                  <select id="tipoRol" name="tipoRol" required onchange="updatePermissions()">
                                      <option value="">Seleccionar rol...</option>
                                      <option value="administrador">👑 Administrador</option>
                                      <option value="autorizador">✅ Autorizador</option>
                                      <option value="registrador">📝 Registrador</option>
                                      <option value="sub-registrador">📋 Sub Registrador</option>
                                      <option value="guardia">🛡️ Guardia</option>
                                      <option value="usuario">👤 Usuario</option>
                                  </select>
                              </div>
                          </div>
                          <div class="form-row">
                              <div class="form-group">
                                  <label for="usuarioLogin">Usuario</label>
                                  <input type="text" id="usuarioLogin" name="usuarioLogin" class="modern-input" placeholder="nombre_usuario" required>
                              </div>
                              <div class="form-group">
                                  <label for="passwordUsuario">Contraseña</label>
                                  <div style="position: relative;">
                                      <input type="password" id="passwordUsuario" name="passwordUsuario" class="modern-input" placeholder="Mínimo 8 caracteres" required style="padding-right: 50px;">
                                      <button type="button" id="togglePassword" title="Mostrar contraseña">👁️</button>
                                  </div>
                              </div>
                          </div>

                          <div class="form-group" id="supervisorGroup" style="display: none;">
                              <label for="supervisorUsuario">Supervisor (Solo para Sub Registradores)</label>
                              <select id="supervisorUsuario" name="supervisorUsuario">
                                  <option value="">Seleccionar supervisor...</option>
                              </select>
                          </div>

                          <div class="form-group" id="subcontratoGroup" style="display: none;">
                              <label for="subcontratoUsuario">Subcontrato</label>
                              <input type="text" id="subcontratoUsuario" name="subcontratoUsuario" class="modern-input" placeholder="Nombre del subcontrato">
                          </div>

                          <div class="form-group">
                              <label>Permisos de Acceso</label>
                              <div class="permissions-grid">
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-registrar" name="permisos" value="registrar">
                                      <label for="perm-registrar">📝 Registrar</label>
                                  </div>
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-buscar" name="permisos" value="buscar">
                                      <label for="perm-buscar">🔍 Buscar</label>
                                  </div>
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-autorizar" name="permisos" value="autorizar">
                                      <label for="perm-autorizar">✅ Autorizar</label>
                                  </div>
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-dias-especiales" name="permisos" value="dias-especiales">
                                      <label for="perm-dias-especiales">⭐ Días Especiales</label>
                                  </div>
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-feriados" name="permisos" value="feriados">
                                      <label for="perm-feriados">🏖️ Feriados</label>
                                  </div>
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-esperadas" name="permisos" value="esperadas">
                                      <label for="perm-esperadas">⏰ Esperadas</label>
                                  </div>
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-bloqueos" name="permisos" value="bloqueos">
                                      <label for="perm-bloqueos">🚫 Bloqueos</label>
                                  </div>
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-solicitudes" name="permisos" value="solicitudes">
                                      <label for="perm-solicitudes">📋 Solicitudes</label>
                                  </div>
                                  <div class="permission-item">
                                      <input type="checkbox" id="perm-usuarios" name="permisos" value="usuarios">
                                      <label for="perm-usuarios">👥 Usuarios</label>
                                  </div>
                              </div>
                          </div>

                          <div class="form-actions">
                              <button type="button" class="btn-secondary" onclick="limpiarUsuario()">Limpiar Usuario</button>
                              <button type="submit" class="btn-primary" id="submitBtn">Crear Usuario</button>
                          </div>
                      </form>
                  </div>

                  <!-- Usuarios Registrados -->
                  <div class="modern-card">
                      <h3 class="card-title">🗂️ Usuarios Registrados</h3>
                      <div class="users-grid" id="usersGrid">
                          <!-- Las tarjetas de usuarios se generarán dinámicamente aquí -->
                      </div>
                  </div>
              </div>

              <!-- Tab: Mis Registros (Registrador) -->
              <div id="mis-registros" class="tab-content">
                  <div class="modern-card">
                      <h3 class="card-title">📋 Mis Registros Asignados</h3>
                      <p style="color: var(--text-light); margin-bottom: 20px;">
                          Personas registradas por mí y asignadas por el administrador
                      </p>

                      <!-- Filtros -->
                      <div class="form-row">
                          <div class="form-group" style="flex: 2;">
                              <label for="buscarMisRegistros">Buscar</label>
                              <input type="text" id="buscarMisRegistros" class="modern-input"
                                     placeholder="RUT, Nombre, Empresa..."
                                     onkeyup="buscarMisRegistros()">
                          </div>
                          <div class="form-group">
                              <label for="filtroTipoMisRegistros">Tipo</label>
                              <select id="filtroTipoMisRegistros" onchange="buscarMisRegistros()">
                                  <option value="">Todos</option>
                                  <option value="trabajador">Trabajadores</option>
                                  <option value="asistencia_trabajador">Asistencias</option>
                              </select>
                          </div>
                          <div class="form-group">
                              <label for="filtroEstadoMisRegistros">Estado</label>
                              <select id="filtroEstadoMisRegistros" onchange="buscarMisRegistros()">
                                  <option value="">Todos</option>
                                  <option value="autorizado">Autorizados</option>
                                  <option value="pendiente">Pendientes</option>
                                  <option value="rechazado">Rechazados</option>
                              </select>
                          </div>
                      </div>

                      <!-- Contador de resultados -->
                      <div id="contadorMisRegistros" class="selection-info" style="margin-bottom: 20px; display: none;">
                          Se encontraron <span id="numeroMisRegistros">0</span> registros
                      </div>
                  </div>

                  <!-- Resultados -->
                  <div class="modern-card">
                      <h3 class="card-title">👥 Personas Asignadas</h3>
                      <div id="resultadosMisRegistros" class="users-grid">
                          <p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">
                              Cargando registros asignados...
                          </p>
                      </div>
                  </div>
              </div>

              <!-- Tab: Mis Subcontratos (Sub-Registrador) -->
              <div id="mis-subcontratos" class="tab-content">
                  <div class="modern-card">
                      <h3 class="card-title">🔧 Mis Subcontratos Asignados</h3>
                      <p style="color: var(--text-light); margin-bottom: 20px;">
                          Personas de subcontratos registradas por mí y asignadas por el administrador
                      </p>

                      <!-- Filtros -->
                      <div class="form-row">
                          <div class="form-group" style="flex: 2;">
                              <label for="buscarMisSubcontratos">Buscar</label>
                              <input type="text" id="buscarMisSubcontratos" class="modern-input"
                                     placeholder="RUT, Nombre, Subcontrato..."
                                     onkeyup="buscarMisSubcontratos()">
                          </div>
                          <div class="form-group">
                              <label for="filtroSubcontrato">Subcontrato</label>
                              <select id="filtroSubcontrato" onchange="buscarMisSubcontratos()">
                                  <option value="">Todos</option>
                              </select>
                          </div>
                          <div class="form-group">
                              <label for="filtroEstadoSubcontratos">Estado</label>
                              <select id="filtroEstadoSubcontratos" onchange="buscarMisSubcontratos()">
                                  <option value="">Todos</option>
                                  <option value="autorizado">Autorizados</option>
                                  <option value="pendiente">Pendientes</option>
                                  <option value="rechazado">Rechazados</option>
                              </select>
                          </div>
                      </div>

                      <!-- Contador de resultados -->
                      <div id="contadorMisSubcontratos" class="selection-info" style="margin-bottom: 20px; display: none;">
                          Se encontraron <span id="numeroMisSubcontratos">0</span> registros
                      </div>
                  </div>

                  <!-- Resultados -->
                  <div class="modern-card">
                      <h3 class="card-title">👥 Personas del Subcontrato</h3>
                      <div id="resultadosMisSubcontratos" class="users-grid">
                          <p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">
                              Cargando registros de subcontratos...
                          </p>
                      </div>
                  </div>
              </div>

              <!-- Tab: Reportes -->
              <div id="reportes" class="tab-content">
                  <div class="modern-card">
                      <h3 class="card-title">📊 Reportes y Descargas</h3>

                      <!-- Filtros de fecha -->
                      <div class="form-row">
                          <div class="form-group">
                              <label for="tipoReporte">Tipo de Reporte</label>
                              <select id="tipoReporte" onchange="cambiarTipoReporte()">
                                  <option value="">Seleccionar tipo...</option>
                                  <option value="registros">Registros de Trabajadores</option>
                                  <option value="asistencias">Asistencias de Trabajadores</option>
                                  <option value="proveedores-visitas">Proveedores y Visitas</option>
                                  <option value="dias-especiales">Días Especiales</option>
                                  <option value="esperadas">Personas Esperadas</option>
                                  <option value="bloqueos">Bloqueos</option>
                                  <option value="solicitudes">Solicitudes</option>
                                  <option value="usuarios">Usuarios del Sistema</option>
                              </select>
                          </div>
                          <div class="form-group">
                              <label for="filtroFechaReporte">Período</label>
                              <select id="filtroFechaReporte" onchange="cambiarFiltroFechaReporte()">
                                  <option value="hoy">Solo Hoy</option>
                                  <option value="semana">Esta Semana</option>
                                  <option value="mes">Este Mes</option>
                                  <option value="personalizado">Período Personalizado</option>
                                  <option value="todos">Todos los Registros</option>
                              </select>
                          </div>
                      </div>

                      <!-- Fechas personalizadas -->
                      <div id="fechasPersonalizadasReporte" class="form-row" style="display: none;">
                          <div class="form-group">
                              <label for="fechaDesdeReporte">Desde</label>
                              <input type="date" id="fechaDesdeReporte" class="modern-input">
                          </div>
                          <div class="form-group">
                              <label for="fechaHastaReporte">Hasta</label>
                              <input type="date" id="fechaHastaReporte" class="modern-input">
                          </div>
                      </div>

                      <!-- Filtros adicionales -->
                      <div id="filtrosAdicionales" style="display: none;">
                          <div class="form-row">
                              <div class="form-group">
                                  <label for="filtroEstadoReporte">Estado</label>
                                  <select id="filtroEstadoReporte">
                                      <option value="">Todos</option>
                                      <option value="pendiente">Pendiente</option>
                                      <option value="autorizado">Autorizado</option>
                                      <option value="rechazado">Rechazado</option>
                                      <option value="activo">Activo</option>
                                      <option value="inactivo">Inactivo</option>
                                  </select>
                              </div>
                              <div class="form-group">
                                  <label for="filtroEmpresaReporte">Empresa</label>
                                  <input type="text" id="filtroEmpresaReporte" class="modern-input" placeholder="Filtrar por empresa...">
                              </div>
                          </div>
                      </div>

                      <!-- Botones de acción -->
                      <div class="form-actions">
                          <button type="button" class="btn-secondary" onclick="previsualizarReporte()">👁️ Previsualizar</button>
                          <button type="button" class="btn-primary" onclick="descargarReportePDF()">📥 Descargar PDF</button>
                      </div>
                  </div>

                  <!-- Previsualización -->
                  <div id="previsualizacionReporte" class="modern-card" style="display: none;">
                      <h3 class="card-title">👁️ Previsualización del Reporte</h3>
                      <div id="contadorRegistrosReporte" style="margin-bottom: 15px; padding: 10px; background: rgba(102, 126, 234, 0.1); border-radius: 8px;">
                          <strong>Total de registros: <span id="totalRegistrosReporte">0</span></strong>
                      </div>
                      <div id="contenidoReporte" style="max-height: 400px; overflow-y: auto;">
                          <!-- Contenido del reporte -->
                      </div>
                  </div>
              </div>

              <!-- Tab: Solicitudes -->
              <div id="solicitudes" class="tab-content">
                  <div class="modern-card">
                      <h3 class="card-title">📋 Solicitudes Pendientes</h3>
                      <div id="solicitudesPendientes" class="users-grid">
                          <!-- Las solicitudes se generarán aquí -->
                      </div>
                  </div>
              </div>

              </div>
          </div>
          </div>

          <script type="module">
            import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
            import { getFirestore, collection, addDoc, getDocs, doc, updateDoc, deleteDoc, getDoc, query, where, orderBy } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';

            // Configuración de Firebase
            const firebaseConfig = {
              apiKey: "AIzaSyD0EA7PUcrgEvKS8pwQk67gA1lx9Cw5mAc",
              authDomain: "controlapp-9d6e9.firebaseapp.com",
              projectId: "controlapp-9d6e9",
              storageBucket: "controlapp-9d6e9.firebasestorage.app",
              messagingSenderId: "802050577175",
              appId: "1:802050577175:web:10635f7a3b95206bbadd52"
            };

            // Inicializar Firebase
            const app = initializeApp(firebaseConfig);
            const db = getFirestore(app);

            // Variables globales
            let currentUser = null;
            let userRole = null;
            let usuarios = [];
            let registros = [];
            let editandoUsuario = null;
            let editandoRegistro = null;
            let patentesActuales = [];
            let currentUserData = null;
            let selectedRegistros = new Set();
            let registrosBusqueda = [];
            let registrosOriginales = [];
            let esperadas = [];
            let bloqueos = [];
            let feriados = [];
            let editandoEsperada = null;
            let editandoBloqueo = null;
            let tipoBloqueoActual = 'persona';
            let diasEspeciales = [];
            let personaSeleccionadaDias = null;
            let fechasSabado = [];
            let fechasDomingo = [];
            let feriadosSeleccionados = [];
            let editandoDiaEspecial = null;
            let trabajadoresConPatentes = {}; // Almacenar patentes por trabajador
            let registrosProveedoresVisitas = {}; // Almacenar por fecha
            // Variables para paginación
            let registrosPaginados = [];
            let paginaActual = 0;
            const registrosPorPagina = 10;
            let totalRegistrosFiltrados = 0;
            let solicitudesDesactivacion = [];
            let acompañantesActuales = [];



            // Configuración inicial de usuarios (solo admin)
            const users = {
                'admin': {
                    password: 'admin123',
                    role: 'administrador',
                    name: 'Administrador Principal',
                    permissions: ['registrar', 'buscar', 'autorizar', 'dias-especiales', 'feriados', 'esperadas', 'bloqueos', 'solicitudes', 'usuarios'],
                    avatar: 'A'
                }
            };

            // Funciones de Firebase para usuarios
            async function cargarUsuarios() {
                try {
                    const querySnapshot = await getDocs(collection(db, 'usuarios'));
                    usuarios = [];
                    querySnapshot.forEach((docSnapshot) => {
                        usuarios.push({
                            id: docSnapshot.id,
                            ...docSnapshot.data()
                        });
                    });
                    renderUsers();
                } catch (error) {
                    console.error('Error cargando usuarios:', error);
                    showNotification('Error al cargar usuarios', 'error');
                }
            }

            async function guardarUsuario(usuario) {
                try {
                    const docRef = await addDoc(collection(db, 'usuarios'), usuario);
                    return docRef.id;
                } catch (error) {
                    console.error('Error guardando usuario:', error);
                    throw error;
                }
            }

            async function actualizarUsuario(id, datos) {
                try {
                    const docRef = doc(db, 'usuarios', id);
                    await updateDoc(docRef, datos);
                } catch (error) {
                    console.error('Error actualizando usuario:', error);
                    throw error;
                }
            }

            async function eliminarUsuarioFirebase(id) {
                try {
                    await deleteDoc(doc(db, 'usuarios', id));
                } catch (error) {
                    console.error('Error eliminando usuario:', error);
                    throw error;
                }
            }

            // Funciones de Firebase para registros
            async function cargarRegistros() {
                try {
                    const hoy = new Date().toISOString().split('T')[0];
                    const q = query(
                        collection(db, 'registros'),
                        where('fecha', '==', hoy),
                        orderBy('timestamp', 'desc')
                    );
                    const querySnapshot = await getDocs(q);
                    registros = [];
                    querySnapshot.forEach((docSnapshot) => {
                        registros.push({
                            id: docSnapshot.id,
                            ...docSnapshot.data()
                        });
                    });
                    renderRegistros();
                    renderRegistrosPendientes();
                } catch (error) {
                    console.error('Error cargando registros:', error);
                    showNotification('Error al cargar registros', 'error');
                }
            }

            // Cargar solicitudes de desactivación
            async function cargarSolicitudesDesactivacion() {
                try {
                    const querySnapshot = await getDocs(collection(db, 'solicitudes_desactivacion'));
                    solicitudesDesactivacion = [];
                    querySnapshot.forEach((docSnapshot) => {
                        solicitudesDesactivacion.push({
                            id: docSnapshot.id,
                            ...docSnapshot.data()
                        });
                    });
                } catch (error) {
                    console.error('Error cargando solicitudes:', error);
                }
            }

            async function guardarRegistro(registro) {
                try {
                    const docRef = await addDoc(collection(db, 'registros'), registro);
                    return docRef.id;
                } catch (error) {
                    console.error('Error guardando registro:', error);
                    throw error;
                }
            }

            async function actualizarRegistro(id, datos, coleccion = 'registros') {
                try {
                    const docRef = doc(db, coleccion, id);
                    await updateDoc(docRef, datos);
                } catch (error) {
                    console.error('Error actualizando registro:', error);
                    throw error;
                }
            }

            async function eliminarRegistroFirebase(id) {
                try {
                    await deleteDoc(doc(db, 'registros', id));
                } catch (error) {
                    console.error('Error eliminando registro:', error);
                    throw error;
                }
            }

            // Funciones para mostrar/ocultar paneles
            function showPanel(panelId) {
                const panels = ['loadingPanel', 'welcomePanel', 'loginPanel', 'adminPanel'];
                panels.forEach(panel => {
                    const element = document.getElementById(panel);
                    if (element) {
                        element.style.opacity = '0';
                        setTimeout(() => {
                            element.classList.add('hidden');
                        }, 300);
                    }
                });

                setTimeout(() => {
                    const targetPanel = document.getElementById(panelId);
                    if (targetPanel) {
                        targetPanel.classList.remove('hidden');
                        targetPanel.style.opacity = '0';
                        setTimeout(() => {
                            targetPanel.style.opacity = '1';
                        }, 50);
                    }
                }, 300);
            }

            // Inicialización del sistema
            function initializeSystem() {
                const loadingText = document.querySelector('.loading-text');
                const loadingSubtitle = document.querySelector('.loading-subtitle');

                const loadingMessages = [
                    'Verificando protocolos de seguridad...',
                    'Conectando con Firebase...',
                    'Sincronizando base de datos...',
                    'Sistema listo para usar'
                ];

                let messageIndex = 0;
                const messageInterval = setInterval(() => {
                    if (messageIndex < loadingMessages.length) {
                        loadingSubtitle.textContent = loadingMessages[messageIndex];
                        messageIndex++;
                    } else {
                        clearInterval(messageInterval);
                        setTimeout(() => {
                            showPanel('welcomePanel');
                            showNotification('Sistema inicializado correctamente', 'success');
                        }, 500);
                    }
                }, 800);
            }

            // Mostrar login
            function showLogin() {
                showPanel('loginPanel');
                setTimeout(() => {
                    document.getElementById('username').focus();
                }, 400);
            }

            // Login mejorado para usuarios de Firebase
            async function login(username, password) {
                // Primero verificar usuarios hardcodeados (admin)
                const hardcodedUser = users[username];
                if (hardcodedUser && hardcodedUser.password === password) {
                    currentUser = username;
                    userRole = hardcodedUser.role;
                    currentUserData = hardcodedUser;

                    document.getElementById('currentUser').textContent = hardcodedUser.name;
                    document.getElementById('userAvatar').textContent = hardcodedUser.avatar;

                    setupUserTabs(hardcodedUser.permissions);
                    showPanel('adminPanel');
                    limpiarBusquedaSilenciosa();

                    setTimeout(() => {
                        showTab('registrar');
                        cargarRegistros();
                    }, 400);

                    showNotification(`Bienvenido, ${hardcodedUser.name}`, 'success');
                    document.getElementById('loginForm').reset();
                    return true;
                }

                // Si no es un usuario hardcodeado, buscar en Firebase
                try {
                    const q = query(
                        collection(db, 'usuarios'),
                        where('usuario', '==', username),
                        where('password', '==', password),
                        where('activo', '==', true)
                    );
                    const querySnapshot = await getDocs(q);

                    if (!querySnapshot.empty) {
                        let userData = null;
                        querySnapshot.forEach((doc) => {
                            userData = { id: doc.id, ...doc.data() };
                        });

                        if (userData) {
                            currentUser = username;
                            userRole = userData.rol;
                            currentUserData = userData;

                            document.getElementById('currentUser').textContent = userData.nombre;
                            document.getElementById('userAvatar').textContent = userData.nombre.charAt(0).toUpperCase();

                            setupUserTabs(userData.permisos);
                            showPanel('adminPanel');

                            setTimeout(() => {
                                if (userData.permisos.includes('registrar')) {
                                    showTab('registrar');
                                } else if (userData.permisos.includes('autorizar')) {
                                    showTab('autorizar');
                                } else if (userData.permisos.includes('buscar')) {
                                    showTab('buscar');
                                } else {
                                    showTab(userData.permisos[0]);
                                }
                                cargarRegistros();

                                // Configurar botón inicial para registro
                                setTimeout(() => {
                                    configurarBotonInicialRegistro();
                                }, 200);
                            }, 400);
                                setTimeout(async () => {
                                try {
                                    await actualizarContadoresIniciales();
                                } catch (error) {
                                    console.warn('Error cargando contadores iniciales:', error);
                                    actualizarContadoresTabs();
                                }
                            }, 1500);
                            showNotification(`Bienvenido, ${userData.nombre}`, 'success');
                            document.getElementById('loginForm').reset();
                            return true;
                        }
                    }

                    showNotification('Credenciales incorrectas o usuario inactivo', 'error');
                    return false;
                } catch (error) {
                    console.error('Error en login:', error);
                    showNotification('Error al verificar credenciales', 'error');
                    return false;
                }
            }

            // Función setupUserTabs modificada (reemplaza la existente)
            function setupUserTabs(permissions) {
                const tabsContainer = document.getElementById('adminTabs');
                tabsContainer.innerHTML = '';

                const tabConfig = {
                    'registrar': { name: '📝 Registrar', icon: '📝' },
                    'buscar': { name: '🔍 Buscar', icon: '🔍' },
                    'autorizar': { name: '✅ Autorizar', icon: '✅' },
                    'dias-especiales': { name: '⭐ Días Especiales', icon: '⭐' },
                    'feriados': { name: '🏖️ Feriados', icon: '🏖️' },
                    'esperadas': { name: '⏰ Esperadas', icon: '⏰' },
                    'bloqueos': { name: '🚫 Bloqueos', icon: '🚫' },
                    'solicitudes': { name: '📋 Solicitudes', icon: '📋' },
                    'usuarios': { name: '👥 Usuarios', icon: '👥' }
                };

                // Para guardias, cambiar el nombre del tab registrar
                if (userRole === 'guardia' && permissions.includes('registrar')) {
                    tabConfig['registrar'].name = '🛡️ Asistencia';
                }

                // Para administrador, agregar tab especial de asistencias
                if (userRole === 'administrador') {
                    tabConfig['asistencias'] = { name: '📊 Asistencias', icon: '📊' };
                }

                // Aplicar clase CSS para layout responsive
                tabsContainer.className = 'admin-tabs-container';

                permissions.forEach((permission, index) => {
                    const config = tabConfig[permission];
                    if (config) {
                        const tabButton = document.createElement('button');
                        tabButton.className = `tab tab-responsive ${index === 0 ? 'active' : ''}`;

                        // Crear estructura interna para mejor control del contador
                        tabButton.innerHTML = `
                            <span class="tab-text">${config.name}</span>
                            <span id="counter-${permission}" class="tab-counter" style="display: none;">0</span>
                        `;

                        tabButton.setAttribute('data-tab', permission);
                        tabButton.addEventListener('click', () => showTab(permission));
                        tabsContainer.appendChild(tabButton);
                    }
                });

                // Resto del código para otros roles...
                if (userRole === 'registrador') {
                    const misRegistrosButton = document.createElement('button');
                    misRegistrosButton.className = 'tab tab-responsive';
                    misRegistrosButton.innerHTML = `
                        <span class="tab-text">🏢 Mis Empresas</span>
                        <span id="counter-mis-registros" class="tab-counter" style="display: none;">0</span>
                    `;
                    misRegistrosButton.setAttribute('data-tab', 'mis-registros');
                    misRegistrosButton.addEventListener('click', () => showTab('mis-registros'));
                    tabsContainer.appendChild(misRegistrosButton);
                }

                if (userRole === 'sub-registrador') {
                    const misSubcontratosButton = document.createElement('button');
                    misSubcontratosButton.className = 'tab tab-responsive';
                    misSubcontratosButton.innerHTML = `
                        <span class="tab-text">🔧 Mis Subcontratos</span>
                        <span id="counter-mis-subcontratos" class="tab-counter" style="display: none;">0</span>
                    `;
                    misSubcontratosButton.setAttribute('data-tab', 'mis-subcontratos');
                    misSubcontratosButton.addEventListener('click', () => showTab('mis-subcontratos'));
                    tabsContainer.appendChild(misSubcontratosButton);
                }

                if (userRole === 'administrador') {
                    const asistenciasButton = document.createElement('button');
                    asistenciasButton.className = 'tab tab-responsive';
                    asistenciasButton.innerHTML = '<span class="tab-text">📊 Asistencias</span>';
                    asistenciasButton.setAttribute('data-tab', 'asistencias');
                    asistenciasButton.addEventListener('click', () => showTab('asistencias'));
                    tabsContainer.appendChild(asistenciasButton);

                    const reportesButton = document.createElement('button');
                    reportesButton.className = 'tab tab-responsive';
                    reportesButton.innerHTML = '<span class="tab-text">📊 Reportes</span>';
                    reportesButton.setAttribute('data-tab', 'reportes');
                    reportesButton.addEventListener('click', () => showTab('reportes'));
                    tabsContainer.appendChild(reportesButton);
                }


                if (userRole === 'administrador') {
                    setTimeout(() => {
                        const registroDelegadoGroup = document.getElementById('registroDelegadoGroup');
                        if (registroDelegadoGroup) {
                            registroDelegadoGroup.style.display = 'block';
                        }
                    }, 100);
                } else {
                    setTimeout(() => {
                        const registroDelegadoGroup = document.getElementById('registroDelegadoGroup');
                        if (registroDelegadoGroup) {
                            registroDelegadoGroup.style.display = 'none';
                        }
                    }, 100);
                }

                if (userRole === 'guardia') {
                    setTimeout(() => {
                        mostrarBotonEscanerGuardia();
                    }, 200);
                } else {
                    ocultarBotonEscanerGuardia();
                }
            }


            // Función para actualizar el texto del botón de registro según el rol
            function actualizarTextoBotonRegistro() {
               const submitBtn = document.querySelector('#registroForm button[type="submit"]');
               if (!submitBtn) return;

               if (userRole === 'guardia') {
                   // Para guardias el texto se maneja en actualizarBotonGuardia
                   return;
               } else {
                   // Para otros roles, siempre "Registrar"
                   submitBtn.innerHTML = '<span>Registrar</span>';
                   submitBtn.className = 'btn-primary';
                   submitBtn.style.background = 'var(--primary-gradient)';
                   submitBtn.style.boxShadow = '0 8px 20px rgba(102, 126, 234, 0.3)';
                   submitBtn.disabled = false;
               }
            }

            // Función corregida para mostrar tabs que resetea contadores
            function showTab(tabName) {
                const tabs = document.querySelectorAll('.tab');
                tabs.forEach(tab => tab.classList.remove('active'));

                // Buscar el tab activo de forma más segura
                let activeTab = null;
                tabs.forEach(tab => {
                    if (tab.getAttribute('data-tab') === tabName ||
                        tab.textContent && tab.textContent.toLowerCase().includes(tabName.toLowerCase())) {
                        activeTab = tab;
                    }
                });

                if (activeTab) activeTab.classList.add('active');

                const tabContents = document.querySelectorAll('.tab-content');
                tabContents.forEach(content => content.classList.remove('active'));

                // NUEVO: Resetear TODOS los contadores al cambiar de tab
                resetearTodosLosContadores();

                // Limpiar búsqueda al cambiar de tab
                if (tabName !== 'buscar' && tabName !== 'asistencias') {
                    limpiarBusquedaSilenciosa();
                }

                const targetContent = document.getElementById(tabName);
                if (targetContent) {
                    targetContent.classList.add('active');

                    // Cargar datos específicos según el tab
                    if (tabName === 'usuarios') {
                        cargarUsuarios();
                        updateSupervisorOptions();
                        filtrarOpcionesRol();
                    } else if (tabName === 'registrar') {
                        cargarRegistros().then(() => {
                            // Actualizar contadores DESPUÉS de cargar datos
                            setTimeout(() => {
                                actualizarContadoresTabs();
                            }, 100);
                        });
                        setTimeout(() => {
                            actualizarTextoBotonRegistro();
                            const registroDelegadoGroup = document.getElementById('registroDelegadoGroup');
                            if (registroDelegadoGroup) {
                                if (userRole === 'administrador') {
                                    registroDelegadoGroup.style.display = 'block';
                                } else {
                                    registroDelegadoGroup.style.display = 'none';
                                }
                            }
                        }, 100);
                    } else if (tabName === 'autorizar') {
                        cargarRegistros().then(() => {
                            setTimeout(() => {
                                actualizarContadoresTabs();
                            }, 100);
                        });
                    } else if (tabName === 'buscar') {
                        cargarTodosLosRegistros();
                    } else if (tabName === 'asistencias') {
                        cargarTodasAsistencias();
                        const hoy = new Date();
                        const hace7Dias = new Date();
                        hace7Dias.setDate(hoy.getDate() - 7);
                        document.getElementById('fechaHastaAsistencias').value = hoy.toISOString().split('T')[0];
                        document.getElementById('fechaDesdeAsistencias').value = hace7Dias.toISOString().split('T')[0];
                    } else if (tabName === 'esperadas') {
                        cargarEsperadas();
                    } else if (tabName === 'bloqueos') {
                        cargarBloqueos();
                    } else if (tabName === 'feriados') {
                        cargarFeriados();
                    } else if (tabName === 'solicitudes') {
                        cargarSolicitudes();
                    } else if (tabName === 'mis-registros') {
                        cargarMisRegistros().then(() => {
                            setTimeout(() => {
                                actualizarContadorMisRegistros();
                            }, 100);
                        });
                    } else if (tabName === 'mis-subcontratos') {
                        cargarMisSubcontratos().then(() => {
                            setTimeout(() => {
                                actualizarContadorMisSubcontratos();
                            }, 100);
                        });
                    } else if (tabName === 'dias-especiales') {
                        Promise.all([
                            cargarDiasEspeciales(),
                            cargarFeriados()
                        ]).then(() => {
                            cargarTrabajadoresParaDiasEspeciales();
                            setTimeout(() => {
                                actualizarContadoresDiasEspeciales();
                            }, 100);
                        }).catch(error => {
                            console.error('Error cargando datos para días especiales:', error);
                        });
                    }
                }

                selectedRegistros.clear();
            }

            // NUEVA función para resetear todos los contadores
            function resetearTodosLosContadores() {
                const contadores = [
                    'counter-autorizar',
                    'counter-registrar',
                    'counter-dias-especiales',
                    'counter-mis-registros',
                    'counter-mis-subcontratos'
                ];

                contadores.forEach(counterId => {
                    const counter = document.getElementById(counterId);
                    if (counter) {
                        counter.style.display = 'none';
                        counter.textContent = '0';
                    }
                });
            }


            // Logout
            function logout() {
                if (confirm('¿Estás seguro de que deseas cerrar sesión?')) {
                    // Limpiar datos de búsqueda
                    limpiarBusquedaSilenciosa();

                    // NUEVO: Limpiar formulario completo
                    limpiarFormularioCompleto();

                    // NUEVO: Ocultar botón de escáner al cerrar sesión
                   ocultarBotonEscanerGuardia();

                    currentUser = null;
                    userRole = null;
                    currentUserData = null;
                    usuarios = [];
                    registros = [];
                    registrosBusqueda = [];
                    registrosOriginales = [];

                    showPanel('welcomePanel');
                    showNotification('Sesión cerrada correctamente', 'info');
                }
            }

            // Funciones para el módulo de registro
            function toggleDocumentoExtranjero() {
                const checkbox = document.getElementById('esDocumentoExtranjero');
                const documentoInput = document.getElementById('documento');
                const documentoLabel = document.getElementById('documentoLabel');
                const documentoMessage = document.getElementById('documentoMessage');

                if (checkbox.checked) {
                  documentoLabel.textContent = 'Documento Extranjero';
                  documentoInput.placeholder = 'Número de documento';
                  documentoInput.maxLength = 20;
                  documentoInput.classList.add('documento-extranjero');
                  documentoMessage.style.display = 'block';
                  documentoMessage.textContent = 'Documento extranjero registrado';
                  documentoMessage.style.color = '#ef4444';
              } else {
                  documentoLabel.textContent = 'RUT';
                  documentoInput.placeholder = '12.345.678-9';
                  documentoInput.maxLength = 12;
                  documentoInput.classList.remove('documento-extranjero');
                  documentoMessage.style.display = 'none';
              }

              // NO limpiar el campo si ya tiene valor (CORRECCIÓN PRINCIPAL)
              // Solo limpiar si el campo está vacío o si se está cambiando el tipo
              if (!documentoInput.value) {
                  documentoInput.value = '';
              }
          }

          function toggleProveedorFields() {
              const tipoPersona = document.getElementById('tipoPersona').value;
              const proveedorGroup = document.getElementById('proveedorGroup');
              const guiaGroup = document.getElementById('guiaGroup');
              const acompañantesGroup = document.getElementById('acompañantesGroup');
              const empresaProveedora = document.getElementById('empresaProveedora');
              const numeroGuia = document.getElementById('numeroGuia');

              // GUARDAR cantidad actual de acompañantes antes de hacer cambios
              const cantidadActual = document.getElementById('cantidadAcompañantes').value;

              if (tipoPersona === 'proveedor') {
                  proveedorGroup.style.display = 'block';
                  guiaGroup.style.display = 'block';
                  acompañantesGroup.style.display = 'block';
                  empresaProveedora.required = true;
                  numeroGuia.required = true;
              } else if (tipoPersona === 'visita') {
                  proveedorGroup.style.display = 'none';
                  guiaGroup.style.display = 'none';
                  acompañantesGroup.style.display = 'block';
                  empresaProveedora.required = false;
                  numeroGuia.required = false;
                  empresaProveedora.value = '';
                  numeroGuia.value = '';
              } else {
                  // Solo para trabajadores
                  proveedorGroup.style.display = 'none';
                  guiaGroup.style.display = 'none';
                  acompañantesGroup.style.display = 'none';
                  empresaProveedora.required = false;
                  numeroGuia.required = false;
                  empresaProveedora.value = '';
                  numeroGuia.value = '';

                  // Limpiar acompañantes solo para trabajadores
                  document.getElementById('cantidadAcompañantes').value = '';
                  document.getElementById('acompañantesContainer').innerHTML = '';
                  acompañantesActuales = [];
              }

              // RESTAURAR cantidad de acompañantes si era proveedor o visita
              if ((tipoPersona === 'proveedor' || tipoPersona === 'visita') && cantidadActual) {
                  setTimeout(() => {
                      document.getElementById('cantidadAcompañantes').value = cantidadActual;
                      // No regenerar campos automáticamente, mantener los existentes
                  }, 50);
              }
          }

          // Función para toggle de registro delegado
          function toggleRegistroDelegado() {
              const checkbox = document.getElementById('esRegistroDelegado');
              const info = document.getElementById('registroDelegadoInfo');

              if (checkbox.checked) {
                  info.style.display = 'block';
              } else {
                  info.style.display = 'none';
              }
          }

          // Función para buscar responsable de empresa/subcontrato - CORREGIDA COMPLETA
          async function buscarResponsableEmpresa(empresa, subcontrato) {
              try {
                  // CARGAR USUARIOS SI NO ESTÁN CARGADOS
                  if (!usuarios || usuarios.length === 0) {
                      console.log('Cargando usuarios para buscar responsable...');
                      await cargarUsuarios();
                  }

                  console.log('Usuarios disponibles para búsqueda:', usuarios);
                  console.log('Buscando responsable para empresa:', empresa, 'subcontrato:', subcontrato);

                  // Si hay subcontrato, buscar sub-registrador Y su supervisor registrador
                  if (subcontrato) {
                      const subRegistrador = usuarios.find(u =>
                          u.rol === 'sub-registrador' &&
                          u.activo === true &&
                          u.subcontrato === subcontrato
                      );

                      if (subRegistrador) {
                          console.log('Sub-registrador encontrado:', subRegistrador.nombre);
                          console.log('Supervisor del sub-registrador:', subRegistrador.supervisor);

                          return {
                              nombre: subRegistrador.nombre,
                              rol: 'sub-registrador',
                              empresa: empresa,
                              subcontrato: subcontrato,
                              supervisor: subRegistrador.supervisor || null
                          };
                      }
                  }

                  // Si no hay subcontrato O no se encontró sub-registrador, buscar registrador de la empresa
                  const registrador = usuarios.find(u =>
                      u.rol === 'registrador' &&
                      u.activo === true &&
                      u.empresa === empresa
                  );

                  if (registrador) {
                      console.log('Registrador encontrado:', registrador.nombre);
                      return {
                          nombre: registrador.nombre,
                          rol: 'registrador',
                          empresa: empresa,
                          subcontrato: subcontrato || null,
                          supervisor: null // Los registradores no tienen supervisor
                      };
                  }

                  console.log('No se encontró responsable para empresa:', empresa, 'subcontrato:', subcontrato);
                  return null;

                  // Marcar como pendiente de asignación futura
                return {
                    pendienteAsignacion: true,
                    empresa: empresa,
                    subcontrato: subcontrato || null,
                    mensaje: 'Sin registrador asignado - pendiente de asignación futura'
                };
              } catch (error) {
                  console.error('Error buscando responsable:', error);
                  return null;
              }
          }

          // Función para procesar asignaciones retroactivas
          async function procesarAsignacionesRetroactivas(nuevoUsuario) {
              if (nuevoUsuario.rol !== 'registrador' && nuevoUsuario.rol !== 'sub-registrador') {
                  return; // Solo procesar para registradores y sub-registradores
              }

              try {
                  console.log('=== PROCESANDO ASIGNACIONES RETROACTIVAS ===');
                  console.log('Nuevo usuario:', nuevoUsuario.nombre, 'Rol:', nuevoUsuario.rol);
                  console.log('Empresa:', nuevoUsuario.empresa, 'Subcontrato:', nuevoUsuario.subcontrato);

                  // Buscar registros pendientes de asignación
                  const querySnapshot = await getDocs(collection(db, 'registros'));
                  let registrosPendientes = [];

                  querySnapshot.forEach((docSnapshot) => {
                      const registro = { id: docSnapshot.id, ...docSnapshot.data() };

                      // Buscar registros que están pendientes de asignación
                      if (registro.pendienteAsignacion === true && registro.estado === 'autorizado') {
                          registrosPendientes.push(registro);
                      }
                  });

                  if (registrosPendientes.length === 0) {
                      console.log('No hay registros pendientes de asignación');
                      return;
                  }

                  console.log('Registros pendientes encontrados:', registrosPendientes.length);

                  // Filtrar registros que corresponden a este usuario
                  let registrosParaAsignar = [];

                  if (nuevoUsuario.rol === 'sub-registrador') {
                      // Sub-registrador: buscar por empresa Y subcontrato específico
                      registrosParaAsignar = registrosPendientes.filter(registro =>
                          registro.empresaSinRegistrador === nuevoUsuario.empresa &&
                          registro.subcontratoSinRegistrador === nuevoUsuario.subcontrato
                      );
                  } else if (nuevoUsuario.rol === 'registrador') {
                      // Registrador: buscar por empresa (sin subcontrato específico)
                      registrosParaAsignar = registrosPendientes.filter(registro =>
                          registro.empresaSinRegistrador === nuevoUsuario.empresa &&
                          (!registro.subcontratoSinRegistrador || registro.subcontratoSinRegistrador.trim() === '')
                      );
                  }

                  if (registrosParaAsignar.length === 0) {
                      console.log('No hay registros para asignar a este usuario');
                      return;
                  }

                  console.log('Registros para asignar:', registrosParaAsignar.length);

                  // Asignar registros retroactivamente
                  let contadorAsignados = 0;
                  const promises = [];

                  registrosParaAsignar.forEach(registro => {
                      const datosActualizacion = {
                          // Quitar flags de pendiente
                          pendienteAsignacion: false,
                          empresaSinRegistrador: null,
                          subcontratoSinRegistrador: null,

                          // Asignar al nuevo usuario
                          esRegistroDelegado: true,
                          registradoOriginalmentePor: registro.registradoPor || 'Administrador',
                          asignadoA: nuevoUsuario.nombre,
                          registradoPor: nuevoUsuario.nombre,
                          registradoPorRol: nuevoUsuario.rol,
                          supervisor: nuevoUsuario.rol === 'sub-registrador' ? nuevoUsuario.supervisor : null,

                          // Metadatos de asignación
                          fechaAsignacionRetroactiva: new Date().toISOString().split('T')[0],
                          horaAsignacionRetroactiva: new Date().toLocaleTimeString(),
                          asignacionRetroactiva: true
                      };

                      promises.push(actualizarRegistro(registro.id, datosActualizacion));
                  });

                  // Ejecutar todas las actualizaciones
                  await Promise.all(promises);
                  contadorAsignados = registrosParaAsignar.length;

                  // Actualizar arrays en memoria si están cargados
                  registrosParaAsignar.forEach(registro => {
                      // Actualizar en registros si está cargado
                      const registroIndex = registros.findIndex(r => r.id === registro.id);
                      if (registroIndex !== -1) {
                          registros[registroIndex].pendienteAsignacion = false;
                          registros[registroIndex].asignadoA = nuevoUsuario.nombre;
                          registros[registroIndex].registradoPor = nuevoUsuario.nombre;
                          registros[registroIndex].registradoPorRol = nuevoUsuario.rol;
                          registros[registroIndex].esRegistroDelegado = true;
                          registros[registroIndex].asignacionRetroactiva = true;
                      }

                      // Actualizar en registrosOriginales si está cargado
                      const registroOriginalIndex = registrosOriginales.findIndex(r => r.id === registro.id);
                      if (registroOriginalIndex !== -1) {
                          registrosOriginales[registroOriginalIndex].pendienteAsignacion = false;
                          registrosOriginales[registroOriginalIndex].asignadoA = nuevoUsuario.nombre;
                          registrosOriginales[registroOriginalIndex].registradoPor = nuevoUsuario.nombre;
                          registrosOriginales[registroOriginalIndex].registradoPorRol = nuevoUsuario.rol;
                          registrosOriginales[registroOriginalIndex].esRegistroDelegado = true;
                          registrosOriginales[registroOriginalIndex].asignacionRetroactiva = true;
                      }
                  });

                  // Mostrar notificación de éxito
                  const tipoUsuario = nuevoUsuario.rol === 'sub-registrador' ? 'Sub-Registrador' : 'Registrador';
                  showNotification(
                      `✅ Asignación automática: ${contadorAsignados} registro(s) asignado(s) al nuevo ${tipoUsuario} ${nuevoUsuario.nombre}`,
                      'success'
                  );

                  console.log('=== ASIGNACIÓN RETROACTIVA COMPLETADA ===');
                  console.log('Registros asignados:', contadorAsignados);

              } catch (error) {
                  console.error('Error en asignación retroactiva:', error);
                  showNotification('Error al procesar asignaciones automáticas', 'error');
              }
          }

          // Generar campos para acompañantes
          function generarCamposAcompañantes() {
              const cantidad = parseInt(document.getElementById('cantidadAcompañantes').value) || 0;
              const container = document.getElementById('acompañantesContainer');
              const lista = document.getElementById('acompañantesList');

              console.log('Generando campos para', cantidad, 'acompañantes'); // Debug

              if (cantidad === 0) {
                  container.style.display = 'none';
                  if (lista) lista.innerHTML = '';
                  acompañantesActuales = [];
                  return;
              }

              // ASEGURAR que el contenedor sea visible
              container.style.display = 'block';

              // CREAR la lista si no existe
              if (!lista) {
                  const nuevaLista = document.createElement('div');
                  nuevaLista.id = 'acompañantesList';
                  nuevaLista.className = 'acompañantes-list';
                  container.appendChild(nuevaLista);
              }

              const listaFinal = document.getElementById('acompañantesList');

              // GUARDAR DATOS EXISTENTES ANTES DE LIMPIAR (mejorado)
              const datosExistentes = [];
              const acompañantesItems = document.querySelectorAll('.acompañante-item');

              acompañantesItems.forEach((item, index) => {
                  const numero = index + 1;
                  const documentoInput = document.getElementById(`documentoAcomp${numero}`);
                  const nombreInput = document.getElementById(`nombreAcomp${numero}`);
                  const checkboxExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`);

                  if (documentoInput || nombreInput) {
                      datosExistentes[index] = {
                          documento: documentoInput ? documentoInput.value : '',
                          nombre: nombreInput ? nombreInput.value : '',
                          esDocumentoExtranjero: checkboxExtranjero ? checkboxExtranjero.checked : false
                      };
                  }
              });

              // LIMPIAR lista actual
              listaFinal.innerHTML = '';
              acompañantesActuales = [];

              // GENERAR campos para cada acompañante
              for (let i = 1; i <= cantidad; i++) {
                  const acompañanteDiv = document.createElement('div');
                  acompañanteDiv.className = 'acompañante-item';
                  acompañanteDiv.setAttribute('data-acompañante', i);

                  acompañanteDiv.innerHTML = `
                      <div class="acompañante-header">
                          <span class="acompañante-numero">Acompañante ${i}</span>
                          <button type="button" class="btn-remove-acompañante" onclick="eliminarAcompañante(${i})">Eliminar</button>
                      </div>
                      <div class="form-row">
                          <div class="form-group">
                              <div class="custom-checkbox">
                                  <input type="checkbox" id="esDocumentoExtranjeroAcomp${i}" onchange="toggleDocumentoExtranjeroAcompañante(${i})">
                                  <label for="esDocumentoExtranjeroAcomp${i}">Documento Extranjero</label>
                              </div>
                              <label for="documentoAcomp${i}" id="documentoAcompLabel${i}">RUT</label>
                              <input type="text" id="documentoAcomp${i}" name="documentoAcomp${i}"
                                     class="modern-input" placeholder="12.345.678-9" required maxlength="12">
                          </div>
                          <div class="form-group">
                              <label for="nombreAcomp${i}">Nombre Completo</label>
                              <input type="text" id="nombreAcomp${i}" name="nombreAcomp${i}"
                                     class="modern-input" placeholder="Nombre completo" required>
                          </div>
                      </div>
                  `;

                  listaFinal.appendChild(acompañanteDiv);

                  // AGREGAR eventos para formateo inmediatamente después de crear el campo
                  setTimeout(() => {
                      agregarEventosAcompañante(i);
                  }, 10);
              }

              // FORZAR que el contenedor sea visible después de agregar elementos
              setTimeout(() => {
                  container.style.display = 'block';

                  // RESTAURAR DATOS EXISTENTES
                  datosExistentes.forEach((datos, index) => {
                      if (datos && index < cantidad) {
                          const numero = index + 1;
                          const docInput = document.getElementById(`documentoAcomp${numero}`);
                          const nombreInput = document.getElementById(`nombreAcomp${numero}`);
                          const checkboxExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`);

                          // Configurar checkbox primero
                          if (checkboxExtranjero && datos.esDocumentoExtranjero !== undefined) {
                              checkboxExtranjero.checked = datos.esDocumentoExtranjero;
                              toggleDocumentoExtranjeroAcompañante(numero);
                          }

                          // Restaurar valores
                          if (docInput && datos.documento) {
                              docInput.value = datos.documento;
                          }

                          if (nombreInput && datos.nombre) {
                              nombreInput.value = datos.nombre;
                          }
                      }
                  });

                  console.log('Campos de acompañantes generados y visibles'); // Debug
              }, 100);
          }

         // Agregar eventos a campos de acompañante
         function agregarEventosAcompañante(numero) {
             const documentoInput = document.getElementById(`documentoAcomp${numero}`);
             const nombreInput = document.getElementById(`nombreAcomp${numero}`);

             // Formateo de RUT
             documentoInput.addEventListener('input', function(e) {
                 const esDocumentoExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`).checked;
                 if (!esDocumentoExtranjero) {
                     let rut = e.target.value;
                     let rutFormateado = formatearRUT(rut);
                     e.target.value = rutFormateado;
                 }
             });

             // Conversión a mayúsculas para nombre
             nombreInput.addEventListener('input', function(e) {
                 const cursorPos = e.target.selectionStart;
                 e.target.value = convertirAMayuscula(e.target.value);
                 e.target.setSelectionRange(cursorPos, cursorPos);
             });
         }

         // Toggle documento extranjero para acompañante
         function toggleDocumentoExtranjeroAcompañante(numero) {
             const checkbox = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`);
             const documentoInput = document.getElementById(`documentoAcomp${numero}`);
             const documentoLabel = document.getElementById(`documentoAcompLabel${numero}`);

             if (checkbox.checked) {
                 documentoLabel.textContent = 'Documento Extranjero';
                 documentoInput.placeholder = 'Número de documento';
                 documentoInput.maxLength = 20;
                 documentoInput.classList.add('documento-extranjero');
             } else {
                 documentoLabel.textContent = 'RUT';
                 documentoInput.placeholder = '12.345.678-9';
                 documentoInput.maxLength = 12;
                 documentoInput.classList.remove('documento-extranjero');
             }
             // Solo limpiar si realmente se está cambiando el tipo de documento
             const valorActual = documentoInput.value.trim();
             if (valorActual === '' || (checkbox.checked && !valorActual.includes('-')) || (!checkbox.checked && valorActual.includes('-'))) {
                 documentoInput.value = '';
             }
         }

         // Eliminar acompañante específico
         function eliminarAcompañante(numero) {
             if (confirm('¿Está seguro de que desea eliminar este acompañante?')) {
                 const acompañanteDiv = document.querySelector(`[data-acompañante="${numero}"]`);
                 if (acompañanteDiv) {
                     acompañanteDiv.remove();
                 }

                 // Actualizar contador
                 const cantidadActual = document.querySelectorAll('.acompañante-item').length;
                 document.getElementById('cantidadAcompañantes').value = cantidadActual;

                 // Si no quedan acompañantes, ocultar contenedor
                 if (cantidadActual === 0) {
                     document.getElementById('acompañantesContainer').style.display = 'none';
                 }

                 // Renumerar acompañantes
                 renumerarAcompañantes();
             }
         }

         // Renumerar acompañantes después de eliminar uno
         function renumerarAcompañantes() {
             const acompañantes = document.querySelectorAll('.acompañante-item');
             acompañantes.forEach((item, index) => {
                 const numero = index + 1;
                 item.setAttribute('data-acompañante', numero);

                 // Actualizar números en el HTML
                 const numeroSpan = item.querySelector('.acompañante-numero');
                 if (numeroSpan) numeroSpan.textContent = `Acompañante ${numero}`;

                 // Actualizar onclick del botón eliminar
                 const btnEliminar = item.querySelector('.btn-remove-acompañante');
                 if (btnEliminar) btnEliminar.setAttribute('onclick', `eliminarAcompañante(${numero})`);
             });
         }

         // Recopilar datos de acompañantes
         function recopilarDatosAcompañantes() {
             const acompañantes = [];
             const acompañantesItems = document.querySelectorAll('.acompañante-item');

             acompañantesItems.forEach((item, index) => {
                 const numero = index + 1;
                 const documento = document.getElementById(`documentoAcomp${numero}`)?.value || '';
                 const nombre = document.getElementById(`nombreAcomp${numero}`)?.value || '';
                 const esDocumentoExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`)?.checked || false;

                 if (documento && nombre) {
                     acompañantes.push({
                         documento: documento,
                         nombre: nombre,
                         esDocumentoExtranjero: esDocumentoExtranjero
                     });
                 }
             });

             return acompañantes;
         }

          function agregarPatente() {
              const patenteInput = document.getElementById('patente');
              const patente = patenteInput.value.trim().toUpperCase();

              if (!patente) {
                  showNotification('Ingrese una patente válida', 'error');
                  return;
              }

              if (patentesActuales.includes(patente)) {
                  showNotification('Esta patente ya fue agregada', 'error');
                  return;
              }

              patentesActuales.push(patente);
              patenteInput.value = '';
              renderPatentes();
              updateLlegaPieMessage();
          }

          function eliminarPatente(patente) {
              patentesActuales = patentesActuales.filter(p => p !== patente);
              renderPatentes();
              updateLlegaPieMessage();
          }

          function renderPatentes() {
              const container = document.getElementById('patentesContainer');
              container.innerHTML = '';

              patentesActuales.forEach(patente => {
                  const patenteTag = document.createElement('div');
                  patenteTag.className = 'patente-tag';
                  patenteTag.innerHTML = `
                      ${patente}
                      <button type="button" class="patente-remove" onclick="window.eliminarPatente('${patente}')">×</button>
                  `;
                  container.appendChild(patenteTag);
              });
          }

          function updateLlegaPieMessage() {
              const llegaPieMsg = document.getElementById('llegaPieMsg');
              if (patentesActuales.length === 0) {
                  llegaPieMsg.style.display = 'block';
              } else {
                  llegaPieMsg.style.display = 'none';
              }
          }

          function limpiarRegistro() {
              document.getElementById('registroForm').reset();
              patentesActuales = [];
              renderPatentes();
              updateLlegaPieMessage();
              toggleProveedorFields();

              // Limpiar acompañantes
              document.getElementById('acompañantesContainer').innerHTML = '';
              document.getElementById('cantidadAcompañantes').value = '';
              document.getElementById('acompañantesGroup').style.display = 'none';
              acompañantesActuales = [];

              toggleDocumentoExtranjero();
              editandoRegistro = null;

              // LIMPIAR MARCAS DE EDICIÓN ESPECIAL
              window.editandoDesdeAsistencias = false;
              window.tipoOriginalRegistro = null; // LIMPIAR TIPO ORIGINAL

              // Limpiar registro delegado
              const registroDelegadoCheckbox = document.getElementById('esRegistroDelegado');
              const registroDelegadoInfo = document.getElementById('registroDelegadoInfo');
              if (registroDelegadoCheckbox) {
                  registroDelegadoCheckbox.checked = false;
              }
              if (registroDelegadoInfo) {
                  registroDelegadoInfo.style.display = 'none';
              }

              // Limpiar alertas
              cerrarAlertaPersonaEsperada();
              cerrarAlertaBloqueoDocumento();
              cerrarAlertaBloqueoPatente();
              cerrarAlertaPersonaDesvinculada();

              // Resetear botón según el rol
              setTimeout(() => {
                  const submitBtn = document.querySelector('#registroForm button[type="submit"]');
                  if (submitBtn) {
                      if (userRole === 'guardia') {
                          actualizarBotonGuardia(null);
                      } else {
                          submitBtn.innerHTML = '<span>Registrar</span>';
                          submitBtn.className = 'btn-primary';
                          submitBtn.style.background = 'var(--primary-gradient)';
                          submitBtn.style.boxShadow = '0 8px 20px rgba(102, 126, 234, 0.3)';
                          submitBtn.disabled = false;
                      }
                  }
                  configurarBotonInicialRegistro();
              }, 100);

              showNotification('Formulario limpiado', 'info');
          }

          // Renderizar registros del día
          function renderRegistros() {
              const registrosContainer = document.getElementById('registrosHoy');
              registrosContainer.innerHTML = '';

              const hoy = new Date().toISOString().split('T')[0];
              let registrosHoy;
              if (userRole === 'administrador' || userRole === 'guardia') {
                  // Admin y guardias solo ven registros del día actual
                  registrosHoy = registros.filter(r => r.fecha === hoy);
              } else {
                  // Registradores y sub-registradores ven todos sus registros pendientes + los del día
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  registrosHoy = registros.filter(r =>
                      r.fecha === hoy || // Registros del día actual
                      (r.estado === 'pendiente' && r.registradoPor === userName) || // Sus registros pendientes
                      (r.estado === 'pendiente_supervisor' && (r.registradoPor === userName || r.supervisor === userName)) // Registros que deben supervisar
                  );
              }

              // NUEVO: Para administrador, EXCLUIR asistencias del tab principal
             if (userRole === 'administrador') {
                 registrosHoy = registrosHoy.filter(r => r.tipo !== 'asistencia_trabajador');
             }

              // Filtrar registros según el rol del usuario
              if (userRole === 'registrador') {
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  registrosHoy = registrosHoy.filter(r =>
                      r.registradoPor === userName ||
                      (r.registradoPorRol === 'sub-registrador' && r.supervisor === userName && r.estado === 'pendiente_supervisor')
                  );
              } else if (userRole === 'sub-registrador') {
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  registrosHoy = registrosHoy.filter(r => r.registradoPor === userName);
              } else if (userRole === 'autorizador') {
                  registrosHoy = registrosHoy.filter(r =>
                      r.estado === 'pendiente' && (r.registradoPorRol === 'registrador' || r.enviadoPorRegistrador === true)
                  );
              } else if (userRole === 'guardia') {
                  // Los guardias ven TODOS sus registros del día: asistencias, proveedores y visitas
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  registrosHoy = registrosHoy.filter(r => r.registradoPor === userName);
              }

              if (registrosHoy.length === 0) {
                  registrosContainer.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No hay registros del día de hoy</p>';
                  return;
              }

              // Mostrar controles de selección para registradores con registros de sub-registradores
              if (userRole === 'registrador') {
                  const registrosSubReg = registrosHoy.filter(r =>
                      r.registradoPorRol === 'sub-registrador' && r.estado === 'pendiente_supervisor'
                  );

                  // NUEVO: También incluir registros delegados por admin que están asignados a este registrador
                  const registrosDelegados = registrosHoy.filter(r =>
                      r.esRegistroDelegado &&
                      r.estado === 'pendiente_supervisor' &&
                      r.supervisor === (currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario')
                  );

                  const totalPendientes = registrosSubReg.length + registrosDelegados.length;
                  if (totalPendientes > 0) {
                      mostrarControlesEnvioRegistrador(totalPendientes);
                  }
              }

              registrosHoy.forEach(registro => {
                  // LÓGICA CORREGIDA para identificar registros pendientes de supervisor
                  const esPendienteSupervisor = (userRole === 'registrador' &&
                      registro.estado === 'pendiente_supervisor' &&
                      (
                          (registro.registradoPorRol === 'sub-registrador') ||
                          (registro.esRegistroDelegado && registro.supervisor === (currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario'))
                      )
                  );

                  const registroCard = createRegistroCard(registro, false, esPendienteSupervisor);
                  registrosContainer.appendChild(registroCard);
              });

              // Mostrar panel de asistencia solo para guardias
              if (userRole === 'guardia') {
                  mostrarPanelAsistenciaGuardia();
              } else {
                  const panelExistente = document.getElementById('panelAsistenciaGuardia');
                  if (panelExistente) {
                      panelExistente.remove();
                      actualizarContadoresTabs();

                  }
              }
          }

          // Función para cargar datos automáticamente (CORREGIDA con verificaciones)
          async function cargarDatosAutomaticos(campo, valor) {
              if (!valor || valor.length < 3) return;

              try {
                  // Buscar en TODOS los registros (activos E inactivos)
                  const q = query(collection(db, 'registros'));
                  const querySnapshot = await getDocs(q);

                  let registroEncontrado = null;

                  querySnapshot.forEach((docSnapshot) => {
                      const registro = docSnapshot.data();

                      if (campo === 'documento' && registro.documento === valor) {
                          registroEncontrado = registro;
                      } else if (campo === 'nombre' && registro.nombre.toLowerCase().includes(valor.toLowerCase())) {
                          registroEncontrado = registro;
                      }
                  });

                  if (registroEncontrado) {
                      // Llenar TODOS los campos independientemente del estado
                      if (campo === 'nombre') {
                          document.getElementById('documento').value = registroEncontrado.documento;
                      } else if (campo === 'documento') {
                          document.getElementById('nombreRegistro').value = registroEncontrado.nombre;
                      }

                      document.getElementById('empresaRegistro').value = registroEncontrado.empresa;
                      document.getElementById('subContrato').value = registroEncontrado.subContrato || '';
                      document.getElementById('tipoPersona').value = registroEncontrado.tipo;

                      document.getElementById('esDocumentoExtranjero').checked = registroEncontrado.esDocumentoExtranjero || false;
                      toggleDocumentoExtranjero();

                      if (registroEncontrado.tipo === 'proveedor') {
                          document.getElementById('empresaProveedora').value = registroEncontrado.empresaProveedora || '';
                          document.getElementById('numeroGuia').value = registroEncontrado.numeroGuia || '';
                      }
                      // CORRECCIÓN: No sobrescribir acompañantes si ya están configurados
                      const tipoPersonaActual = document.getElementById('tipoPersona').value;
                      const cantidadAcompañantesActual = document.getElementById('cantidadAcompañantes').value;

                      toggleProveedorFields();

                      // Si había acompañantes configurados, restaurarlos
                      if ((tipoPersonaActual === 'proveedor' || tipoPersonaActual === 'visita') && cantidadAcompañantesActual) {
                          setTimeout(() => {
                              document.getElementById('cantidadAcompañantes').value = cantidadAcompañantesActual;
                              generarCamposAcompañantes();
                          }, 100);
                      }

                      patentesActuales = registroEncontrado.patentes || [];
                      renderPatentes();
                      updateLlegaPieMessage();

                      // VERIFICAR ESTADO PARA GUARDIAS
                      if (userRole === 'guardia') {
                          const hoy = new Date().toISOString().split('T')[0];

                          // Verificar si está desvinculado o inactivo
                          if (registroEncontrado.estado === 'desvinculado' || registroEncontrado.activo === false) {
                              const submitBtn = document.querySelector('#registroForm button[type="submit"]');
                              if (submitBtn) {
                                  submitBtn.innerHTML = '<span>🚫 PERSONA DESVINCULADA - Contactar Supervisor</span>';
                                  submitBtn.className = 'btn-secondary';
                                  submitBtn.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)';
                                  submitBtn.style.boxShadow = '0 8px 20px rgba(239, 68, 68, 0.3)';
                                  submitBtn.disabled = true;
                              }

                              mostrarAlertaPersonaDesvinculada(registroEncontrado);
                              showNotification('⚠️ PERSONA DESVINCULADA - No puede ingresar', 'error');
                              return;
                          }

                          // Si está activo, continuar con verificaciones normales
                          const personaEsperada = await verificarPersonaEsperada(registroEncontrado.documento, hoy);
                          if (personaEsperada) {
                              mostrarAlertaPersonaEsperada(personaEsperada);
                          }

                          const bloqueosDocumento = await verificarBloqueosPorDocumento(registroEncontrado.documento);
                          if (bloqueosDocumento.length > 0) {
                              mostrarAlertaBloqueoDocumento(bloqueosDocumento);
                          }

                          if (patentesActuales.length > 0) {
                              for (const patente of patentesActuales) {
                                  const bloqueosPatente = await verificarBloqueosPorPatente(patente);
                                  if (bloqueosPatente.length > 0) {
                                      mostrarAlertaBloqueoPatente(bloqueosPatente, patente);
                                      break;
                                  }
                              }
                          }

                          actualizarBotonGuardia(registroEncontrado.tipo);

                          const submitBtn = document.querySelector('#registroForm button[type="submit"]');
                          if (registroEncontrado.tipo === 'trabajador') {
                              submitBtn.disabled = false;
                          } else {
                              submitBtn.disabled = false;
                          }
                      }

                      showNotification(`Datos cargados automáticamente para ${registroEncontrado.nombre}`, 'info');
                  } else {
                      // Si no encuentra nada y es guardia
                      if (userRole === 'guardia') {
                          const tipoPersona = document.getElementById('tipoPersona').value;
                          const nombre = document.getElementById('nombreRegistro').value.trim();
                          const documento = document.getElementById('documento').value.trim();

                          if (tipoPersona === 'trabajador' && (nombre.length >= 3 || documento.length >= 8)) {
                              const submitBtn = document.querySelector('#registroForm button[type="submit"]');
                              if (submitBtn) {
                                  submitBtn.innerHTML = '<span>🚫 TRABAJADOR NO AUTORIZADO - Contactar Supervisor</span>';
                                  submitBtn.className = 'btn-secondary';
                                  submitBtn.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100())';
                                  submitBtn.style.boxShadow = '0 8px 20px rgba(239, 68, 68, 0.3)';
                                  submitBtn.disabled = true;
                              }

                              mostrarAlertaTrabajadorNoAutorizado();
                              showNotification('⚠️ TRABAJADOR NO AUTORIZADO - No puede ingresar', 'error');
                          } else if (tipoPersona === 'proveedor' || tipoPersona === 'visita') {
                              actualizarBotonGuardia(tipoPersona);
                          } else {
                              actualizarBotonGuardia(null);
                          }
                      }
                  }
              } catch (error) {
                  console.error('Error cargando datos:', error);
              }
          }




         // Función específica para preparar formulario de asistencia
         function prepararFormularioAsistencia() {
             if (userRole !== 'guardia') return;

             const tipoPersona = document.getElementById('tipoPersona').value;
             if (tipoPersona === 'trabajador') {
                 // Para asistencia de trabajadores, limpiar patentes
                 // pero mantener los otros datos
                 patentesActuales = [];
                 renderPatentes();
                 updateLlegaPieMessage();

                 showNotification('Formulario preparado para marcar asistencia (sin patentes)', 'info');
             }
         }

          // Renderizar registros pendientes de autorización
          function renderRegistrosPendientes() {
              const pendientesContainer = document.getElementById('registrosPendientes');
              const selectionControls = document.getElementById('selectionControls');

              if (!pendientesContainer) return;

              pendientesContainer.innerHTML = '';

              let registrosPendientes = registros.filter(r => r.estado === 'pendiente');

              // Filtrar según el rol
              if (userRole === 'autorizador') {
                  // Solo ven registros enviados por registradores/sub-registradores
                  registrosPendientes = registrosPendientes.filter(r =>
                      r.registradoPorRol === 'registrador' ||
                      r.registradoPorRol === 'sub-registrador'
                  );
              } else if (userRole === 'registrador' || userRole === 'sub-registrador') {
                  // No pueden ver el tab autorizar
                  if (selectionControls) selectionControls.style.display = 'none';
                  pendientesContainer.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No tienes permisos para ver esta sección</p>';
                  return;
              }
              // Administradores ven todos los registros pendientes

              if (registrosPendientes.length === 0) {
                  pendientesContainer.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No hay registros pendientes de autorización</p>';
                  if (selectionControls) selectionControls.style.display = 'none';
                  return;
              }

              // Mostrar controles de selección si hay registros pendientes y el usuario puede autorizar
              if (selectionControls && (userRole === 'administrador' || userRole === 'autorizador')) {
                  selectionControls.style.display = 'flex';
                  updateSelectionControls();
                  actualizarControlesSeleccionAvanzada();
              }

              registrosPendientes.forEach(registro => {
                  const registroCard = createRegistroCard(registro, true);
                  pendientesContainer.appendChild(registroCard);
                  actualizarContadoresTabs();
              });
          }

          // FUNCIÓN CORREGIDA - actualizarContadoresTabs
          function actualizarContadoresTabs() {
              const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

              // ===== CONTADOR AUTORIZAR =====
              if (userRole === 'administrador' || userRole === 'autorizador') {
                  // Contar pendientes de autorización
                  let pendientesAutorizar = registros.filter(r => r.estado === 'pendiente');

                  if (userRole === 'autorizador') {
                      pendientesAutorizar = pendientesAutorizar.filter(r =>
                          r.registradoPorRol === 'registrador' ||
                          r.registradoPorRol === 'sub-registrador'
                      );
                  }

                  const counterAutorizar = document.getElementById('counter-autorizar');
                  if (counterAutorizar) {
                      if (pendientesAutorizar.length > 0) {
                          counterAutorizar.textContent = pendientesAutorizar.length;
                          counterAutorizar.style.display = 'inline';
                      } else {
                          counterAutorizar.style.display = 'none';
                      }
                  }
              }

              // ===== CONTADOR REGISTRAR (para registradores) =====
              if (userRole === 'registrador') {
                  // Contar registros de sub-registradores pendientes de envío
                  const pendientesEnvio = registros.filter(r =>
                      r.estado === 'pendiente_supervisor' &&
                      (
                          (r.registradoPorRol === 'sub-registrador' && r.supervisor === userName) ||
                          (r.esRegistroDelegado && r.supervisor === userName)
                      )
                  );

                  const counterRegistrar = document.getElementById('counter-registrar');
                  if (counterRegistrar) {
                      if (pendientesEnvio.length > 0) {
                          counterRegistrar.textContent = pendientesEnvio.length;
                          counterRegistrar.style.display = 'inline';
                      } else {
                          counterRegistrar.style.display = 'none';
                      }
                  }
              }

              // ===== CONTADOR REGISTRAR (para sub-registradores) =====
              if (userRole === 'sub-registrador') {
                  // Contar sus propios registros pendientes de envío
                  const pendientesEnvio = registros.filter(r =>
                      r.estado === 'pendiente_supervisor' && r.registradoPor === userName
                  );

                  const counterRegistrar = document.getElementById('counter-registrar');
                  if (counterRegistrar) {
                      if (pendientesEnvio.length > 0) {
                          counterRegistrar.textContent = pendientesEnvio.length;
                          counterRegistrar.style.display = 'inline';
                      } else {
                          counterRegistrar.style.display = 'none';
                      }
                  }
              }

              // ===== CONTADOR DÍAS ESPECIALES =====
              if (userRole === 'registrador') {
                  // Solo si diasEspeciales está cargado
                  if (diasEspeciales && diasEspeciales.length > 0) {
                      const pendientesEnvioDias = diasEspeciales.filter(d =>
                          d.estado === 'pendiente_supervisor' && d.supervisor === userName
                      );

                      const counterDiasEspeciales = document.getElementById('counter-dias-especiales');
                      if (counterDiasEspeciales) {
                          if (pendientesEnvioDias.length > 0) {
                              counterDiasEspeciales.textContent = pendientesEnvioDias.length;
                              counterDiasEspeciales.style.display = 'inline';
                          } else {
                              counterDiasEspeciales.style.display = 'none';
                          }
                      }
                  }
              }

              if (userRole === 'autorizador' || userRole === 'administrador') {
                  // Solo si diasEspeciales está cargado
                  if (diasEspeciales && diasEspeciales.length > 0) {
                      let pendientesAutorizarDias = diasEspeciales.filter(d => d.estado === 'pendiente');

                      const counterDiasEspeciales = document.getElementById('counter-dias-especiales');
                      if (counterDiasEspeciales) {
                          if (pendientesAutorizarDias.length > 0) {
                              counterDiasEspeciales.textContent = pendientesAutorizarDias.length;
                              counterDiasEspeciales.style.display = 'inline';
                          } else {
                              counterDiasEspeciales.style.display = 'none';
                          }
                      }
                  }
              }

              // ===== CONTADOR MIS REGISTROS =====
              if (userRole === 'registrador') {
                  const counter = document.getElementById('counter-mis-registros');
                  if (counter) {
                      if (misRegistrosOriginales && misRegistrosOriginales.length > 0) {
                          counter.textContent = misRegistrosOriginales.length;
                          counter.style.display = 'inline';
                      } else {
                          counter.style.display = 'none';
                      }
                  }
              }

              // ===== CONTADOR MIS SUBCONTRATOS =====
              if (userRole === 'sub-registrador') {
                  const counter = document.getElementById('counter-mis-subcontratos');
                  if (counter) {
                      if (misSubcontratosOriginales && misSubcontratosOriginales.length > 0) {
                          counter.textContent = misSubcontratosOriginales.length;
                          counter.style.display = 'inline';
                      } else {
                          counter.style.display = 'none';
                      }
                  }
              }
          }


          // NUEVA FUNCIÓN - actualizarContadoresIniciales
          async function actualizarContadoresIniciales() {
              const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

              try {
                  if (userRole === 'registrador' || userRole === 'sub-registrador' || userRole === 'autorizador' || userRole === 'administrador') {

                      if (userRole !== 'guardia') {
                          try {
                              if (!diasEspeciales || diasEspeciales.length === 0) {
                                  await cargarDiasEspeciales();
                              }
                          } catch (diasError) {
                              console.warn('No se pudieron cargar días especiales:', diasError);
                              diasEspeciales = [];
                          }
                      }

                      if (userRole === 'registrador') {
                          try {
                              if (!misRegistrosOriginales || misRegistrosOriginales.length === 0) {
                                  await cargarMisRegistros();
                              }
                          } catch (misRegError) {
                              console.warn('No se pudieron cargar mis registros:', misRegError);
                              misRegistrosOriginales = [];
                          }
                      }

                      if (userRole === 'sub-registrador') {
                          try {
                              if (!misSubcontratosOriginales || misSubcontratosOriginales.length === 0) {
                                  await cargarMisSubcontratos();
                              }
                          } catch (misSubError) {
                              console.warn('No se pudieron cargar mis subcontratos:', misSubError);
                              misSubcontratosOriginales = [];
                          }
                      }

                      actualizarContadoresTabs();
                  }
              } catch (error) {
                  console.error('Error general en contadores iniciales:', error);
                  try {
                      actualizarContadoresTabs();
                  } catch (counterError) {
                      console.error('Error actualizando contadores:', counterError);
                  }
              }
          }

          // Crear tarjeta de registro
          function createRegistroCard(registro, esPendiente = false, esPendienteSupervisor = false) {
              const card = document.createElement('div');
              card.className = 'registro-card';
              card.setAttribute('data-registro-id', registro.id);

              const initials = registro.nombre.split(' ').map(n => n[0]).join('').substring(0, 2);

              const roleBadges = {
                  'administrador': 'admin',
                  'autorizador': 'aut',
                  'registrador': 'reg',
                  'sub-registrador': 'subreg',
                  'guardia': 'guard'
              };

              // Mostrar badge especial para asistencia y diferenciar tipos
              let tipoDisplay;
              if (registro.tipo === 'asistencia_trabajador') {
                  tipoDisplay = 'ASISTENCIA';
              } else if (registro.tipo === 'trabajador') {
                  tipoDisplay = 'TRABAJADOR (REG)';
              } else {
                  tipoDisplay = registro.tipo.toUpperCase();
              }

              // Determinar el badge del rol con la nueva lógica
              let roleBadge = roleBadges[registro.registradoPorRol] || 'user';
              let badgeText = roleBadge.toUpperCase();

              // NUEVA LÓGICA PARA REGISTROS DELEGADOS (PRIORIDAD MÁXIMA)
              if (registro.esRegistroDelegado) {
                  badgeText = 'ADMIN→' + badgeText; // Marca de agua de admin
                  roleBadge = 'admin-delegado'; // Nueva clase CSS
              }
              // Si fue registrado por sub-registrador y enviado por registrador, mostrar "REG/SUB REG"
              else if (registro.registradoPorRol === 'sub-registrador' && registro.enviadoPorRegistrador) {
                  badgeText = 'REG/SUB REG';
                  roleBadge = 'reg-subreg'; // Nueva clase CSS
              }

              const patentesHtml = registro.patentes && registro.patentes.length > 0
                  ? registro.patentes.map(p => `<span class="patente-tag">${p}</span>`).join('')
                  : '<span style="color: #fbbf24; font-size: 0.8rem;">🚶 Llega a pie</span>';

              const estadoClass = {
                  'pendiente': 'status-pending',
                  'pendiente_supervisor': 'status-pending',
                  'autorizado': 'status-authorized',
                  'rechazado': 'status-rejected',
                  'desvinculado': 'status-rejected',
                  'activo': 'status-active',
                  'inactivo': 'status-inactive'
              }[registro.estado] || 'status-pending';

              // Checkbox de selección para registros pendientes en el tab autorizar O para registradores con sub-reg
              const checkboxHtml = (esPendiente || esPendienteSupervisor) ? `
                  <div class="card-checkbox">
                      <input type="checkbox"
                             id="select-${registro.id}"
                             onchange="${esPendienteSupervisor ? 'toggleRegistroSelectionSupervisor' : 'toggleRegistroSelection'}('${registro.id}')"
                             ${selectedRegistros.has(registro.id) ? 'checked' : ''}>
                  </div>
              ` : '';

              // Lógica para mostrar botones según el rol del usuario y estado del registro
              let actionButtons = '';

              // Botón Editar - Lógica específica según tipo y rol
              if (registro.tipo === 'asistencia_trabajador') {
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  if (registro.registradoPor === userName && userRole === 'guardia') {
                      actionButtons += `<button class="btn-sm btn-edit" onclick="editarAsistenciaGuardia('${registro.id}')">✏️ Editar Patentes</button>`;
                  } else if (userRole === 'administrador') {
                      actionButtons += `<button class="btn-sm btn-edit" onclick="editarAsistenciaGuardia('${registro.id}')">✏️ Editar Patentes</button>`;
                  }

                  // Botón eliminar especial para guardias con motivo
                  if (userRole === 'guardia' && registro.registradoPor === userName) {
                      actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarAsistenciaConMotivo('${registro.id}')">🗑️ Eliminar</button>`;
                  } else if (userRole === 'administrador') {
                      actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarRegistroConfirm('${registro.id}')">🗑️ Eliminar</button>`;
                  }
              } else if (registro.tipo === 'proveedor' || registro.tipo === 'visita') {
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  if (registro.registradoPor === userName && userRole === 'guardia') {
                      // Verificar si estamos en tab de búsqueda
                      const esDesdeBusqueda = document.getElementById('buscar') && document.getElementById('buscar').classList.contains('active');

                      if (esDesdeBusqueda) {
                          actionButtons += `<button class="btn-sm btn-edit" onclick="editarProveedorVisitaGuardia('${registro.id}')">✏️ Editar</button>`;
                          actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarProveedorVisitaGuardia('${registro.id}')">🗑️ Eliminar</button>`;
                      } else {
                          // Desde registros del día (tab registrar): usar función con motivo
                          actionButtons += `<button class="btn-sm btn-edit" onclick="editarRegistro('${registro.id}')">✏️ Editar</button>`;
                          actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarProveedorVisitaConMotivoRegistros('${registro.id}')">🗑️ Eliminar</button>`;
                      }
                  } else if (userRole === 'administrador') {
                      // Para admin: usar función especial solo desde búsqueda/asistencias, normal desde registros del día
                      const esDesdeAsistencias = document.getElementById('asistencias') && document.getElementById('asistencias').classList.contains('active');
                      const esDesdeBusqueda = document.getElementById('buscar') && document.getElementById('buscar').classList.contains('active');

                      if (esDesdeAsistencias || esDesdeBusqueda) {
                          actionButtons += `<button class="btn-sm btn-edit" onclick="editarProveedorVisitaDesdeAsistencias('${registro.id}')">✏️ Editar</button>`;
                      } else {
                          actionButtons += `<button class="btn-sm btn-edit" onclick="editarRegistro('${registro.id}')">✏️ Editar</button>`;
                      }
                      actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarRegistroConfirm('${registro.id}')">🗑️ Eliminar</button>`;
                  } else if (userRole === 'autorizador') {
                      actionButtons += `<button class="btn-sm btn-edit" onclick="editarRegistro('${registro.id}')">✏️ Editar</button>`;
                  }
              } else if (registro.estado !== 'autorizado' || userRole === 'administrador' || userRole === 'autorizador') {
                  // Para trabajadores, verificar contexto y rol
                  if (userRole === 'guardia' && registro.tipo === 'trabajador') {
                      const esDesdeBusqueda = document.getElementById('buscar') && document.getElementById('buscar').classList.contains('active');
                      if (esDesdeBusqueda) {
                          // Solo botón de eliminar (reportar problema) para trabajadores desde búsqueda
                          actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarTrabajadorGuardia('${registro.id}')">🗑️ Reportar</button>`;
                      }
                  } else {
                      actionButtons += `<button class="btn-sm btn-edit" onclick="editarRegistro('${registro.id}')">✏️ Editar</button>`;

                      if (userRole === 'administrador') {
                          actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarRegistroConfirm('${registro.id}')">🗑️ Eliminar</button>`;
                      }
                  }
              }

              // Botón QR - Solo para trabajadores autorizados y activos
              if (registro.estado === 'autorizado' && registro.activo === true &&
                  (registro.tipo === 'trabajador' || registro.tipo === 'asistencia_trabajador')) {
                  actionButtons += `<button class="btn-sm btn-qr" onclick="generarQR('${registro.id}')">Generar QR</button>`;
              }

              // Botón Enviar para registradores con registros de sub-registradores
              if (esPendienteSupervisor) {
                  actionButtons += `<button class="btn-sm btn-primary" onclick="enviarRegistroIndividual('${registro.id}')">Enviar</button>`;
              }

              // Botón Activar/Desactivar - Lógica mejorada según rol
              if (registro.estado === 'autorizado' || registro.estado === 'desvinculado') {
                  if (userRole === 'administrador' || userRole === 'autorizador') {
                      // Admin y autorizador pueden activar/desactivar directamente
                      if (registro.estado === 'desvinculado' || registro.activo === false) {
                          actionButtons += `<button class="btn-sm btn-toggle" onclick="reactivarPersona('${registro.id}')">🔄 Reactivar</button>`;
                      } else {
                          actionButtons += `<button class="btn-sm btn-toggle" onclick="toggleRegistro('${registro.id}')">Desactivar</button>`;
                      }
                  } else if ((userRole === 'registrador' || userRole === 'sub-registrador') && registro.activo === true && registro.estado === 'autorizado') {
                      // Registradores solo pueden solicitar desactivación si está activo
                      actionButtons += `<button class="btn-sm btn-toggle" onclick="solicitarDesactivacion('${registro.id}')">Solicitar Desactivar</button>`;
                  }
              }

              // Botones Autorizar/Rechazar - Solo en tab pendientes para admin/autorizador
              if (esPendiente && (userRole === 'administrador' || userRole === 'autorizador')) {
                  actionButtons += `<button class="btn-sm btn-primary" onclick="autorizarRegistro('${registro.id}')">Autorizar</button>`;
                  actionButtons += `<button class="btn-sm btn-reject" onclick="rechazarRegistro('${registro.id}')">Rechazar</button>`;
              }

              // Botón Configurar Fechas - Solo para admin/autorizador en registros autorizados
              if ((userRole === 'administrador' || userRole === 'autorizador') && registro.estado === 'autorizado') {
                  actionButtons += `<button class="btn-sm btn-secondary" onclick="configurarFechasVigencia('${registro.id}')">📅 Fechas</button>`;
              }

              // Información de fechas de vigencia si existen
              let fechasVigenciaHtml = '';
              if (registro.fechasVigencia) {
                  const hoy = new Date().toISOString().split('T')[0];
                  const enVigencia = hoy >= registro.fechasVigencia.fechaInicio && hoy <= registro.fechasVigencia.fechaFin;
                  const vigenciaClass = enVigencia ? 'status-active' : 'status-inactive';
                  const vigenciaText = enVigencia ? 'EN VIGENCIA' : 'FUERA DE VIGENCIA';

                  fechasVigenciaHtml = `
                      <div class="user-detail-item">
                          <span class="user-detail-label">Vigencia:</span>
                          <span class="status-badge ${vigenciaClass}">${vigenciaText}</span>
                      </div>
                      <div class="user-detail-item">
                          <span class="user-detail-label">Período:</span>
                          <span class="user-detail-value">${registro.fechasVigencia.fechaInicio} al ${registro.fechasVigencia.fechaFin}</span>
                      </div>
                  `;
              }

              // Información de acompañantes si los hay
              let acompañantesHtml = '';
              if (registro.acompañantes && registro.acompañantes.length > 0) {
                  acompañantesHtml = `
                      <div class="user-detail-item">
                          <span class="user-detail-label">Acompañantes:</span>
                          <span class="user-detail-value">${registro.acompañantes.length} persona(s)</span>
                      </div>
                  `;

                  registro.acompañantes.forEach((acomp, index) => {
                      acompañantesHtml += `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Acomp. ${index + 1}:</span>
                              <span class="user-detail-value ${acomp.esDocumentoExtranjero ? 'documento-extranjero' : ''}">${acomp.nombre} (${acomp.documento})</span>
                          </div>
                      `;
                  });
              }

              // Información de registro delegado NUEVO
              let registroDelegadoHtml = '';
              if (registro.esRegistroDelegado) {
                  registroDelegadoHtml = `
                      <div class="user-detail-item">
                          <span class="user-detail-label">Registrado originalmente por:</span>
                          <span class="user-detail-value">${registro.registradoOriginalmentePor} (ADMINISTRADOR)</span>
                      </div>
                      <div class="user-detail-item">
                          <span class="user-detail-label">Asignado a:</span>
                          <span class="user-detail-value">${registro.asignadoA}</span>
                      </div>
                  `;
              }

              card.innerHTML = `
                  ${checkboxHtml}
                  <div class="role-badge role-${roleBadge}">${badgeText}</div>
                  <div class="user-card-header">
                      <div class="user-card-avatar">${initials}</div>
                      <div class="user-card-info">
                          <h3>${registro.nombre}</h3>
                          <p class="${registro.esDocumentoExtranjero ? 'documento-extranjero' : ''}">${registro.documento}</p>
                      </div>
                  </div>
                  <div class="user-card-details">
                      <div class="user-detail-item">
                          <span class="user-detail-label">Empresa:</span>
                          <span class="user-detail-value">${registro.empresa}</span>
                      </div>
                      ${registro.subContrato ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Sub Contrato:</span>
                              <span class="user-detail-value">${registro.subContrato}</span>
                          </div>
                      ` : ''}
                      <div class="user-detail-item">
                          <span class="user-detail-label">Tipo:</span>
                          <span class="user-detail-value">${tipoDisplay}</span>
                      </div>
                      ${registro.empresaProveedora ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Empresa Proveedora:</span>
                              <span class="user-detail-value">${registro.empresaProveedora}</span>
                          </div>
                      ` : ''}
                      ${registro.numeroGuia ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Número de Guía:</span>
                              <span class="user-detail-value">${registro.numeroGuia}</span>
                          </div>
                      ` : ''}
                      <div class="user-detail-item">
                          <span class="user-detail-label">Estado:</span>
                          <span class="status-badge ${estadoClass}">
                              ${registro.estado === 'pendiente_supervisor' ? 'Pendiente Envío' :
                                registro.estado === 'desvinculado' ? 'DESVINCULADO' :
                                registro.estado.toUpperCase()}
                          </span>
                      </div>
                      ${registro.estado === 'desvinculado' ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Desvinculado por:</span>
                              <span class="user-detail-value">${registro.desvinculadoPor}</span>
                          </div>
                          <div class="user-detail-item">
                              <span class="user-detail-label">Fecha Desvinculación:</span>
                              <span class="user-detail-value">${registro.fechaDesvinculacion}</span>
                          </div>
                          <div class="user-detail-item">
                              <span class="user-detail-label">Motivo Desvinculación:</span>
                              <span class="user-detail-value">${registro.motivoDesvinculacion}</span>
                          </div>
                      ` : ''}
                      ${registro.activo !== undefined ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Activo:</span>
                              <span class="status-badge ${registro.activo ? 'status-active' : 'status-inactive'}">
                                  ${registro.activo ? 'SÍ' : 'NO'}
                              </span>
                          </div>
                      ` : ''}
                      ${fechasVigenciaHtml}
                      <div class="user-detail-item">
                          <span class="user-detail-label">Registrado por:</span>
                          <span class="user-detail-value">${registro.registradoPor}</span>
                      </div>
                      ${registroDelegadoHtml}
                      ${registro.enviadoPorRegistrador && registro.nombreSupervisor ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Enviado por:</span>
                              <span class="user-detail-value">${registro.nombreSupervisor}</span>
                          </div>
                      ` : ''}
                      ${registro.autorizadoPor ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Autorizado por:</span>
                              <span class="user-detail-value">${registro.autorizadoPor}</span>
                          </div>
                      ` : ''}
                      ${registro.rechazadoPor ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Rechazado por:</span>
                              <span class="user-detail-value">${registro.rechazadoPor}</span>
                          </div>
                      ` : ''}
                      ${registro.configuradoPor ? `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Fechas config. por:</span>
                              <span class="user-detail-value">${registro.configuradoPor}</span>
                          </div>
                      ` : ''}
                      <div class="user-detail-item">
                          <span class="user-detail-label">Fecha:</span>
                          <span class="user-detail-value">${registro.fecha}</span>
                      </div>
                      <div class="user-detail-item">
                          <span class="user-detail-label">Hora:</span>
                          <span class="user-detail-value">${registro.hora}</span>
                      </div>
                      ${acompañantesHtml}
                  </div>
                  <div class="user-permissions">
                      <h4>Patentes:</h4>
                      <div class="patentes-container">${patentesHtml}</div>
                  </div>
                  <div class="user-card-actions">
                      ${actionButtons}
                  </div>
              `;

              return card;
          }

          // Función para eliminar proveedor/visita con motivo desde registros del día (tab registrar)
          function eliminarProveedorVisitaConMotivoRegistros(registroId) {
              if (userRole !== 'guardia') {
                  showNotification('Solo los guardias pueden eliminar desde esta vista', 'error');
                  return;
              }

              // Buscar el registro
              let registro = registros.find(r => r.id === registroId);
              if (!registro) {
                  registro = registrosOriginales.find(r => r.id === registroId);
              }

              if (!registro) {
                  showNotification('Registro no encontrado', 'error');
                  return;
              }

              // Verificar que sea el guardia que lo registró
              const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
              if (registro.registradoPor !== userName) {
                  showNotification('Solo puedes eliminar registros que tú creaste', 'error');
                  return;
              }

              // Mostrar modal para eliminar con motivo
              mostrarModalEliminarConMotivoRegistros(registro);
          }

          // Modal para eliminar con motivo desde registros del día
          function mostrarModalEliminarConMotivoRegistros(registro) {
              const overlay = document.createElement('div');
              overlay.style.cssText = `
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background: rgba(0, 0, 0, 0.7);
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  z-index: 1000;
              `;

              const modal = document.createElement('div');
              modal.style.cssText = `
                  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                  border-radius: var(--border-radius);
                  padding: 40px;
                  max-width: 500px;
                  width: 90%;
                  border: 1px solid rgba(255, 255, 255, 0.2);
                  backdrop-filter: blur(20px);
                  box-shadow: var(--shadow-xl);
              `;

              modal.innerHTML = `
                  <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                      🗑️ Eliminar ${registro.tipo === 'proveedor' ? 'Proveedor' : 'Visita'}
                  </h3>
                  <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                      <strong>${registro.nombre}</strong><br>
                      ${registro.tipo.toUpperCase()} - ${registro.empresa}<br>
                      Fecha: ${registro.fecha} - Hora: ${registro.hora}
                  </p>
                  <div style="margin-bottom: 20px;">
                      <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                          Motivo de eliminación *
                      </label>
                      <textarea id="motivoEliminacionRegistros"
                               style="width: 100%; height: 100px; padding: 12px; border-radius: 8px;
                                      border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                      color: white; resize: vertical;"
                               placeholder="Explique el motivo por el cual está eliminando este registro..."
                               required></textarea>
                  </div>
                  <div style="display: flex; gap: 12px; justify-content: center;">
                      <button id="cancelarEliminacionRegistros" class="btn-secondary">Cancelar</button>
                      <button id="confirmarEliminacionRegistros" class="btn-primary" style="background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);">Eliminar</button>
                  </div>
              `;

              overlay.appendChild(modal);
              document.body.appendChild(overlay);

              // Enfocar el textarea
              setTimeout(() => {
                  document.getElementById('motivoEliminacionRegistros').focus();
              }, 100);

              // Event listeners
              document.getElementById('cancelarEliminacionRegistros').onclick = () => {
                  document.body.removeChild(overlay);
              };

              document.getElementById('confirmarEliminacionRegistros').onclick = async () => {
                  const motivo = document.getElementById('motivoEliminacionRegistros').value.trim();
                  if (!motivo) {
                      showNotification('Debe ingresar un motivo para la eliminación', 'error');
                      return;
                  }

                  try {
                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                      // Crear notificación para el administrador
                      const notificacionAdmin = {
                          tipo: 'eliminacion_proveedor_visita_registros',
                          registroId: registro.id,
                          documentoPersona: registro.documento,
                          nombrePersona: registro.nombre,
                          empresaPersona: registro.empresa,
                          tipoPersona: registro.tipo,
                          fechaRegistro: registro.fecha,
                          horaRegistro: registro.hora,
                          patentesRegistro: registro.patentes || [],
                          acompañantesRegistro: registro.acompañantes || [],
                          motivoEliminacion: motivo,
                          eliminadoPor: userName,
                          eliminadoPorRol: userRole,
                          fechaEliminacion: new Date().toISOString().split('T')[0],
                          horaEliminacion: new Date().toLocaleTimeString(),
                          timestamp: new Date().toISOString(),
                          estado: 'pendiente_revision',
                          contexto: 'registros_del_dia'
                      };

                      // Guardar notificación en Firebase
                      await addDoc(collection(db, 'notificaciones_admin'), notificacionAdmin);

                      // Eliminar el registro
                      await eliminarRegistroFirebase(registro.id);

                      // Eliminar de memoria en todos los arrays
                      [registros, registrosOriginales, registrosBusqueda].forEach(array => {
                          const index = array.findIndex(r => r.id === registro.id);
                          if (index !== -1) {
                              array.splice(index, 1);
                          }
                      });

                      renderRegistros();
                      renderRegistrosPendientes();

                      document.body.removeChild(overlay);
                      showNotification('Registro eliminado y notificación enviada al administrador', 'success');
                  } catch (error) {
                      console.error('Error eliminando registro:', error);
                      showNotification('Error al eliminar registro', 'error');
                  }
              };

              // Cerrar con ESC
              const handleKeyPress = (e) => {
                  if (e.key === 'Escape') {
                      document.body.removeChild(overlay);
                      document.removeEventListener('keydown', handleKeyPress);
                  }
              };
              document.addEventListener('keydown', handleKeyPress);
          }

          // Mostrar controles de envío para registradores
          function mostrarControlesEnvioRegistrador(cantidad) {
              const container = document.getElementById('registrosHoy').parentNode;
              let controlsExistente = document.getElementById('controlesEnvioRegistrador');

              if (controlsExistente) {
                  controlsExistente.remove();
              }

              const controls = document.createElement('div');
              controls.id = 'controlesEnvioRegistrador';
              controls.className = 'selection-controls';
              controls.innerHTML = `
                  <div class="selection-info">
                      <span id="selectedCountSupervisor">0</span> registros seleccionados de <span>${cantidad}</span> pendientes
                      <span class="selected-count" id="selectedBadgeSupervisor" style="display: none;">0</span>
                  </div>
                  <div class="group-actions">
                      <button class="btn-group btn-group-select" onclick="selectAllSubRegistradores()">Seleccionar Todos</button>
                      <button class="btn-group btn-group-select" onclick="clearAllSelectionsSupervisor()">Limpiar Selección</button>
                      <button class="btn-group btn-group-authorize" onclick="enviarRegistrosSeleccionados()" id="enviarGroupBtn" disabled>
                          📤 Enviar Seleccionados
                      </button>
                  </div>
              `;

              container.insertBefore(controls, container.querySelector('.modern-card:last-child'));
          }

          // Variables para selecciones de supervisor
          let selectedRegistrosSupervisor = new Set();

          // Funciones para manejar selecciones de registros de sub-registradores
          function toggleRegistroSelectionSupervisor(registroId) {
              const checkbox = document.getElementById(`select-${registroId}`);
              const card = document.querySelector(`[data-registro-id="${registroId}"]`);

              if (checkbox.checked) {
                  selectedRegistrosSupervisor.add(registroId);
                  card.classList.add('selected');
              } else {
                  selectedRegistrosSupervisor.delete(registroId);
                  card.classList.remove('selected');
              }

              updateSelectionControlsSupervisor();
          }

          function selectAllSubRegistradores() {
             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

             const registrosPendientes = registros.filter(r =>
                 r.estado === 'pendiente_supervisor' &&
                 (
                     (r.registradoPorRol === 'sub-registrador' && r.supervisor === userName) ||
                     (r.esRegistroDelegado && r.supervisor === userName)
                 )
             );

             registrosPendientes.forEach(registro => {
                 selectedRegistrosSupervisor.add(registro.id);
                 const checkbox = document.getElementById(`select-${registro.id}`);
                 const card = document.querySelector(`[data-registro-id="${registro.id}"]`);

                 if (checkbox) checkbox.checked = true;
                 if (card) card.classList.add('selected');
             });

             updateSelectionControlsSupervisor();
         }

          function clearAllSelectionsSupervisor() {
              selectedRegistrosSupervisor.forEach(registroId => {
                  const checkbox = document.getElementById(`select-${registroId}`);
                  const card = document.querySelector(`[data-registro-id="${registroId}"]`);

                  if (checkbox) checkbox.checked = false;
                  if (card) card.classList.remove('selected');
              });

              selectedRegistrosSupervisor.clear();
              updateSelectionControlsSupervisor();
          }

          function updateSelectionControlsSupervisor() {
              const selectedCountElement = document.getElementById('selectedCountSupervisor');
              const selectedBadge = document.getElementById('selectedBadgeSupervisor');
              const enviarBtn = document.getElementById('enviarGroupBtn');

              const count = selectedRegistrosSupervisor.size;

              if (selectedCountElement) selectedCountElement.textContent = count;

              if (selectedBadge) {
                  if (count > 0) {
                      selectedBadge.textContent = count;
                      selectedBadge.style.display = 'inline';
                  } else {
                      selectedBadge.style.display = 'none';
                  }
              }

              if (enviarBtn) enviarBtn.disabled = count === 0;
          }

          // Enviar registros seleccionados
          async function enviarRegistrosSeleccionados() {
              if (selectedRegistrosSupervisor.size === 0) {
                  showNotification('No hay registros seleccionados', 'error');
                  return;
              }

              const count = selectedRegistrosSupervisor.size;
              if (!confirm(`¿Está seguro de que desea enviar ${count} registro(s) para autorización?`)) {
                  return;
              }

              try {
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  const promises = [];

                  selectedRegistrosSupervisor.forEach(registroId => {
                      const datosActualizados = {
                          estado: 'pendiente',
                          enviadoPorRegistrador: true,
                          nombreSupervisor: userName,
                          fechaEnvio: new Date().toISOString().split('T')[0],
                          horaEnvio: new Date().toLocaleTimeString()
                      };

                      promises.push(actualizarRegistro(registroId, datosActualizados));
                  });

                  await Promise.all(promises);

                  // Actualizar registros en memoria
                  selectedRegistrosSupervisor.forEach(registroId => {
                      const registroIndex = registros.findIndex(r => r.id === registroId);
                      if (registroIndex !== -1) {
                          registros[registroIndex].estado = 'pendiente';
                          registros[registroIndex].enviadoPorRegistrador = true;
                          registros[registroIndex].nombreSupervisor = userName;
                          registros[registroIndex].fechaEnvio = new Date().toISOString().split('T')[0];
                          registros[registroIndex].horaEnvio = new Date().toLocaleTimeString();
                      }
                  });

                  selectedRegistrosSupervisor.clear();
                  renderRegistros();
                  renderRegistrosPendientes();
                  showNotification(`${count} registro(s) enviado(s) para autorización`, 'success');

              } catch (error) {
                  console.error('Error enviando registros:', error);
                  showNotification('Error al enviar registros', 'error');
              }
          }

          // Enviar registro individual
          async function enviarRegistroIndividual(registroId) {
              if (!confirm('¿Está seguro de que desea enviar este registro para autorización?')) {
                  return;
              }

              try {
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  const datosActualizados = {
                      estado: 'pendiente',
                      enviadoPorRegistrador: true,
                      nombreSupervisor: userName,
                      fechaEnvio: new Date().toISOString().split('T')[0],
                      horaEnvio: new Date().toLocaleTimeString()
                  };

                  await actualizarRegistro(registroId, datosActualizados);

                  const registroIndex = registros.findIndex(r => r.id === registroId);
                  if (registroIndex !== -1) {
                      registros[registroIndex].estado = 'pendiente';
                      registros[registroIndex].enviadoPorRegistrador = true;
                      registros[registroIndex].nombreSupervisor = userName;
                      registros[registroIndex].fechaEnvio = new Date().toISOString().split('T')[0];
                      registros[registroIndex].horaEnvio = new Date().toLocaleTimeString();
                  }

                  renderRegistros();
                  renderRegistrosPendientes();
                  showNotification('Registro enviado para autorización', 'success');

              } catch (error) {
                  console.error('Error enviando registro:', error);
                  showNotification('Error al enviar registro', 'error');
              }
          }

          // Funciones para manejar registros
          async function autorizarRegistro(id) {
              if (confirm('¿Está seguro de que desea autorizar este registro?')) {
                  try {
                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                      const datosActualizados = {
                          estado: 'autorizado',
                          autorizadoPor: userName,
                          fechaAutorizacion: new Date().toISOString().split('T')[0],
                          horaAutorizacion: new Date().toLocaleTimeString()
                      };

                      await actualizarRegistro(id, datosActualizados);

                      const registroIndex = registros.findIndex(r => r.id === id);
                      if (registroIndex !== -1) {
                          registros[registroIndex] = { ...registros[registroIndex], ...datosActualizados };
                      }

                      renderRegistros();
                      renderRegistrosPendientes();
                      showNotification('Registro autorizado exitosamente', 'success');
                  } catch (error) {
                      showNotification('Error al autorizar registro', 'error');
                  }
              }
          }

          async function toggleRegistro(id) {
              const registro = registros.find(r => r.id === id);
              if (!registro) return;

              // Solo admin y autorizador pueden activar/desactivar
              if (userRole !== 'administrador' && userRole !== 'autorizador') {
                  showNotification('No tienes permisos para realizar esta acción', 'error');
                  return;
              }

              // Solo se puede activar/desactivar registros autorizados
              if (registro.estado !== 'autorizado') {
                  showNotification('Solo se pueden activar/desactivar registros autorizados', 'error');
                  return;
              }

              const nuevoEstadoActivo = registro.activo === false ? true : false;
              const accion = nuevoEstadoActivo ? 'activar' : 'desactivar';

              if (confirm(`¿Está seguro de que desea ${accion} este registro?`)) {
             try {
                 const datosActualizacion = { activo: nuevoEstadoActivo };

                 // Si se está desactivando, cambiar estado a desvinculado
                 if (nuevoEstadoActivo === false) {
                     datosActualizacion.estado = 'desvinculado';
                     datosActualizacion.fechaDesvinculacion = new Date().toISOString().split('T')[0];
                     datosActualizacion.desvinculadoPor = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 } else {
                     // Si se está reactivando, volver a autorizado
                     datosActualizacion.estado = 'autorizado';
                 }

                 await actualizarRegistro(id, datosActualizacion);
                 registro.activo = nuevoEstadoActivo;
                 registro.estado = datosActualizacion.estado;

                 renderRegistros();
                 renderRegistrosPendientes();
                 showNotification(`Registro ${accion}do correctamente`, 'success');
             } catch (error) {
                 showNotification('Error al actualizar registro', 'error');
             }
         }
          }

          function editarRegistro(id) {
              const registro = registros.find(r => r.id === id);
              if (!registro) return;

              editandoRegistro = id;

              // Llenar el formulario con los datos del registro
              document.getElementById('esDocumentoExtranjero').checked = registro.esDocumentoExtranjero || false;
              toggleDocumentoExtranjero();

              document.getElementById('documento').value = registro.documento;
              document.getElementById('nombreRegistro').value = registro.nombre;
              document.getElementById('empresaRegistro').value = registro.empresa;
              document.getElementById('subContrato').value = registro.subContrato || '';
              document.getElementById('tipoPersona').value = registro.tipo;

              if (registro.empresaProveedora) {
                  document.getElementById('empresaProveedora').value = registro.empresaProveedora;
              }

              if (registro.numeroGuia) {
                  document.getElementById('numeroGuia').value = registro.numeroGuia;
              }

              patentesActuales = registro.patentes || [];
              renderPatentes();
              updateLlegaPieMessage();
              toggleProveedorFields();

              // CARGAR ACOMPAÑANTES SI LOS HAY - CORREGIDO
              if (registro.acompañantes && registro.acompañantes.length > 0) {
                  // Mostrar el grupo de acompañantes si es proveedor o visita
                  if (registro.tipo === 'proveedor' || registro.tipo === 'visita') {
                      document.getElementById('acompañantesGroup').style.display = 'block';
                  }

                  // Establecer la cantidad
                  document.getElementById('cantidadAcompañantes').value = registro.acompañantes.length;

                  // Generar los campos
                  generarCamposAcompañantes();

                  // Llenar los datos después de que se generen los campos - TIEMPO AUMENTADO
                  setTimeout(() => {
                      registro.acompañantes.forEach((acomp, index) => {
                          const numero = index + 1;
                          const docInput = document.getElementById(`documentoAcomp${numero}`);
                          const nombreInput = document.getElementById(`nombreAcomp${numero}`);
                          const checkboxExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`);

                          if (docInput) {
                              docInput.value = acomp.documento;
                              // Validar el campo después de llenarlo
                              if (window.validarCampoAcompañante) {
                                  validarCampoAcompañante(numero, 'documento');
                              }
                          }

                          if (nombreInput) {
                              nombreInput.value = acomp.nombre;
                              // Validar el campo después de llenarlo
                              if (window.validarCampoAcompañante) {
                                  validarCampoAcompañante(numero, 'nombre');
                              }
                          }

                          if (checkboxExtranjero) {
                              // PRIMERO configurar el checkbox
                              checkboxExtranjero.checked = acomp.esDocumentoExtranjero || false;
                              // LUEGO hacer el toggle para cambiar las etiquetas
                              toggleDocumentoExtranjeroAcompañante(numero);
                              // FINALMENTE volver a establecer el valor (después del toggle)
                              if (docInput) {
                                  docInput.value = acomp.documento;
                              }
                          }
                      });
                  }, 200); // Aumentar tiempo de espera a 200ms
              } else {
                  // Si no hay acompañantes, limpiar el campo de cantidad
                  document.getElementById('cantidadAcompañantes').value = '';
                  document.getElementById('acompañantesContainer').style.display = 'none';
              }

              // ACTUALIZAR BOTÓN PARA MODO EDICIÓN - NUEVO
              setTimeout(() => {
                  const submitBtn = document.querySelector('#registroForm button[type="submit"]');
                  if (submitBtn) {
                      if (userRole === 'guardia') {
                          // Para guardias en modo edición
                          submitBtn.innerHTML = '<span>✏️ Actualizar Registro</span>';
                          submitBtn.className = 'btn-primary';
                          submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
                          submitBtn.style.boxShadow = '0 8px 20px rgba(245, 158, 11, 0.3)';
                          submitBtn.disabled = false;
                      } else {
                          // Para otros roles
                          submitBtn.innerHTML = '<span>✏️ Actualizar</span>';
                          submitBtn.className = 'btn-primary';
                          submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100())';
                          submitBtn.style.boxShadow = '0 8px 20px rgba(245, 158, 11, 0.3)';
                          submitBtn.disabled = false;
                      }
                  }
              }, 100);

              // Cambiar a la pestaña de registro
              showTab('registrar');
              showNotification('Datos cargados para edición', 'info');
          }

          async function eliminarRegistroConfirm(id) {
              const registro = registros.find(r => r.id === id);
              if (!registro) return;

              if (confirm(`¿Está seguro de que desea eliminar el registro de ${registro.nombre}? Esta acción no se puede deshacer.`)) {
                  try {
                      await eliminarRegistroFirebase(id);
                      registros = registros.filter(r => r.id !== id);
                      renderRegistros();
                      renderRegistrosPendientes();
                      showNotification('Registro eliminado correctamente', 'success');
                  } catch (error) {
                      showNotification('Error al eliminar registro', 'error');
                  }
              }
          }

          // Función generarQR modificada para mostrar info de vehículo en modal pero no en impresión
          function generarQR(id) {
              const registro = registros.find(r => r.id === id) ||
                              registrosOriginales.find(r => r.id === id) ||
                              asistenciasOriginales?.find(r => r.id === id);

              if (!registro) {
                  showNotification('Registro no encontrado', 'error');
                  return;
              }

              // SOLO GENERAR QR PARA TRABAJADORES Y ASISTENCIAS
              if (registro.tipo !== 'trabajador' && registro.tipo !== 'asistencia_trabajador') {
                  showNotification('Los códigos QR solo están disponibles para trabajadores', 'info');
                  return;
              }

              // Verificar que esté autorizado y activo antes de generar QR
              if (registro.estado !== 'autorizado' || registro.activo !== true) {
                  showNotification('No se puede generar QR: la persona debe estar autorizada y activa', 'error');
                  return;
              }

              // Crear overlay del modal
              const overlay = document.createElement('div');
              overlay.style.cssText = `
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background: rgba(0, 0, 0, 0.8);
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  z-index: 1000;
              `;

              // Crear modal
              const modal = document.createElement('div');
              modal.style.cssText = `
                  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                  border-radius: var(--border-radius);
                  padding: 30px;
                  width: 90%;
                  max-width: 450px;
                  border: 1px solid rgba(255, 255, 255, 0.2);
                  backdrop-filter: blur(20px);
                  box-shadow: var(--shadow-xl);
                  text-align: center;
                  max-height: 90vh;
                  display: flex;
                  flex-direction: column;
              `;

              // DATOS QR SUPER SIMPLIFICADOS - SOLO IDENTIFICACIÓN
              const qrData = {
                  id: registro.id,
                  doc: registro.documento,
                  nom: registro.nombre,
                  emp: registro.empresa
              };

              if (registro.subContrato) {
                  qrData.sub = registro.subContrato;
              }

              const qrString = JSON.stringify(qrData);
              console.log('QR Data generado:', qrString);

              modal.innerHTML = `
                  <h3 style="color: white; margin-bottom: 15px; font-size: 1.4rem;">
                      📱 Código QR - Trabajador
                  </h3>
                  <p style="color: var(--text-light); margin-bottom: 15px; font-size: 0.9rem;">
                      <strong>${registro.nombre}</strong><br>
                      ${registro.documento} - ${registro.empresa}
                      ${registro.subContrato ? `<br>Subcontrato: ${registro.subContrato}` : ''}
                  </p>
                  <div style="color: #22c55e; margin: 10px 0; font-size: 0.85rem;">
                      ✅ TRABAJADOR AUTORIZADO
                  </div>
                  <div id="qrcode" style="margin: 15px auto; padding: 15px; background: white; border-radius: 12px;
                                            display: inline-block; max-width: 250px; width: 100%;"></div>
                  <p style="color: var(--text-light); font-size: 0.75rem; margin: 10px 0;">
                      Escanee este código para marcar asistencia
                  </p>
                  <div style="display: flex; gap: 8px; justify-content: center; margin-top: 15px; flex-wrap: wrap;">
                      <button id="descargarQR" class="btn-primary" style="padding: 8px 12px; font-size: 0.8rem;">📥 Descargar</button>
                      <button id="imprimirQR" class="btn-secondary" style="padding: 8px 12px; font-size: 0.8rem;">🖨️ Imprimir</button>
                      <button id="cerrarQR" class="btn-secondary" style="padding: 8px 12px; font-size: 0.8rem;">Cerrar</button>
                  </div>
              `;

              overlay.appendChild(modal);
              document.body.appendChild(overlay);

              // Generar QR con configuración optimizada
              const script = document.createElement('script');
              script.src = 'https://cdnjs.cloudflare.com/ajax/libs/qrcode-generator/1.4.4/qrcode.min.js';
              script.onload = function() {
                  try {
                      const qr = qrcode(0, 'L');
                      qr.addData(qrString);
                      qr.make();

                      document.getElementById('qrcode').innerHTML = qr.createImgTag(6, 8);

                      const qrImg = document.querySelector('#qrcode img');
                      if (qrImg) {
                          qrImg.style.maxWidth = '100%';
                          qrImg.style.height = 'auto';
                          qrImg.style.display = 'block';
                          qrImg.style.margin = '0 auto';
                      }

                      // Event listeners para botones
                      document.getElementById('descargarQR').onclick = function() {
                          descargarQRConDatos(registro);
                      };

                      document.getElementById('imprimirQR').onclick = function() {
                          imprimirQRConDatos(registro);
                      };

                  } catch (error) {
                      document.getElementById('qrcode').innerHTML = `
                          <p style="color: #ef4444; padding: 20px; font-size: 0.8rem;">
                              Error generando QR: ${error.message}
                          </p>
                      `;
                  }
              };

              document.head.appendChild(script);

              // Cerrar modal
              document.getElementById('cerrarQR').onclick = function() {
                  document.body.removeChild(overlay);
                  document.head.removeChild(script);
              };

              // Cerrar con ESC o click fuera
              overlay.onclick = function(e) {
                  if (e.target === overlay) {
                      document.body.removeChild(overlay);
                      document.head.removeChild(script);
                  }
              };

              document.addEventListener('keydown', function handleEscape(e) {
                  if (e.key === 'Escape') {
                      document.body.removeChild(overlay);
                      document.head.removeChild(script);
                      document.removeEventListener('keydown', handleEscape);
                  }
              });
          }

          // Función para descargar QR SIN información de vehículo/pie
          function descargarQRConDatos(registro) {
              const canvas = document.createElement('canvas');
              const ctx = canvas.getContext('2d');

              // Configurar canvas para A4 en orientación vertical
              canvas.width = 600;
              canvas.height = 800;

              // Fondo blanco
              ctx.fillStyle = '#ffffff';
              ctx.fillRect(0, 0, canvas.width, canvas.height);

              // Configurar texto
              ctx.fillStyle = '#000000';
              ctx.textAlign = 'center';

              // Título
              ctx.font = 'bold 24px Arial';
              ctx.fillText('CÓDIGO DE ACCESO', canvas.width / 2, 50);

              // Línea separadora
              ctx.strokeStyle = '#000000';
              ctx.lineWidth = 3;
              ctx.beginPath();
              ctx.moveTo(50, 70);
              ctx.lineTo(canvas.width - 50, 70);
              ctx.stroke();

              // Información del registro
              let yPosition = 110;

              ctx.font = 'bold 20px Arial';
              ctx.fillText(registro.nombre.toUpperCase(), canvas.width / 2, yPosition);
              yPosition += 30;

              ctx.font = '14px Arial';
              const documentoTexto = registro.esDocumentoExtranjero ?
                  `Documento: ${registro.documento}` :
                  `RUT: ${registro.documento}`;
              ctx.fillText(documentoTexto, canvas.width / 2, yPosition);
              yPosition += 25;

              ctx.fillText(`Empresa: ${registro.empresa}`, canvas.width / 2, yPosition);
              yPosition += 20;

              if (registro.subContrato) {
                  ctx.fillText(`Subcontrato: ${registro.subContrato}`, canvas.width / 2, yPosition);
                  yPosition += 20;
              }

              let tipoTexto = registro.tipo.toUpperCase();
              if (registro.tipo === 'asistencia_trabajador') {
                  tipoTexto = 'TRABAJADOR';
              }
              ctx.fillText(`Tipo: ${tipoTexto}`, canvas.width / 2, yPosition);
              yPosition += 25;

              ctx.fillText(`Fecha: ${registro.fecha} - Hora: ${registro.hora}`, canvas.width / 2, yPosition);
              yPosition += 40;

              // Obtener imagen del QR
              const qrImg = document.querySelector('#qrcode img');
              if (qrImg) {
                  // Dibujar QR centrado
                  const qrSize = 180;
                  const qrX = (canvas.width - qrSize) / 2;
                  const qrY = yPosition;

                  ctx.drawImage(qrImg, qrX, qrY, qrSize, qrSize);

                  // Texto debajo del QR
                  ctx.font = '11px Arial';
                  ctx.fillStyle = '#666666';
                  ctx.fillText('Escanee con la aplicación móvil', canvas.width / 2, qrY + qrSize + 20);

                  // Estado
                  ctx.font = 'bold 14px Arial';
                  ctx.fillStyle = registro.estado === 'autorizado' ? '#16a34a' : '#ef4444';
                  ctx.fillText(`Estado: ${registro.estado.toUpperCase()}`, canvas.width / 2, qrY + qrSize + 50);

                  // Vigencia si existe
                  if (registro.fechasVigencia) {
                      ctx.fillStyle = '#000000';
                      ctx.font = '12px Arial';
                      ctx.fillText(`Vigencia: ${registro.fechasVigencia.fechaInicio} al ${registro.fechasVigencia.fechaFin}`,
                          canvas.width / 2, qrY + qrSize + 75);
                  }

                  // Footer
                  ctx.fillStyle = '#999999';
                  ctx.font = '10px Arial';
                  ctx.fillText('Sistema de Gestión de Acceso', canvas.width / 2, canvas.height - 40);
                  ctx.fillText(`Generado: ${new Date().toLocaleString()}`, canvas.width / 2, canvas.height - 20);
              }

              // Descargar
              const link = document.createElement('a');
              link.download = `QR_${registro.nombre.replace(/\s+/g, '_')}_${registro.fecha}.png`;
              link.href = canvas.toDataURL('image/png', 1.0);
              link.click();
          }

         // Función para imprimir QR SIN información de vehículo/pie
         function imprimirQRConDatos(registro) {
             const printWindow = window.open('', '', 'width=800,height=1000');
             const qrImg = document.querySelector('#qrcode img');

             const documentoTexto = registro.esDocumentoExtranjero ?
                 `Documento: ${registro.documento}` :
                 `RUT: ${registro.documento}`;

             // Mostrar tipo correcto
             let tipoTexto = registro.tipo.toUpperCase();
             if (registro.tipo === 'asistencia_trabajador') {
                 tipoTexto = 'TRABAJADOR';
             }

             printWindow.document.write(`
                 <html>
                     <head>
                         <title>QR - ${registro.nombre}</title>
                         <style>
                             @page {
                                 size: A4 portrait;
                                 margin: 20mm;
                             }
                             body {
                                 font-family: 'Arial', sans-serif;
                                 text-align: center;
                                 padding: 0;
                                 margin: 0;
                                 max-width: 600px;
                                 margin: 0 auto;
                                 line-height: 1.4;
                             }
                             .header {
                                 border-bottom: 3px solid #000;
                                 padding-bottom: 15px;
                                 margin-bottom: 20px;
                             }
                             .header h1 {
                                 color: #000;
                                 margin: 0;
                                 font-size: 24px;
                                 font-weight: bold;
                                 letter-spacing: 2px;
                             }
                             .nombre-principal {
                                 font-size: 20px;
                                 font-weight: bold;
                                 color: #000;
                                 margin: 15px 0;
                                 text-transform: uppercase;
                             }
                             .info-line {
                                 font-size: 14px;
                                 color: #000;
                                 margin: 8px 0;
                                 font-weight: 500;
                             }
                             .empresa-info {
                                 font-size: 12px;
                                 color: #000;
                                 margin: 5px 0;
                             }
                             .qr-container {
                                 margin: 20px 0;
                                 padding: 15px;
                                 background: white;
                                 border: 1px solid #ccc;
                                 display: inline-block;
                             }
                             .qr-container img {
                                 width: 180px;
                                 height: 180px;
                                 display: block;
                                 margin: 0 auto;
                             }
                             .qr-instruction {
                                 font-size: 11px;
                                 color: #666;
                                 margin-top: 10px;
                                 font-style: italic;
                             }
                             .estado-container {
                                 margin: 15px 0;
                             }
                             .estado {
                                 font-weight: bold;
                                 font-size: 14px;
                                 padding: 5px 15px;
                                 border-radius: 15px;
                                 display: inline-block;
                                 color: white;
                                 background: ${registro.estado === 'autorizado' ? '#16a34a' : '#ef4444'};
                                 text-transform: uppercase;
                                 letter-spacing: 1px;
                             }
                             .footer {
                                 margin-top: 30px;
                                 font-size: 10px;
                                 color: #666;
                                 border-top: 1px solid #ccc;
                                 padding-top: 15px;
                             }
                             .fecha-hora {
                                 font-size: 11px;
                                 color: #333;
                                 margin: 8px 0;
                             }
                             @media print {
                                 body {
                                     print-color-adjust: exact;
                                     -webkit-print-color-adjust: exact;
                                 }
                             }
                         </style>
                     </head>
                     <body>
                         <div class="header">
                             <h1>CÓDIGO DE ACCESO</h1>
                         </div>

                         <div class="nombre-principal">${registro.nombre}</div>

                         <div class="info-line">${documentoTexto}</div>
                         <div class="empresa-info">Empresa: ${registro.empresa}</div>
                         ${registro.subContrato ? `<div class="empresa-info">Subcontrato: ${registro.subContrato}</div>` : ''}
                         <div class="empresa-info">Tipo: ${tipoTexto}</div>
                         <div class="fecha-hora">Fecha: ${registro.fecha} - Hora: ${registro.hora}</div>

                         <div class="qr-container">
                             ${qrImg ? qrImg.outerHTML : '<p>Error generando QR</p>'}
                             <div class="qr-instruction">Escanee con la aplicación móvil</div>
                         </div>

                         <div class="estado-container">
                             <span class="estado">Estado: ${registro.estado}</span>
                         </div>

                         ${registro.fechasVigencia ? `
                             <div class="info-line">Vigencia: ${registro.fechasVigencia.fechaInicio} al ${registro.fechasVigencia.fechaFin}</div>
                         ` : ''}

                         <div class="footer">
                             <p><strong>Sistema de Gestión de Acceso</strong></p>
                             <p>Generado: ${new Date().toLocaleString()}</p>
                         </div>
                     </body>
                 </html>
             `);

             printWindow.document.close();
             setTimeout(() => {
                 printWindow.print();
             }, 500);
         }

         // Función para escanear QR con cámara funcional - VERSIÓN COMPLETAMENTE CORREGIDA
         function escanearQRGuardia() {
             if (userRole !== 'guardia') {
                 showNotification('Solo los guardias pueden escanear códigos QR', 'error');
                 return;
             }

             // Crear modal de escaneo
             const overlay = document.createElement('div');
             overlay.style.cssText = `
                 position: fixed;
                 top: 0;
                 left: 0;
                 width: 100%;
                 height: 100%;
                 background: rgba(0, 0, 0, 0.9);
                 display: flex;
                 justify-content: center;
                 align-items: center;
                 z-index: 1000;
                 overflow-y: auto;
                 padding: 20px 0;
             `;

             const modal = document.createElement('div');
             modal.style.cssText = `
                 background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                 border-radius: var(--border-radius);
                 padding: 30px;
                 max-width: 500px;
                 width: 90%;
                 border: 1px solid rgba(255, 255, 255, 0.2);
                 backdrop-filter: blur(20px);
                 box-shadow: var(--shadow-xl);
                 text-align: center;
                 margin: auto;
                 max-height: 90vh;
                 overflow-y: auto;
             `;

             modal.innerHTML = `
                 <h3 style="color: white; margin-bottom: 20px;">
                     📷 Escanear Código QR
                 </h3>

                 <!-- Video para la cámara -->
                 <div id="cameraContainer" style="margin-bottom: 20px;">
                     <video id="qrVideo" style="width: 100%; max-width: 350px; height: 250px; border-radius: 8px; background: #000;" autoplay muted playsinline></video>
                     <canvas id="qrCanvas" style="display: none;" willReadFrequently="true"></canvas>
                     <p style="color: var(--text-light); font-size: 0.8rem; margin-top: 8px;">
                         Enfoque el código QR hacia la cámara
                     </p>
                     <div style="margin-top: 15px;">
                         <button id="startCamera" class="btn-primary" style="margin-right: 10px;">🎥 Iniciar Cámara</button>
                         <button id="stopCamera" class="btn-secondary" style="display: none;">⏹️ Detener</button>
                         <button id="manualInput" class="btn-secondary" style="margin-left: 10px;">⌨️ Ingreso Manual</button>
                     </div>
                 </div>

                 <!-- Información de estado -->
                 <div id="scanStatus" style="margin: 15px 0; padding: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">
                     <p style="color: var(--text-light); margin: 0; font-size: 0.9rem;">
                         Cargando escáner QR...
                     </p>
                 </div>

                 <div style="display: flex; gap: 12px; justify-content: center;">
                     <button id="cancelarEscaneo" class="btn-secondary">Cancelar</button>
                 </div>
             `;

             overlay.appendChild(modal);
             document.body.appendChild(overlay);

             let stream = null;
             let isScanning = false;
             let scanInterval = null;

             // Función para actualizar el estado del escaneo
             function updateScanStatus(message, type = 'info') {
                 const statusDiv = document.getElementById('scanStatus');
                 if (!statusDiv) return;

                 const colors = {
                     info: 'rgba(59, 130, 246, 0.2)',
                     success: 'rgba(34, 197, 94, 0.2)',
                     error: 'rgba(239, 68, 68, 0.2)',
                     warning: 'rgba(245, 158, 11, 0.2)'
                 };

                 statusDiv.style.background = colors[type];
                 statusDiv.innerHTML = `<p style="color: var(--text-light); margin: 0; font-size: 0.9rem;">${message}</p>`;
             }

             // Cargar jsQR desde múltiples CDNs con fallback
             function cargarJsQR() {
                 return new Promise((resolve, reject) => {
                     updateScanStatus('Cargando detector QR...', 'warning');

                     // Si jsQR ya está disponible, usarlo directamente
                     if (window.jsQR) {
                         console.log('jsQR ya está disponible');
                         resolve();
                         return;
                     }

                     const cdnUrls = [
                         'https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js',
                         'https://unpkg.com/jsqr@1.4.0/dist/jsQR.js',
                         'https://cdnjs.cloudflare.com/ajax/libs/jsQR/1.4.0/jsQR.min.js'
                     ];

                     let currentCdnIndex = 0;

                     function tryLoadFromCdn() {
                         if (currentCdnIndex >= cdnUrls.length) {
                             reject(new Error('No se pudo cargar jsQR desde ningún CDN'));
                             return;
                         }

                         const script = document.createElement('script');
                         script.src = cdnUrls[currentCdnIndex];
                         script.crossOrigin = 'anonymous';

                         const timeout = setTimeout(() => {
                             script.remove();
                             currentCdnIndex++;
                             console.log(`Timeout cargando desde ${cdnUrls[currentCdnIndex - 1]}, intentando siguiente CDN...`);
                             tryLoadFromCdn();
                         }, 10000);

                         script.onload = function() {
                             clearTimeout(timeout);
                             if (window.jsQR) {
                                 console.log(`jsQR cargado exitosamente desde ${cdnUrls[currentCdnIndex]}`);
                                 resolve();
                             } else {
                                 currentCdnIndex++;
                                 console.log(`jsQR no disponible después de cargar ${cdnUrls[currentCdnIndex - 1]}, intentando siguiente...`);
                                 tryLoadFromCdn();
                             }
                         };

                         script.onerror = function() {
                             clearTimeout(timeout);
                             script.remove();
                             currentCdnIndex++;
                             console.error(`Error cargando jsQR desde ${cdnUrls[currentCdnIndex - 1]}, intentando siguiente CDN...`);
                             tryLoadFromCdn();
                         };

                         document.head.appendChild(script);
                     }

                     tryLoadFromCdn();
                 });
             }

             // Función para iniciar la cámara
             async function startCamera() {
                 try {
                     updateScanStatus('Solicitando permisos de cámara...', 'info');

                     // Verificar que el navegador soporte getUserMedia
                     if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                         throw new Error('El navegador no soporta acceso a cámara');
                     }

                     const constraints = {
                         video: {
                             facingMode: { ideal: 'environment' }, // Cámara trasera preferida
                             width: { ideal: 640, max: 1280 },
                             height: { ideal: 480, max: 720 }
                         }
                     };

                     try {
                         stream = await navigator.mediaDevices.getUserMedia(constraints);
                     } catch (envError) {
                         console.warn('No se pudo acceder a cámara trasera, intentando cámara frontal');
                         // Intentar con cualquier cámara disponible
                         const fallbackConstraints = {
                             video: {
                                 width: { ideal: 640, max: 1280 },
                                 height: { ideal: 480, max: 720 }
                             }
                         };
                         stream = await navigator.mediaDevices.getUserMedia(fallbackConstraints);
                     }

                     const video = document.getElementById('qrVideo');
                     if (!video) {
                         throw new Error('Elemento de video no encontrado');
                     }

                     video.srcObject = stream;

                     video.onloadedmetadata = () => {
                         video.play().then(() => {
                             document.getElementById('startCamera').style.display = 'none';
                             document.getElementById('stopCamera').style.display = 'inline-block';
                             updateScanStatus('✅ Cámara activa - Posicione el QR en el centro', 'success');
                             startQRScanning();
                         }).catch(err => {
                             console.error('Error iniciando video:', err);
                             updateScanStatus('Error iniciando reproducción de video', 'error');
                         });
                     };

                     video.onerror = (err) => {
                         console.error('Error en elemento video:', err);
                         updateScanStatus('Error en el elemento de video', 'error');
                     };

                 } catch (error) {
                     console.error('Error accediendo a la cámara:', error);
                     let errorMessage = 'Error: No se puede acceder a la cámara.';

                     if (error.name === 'NotAllowedError') {
                         errorMessage = 'Permiso denegado. Active los permisos de cámara en su navegador.';
                     } else if (error.name === 'NotFoundError') {
                         errorMessage = 'No se encontró ninguna cámara en el dispositivo.';
                     } else if (error.name === 'NotSupportedError') {
                         errorMessage = 'El navegador no soporta acceso a cámara.';
                     }

                     updateScanStatus(errorMessage, 'error');
                 }
             }

             // Función para detener la cámara
             function stopCamera() {
                 if (stream) {
                     stream.getTracks().forEach(track => {
                         track.stop();
                     });
                     stream = null;
                 }
                 isScanning = false;
                 if (scanInterval) {
                     clearInterval(scanInterval);
                     scanInterval = null;
                 }

                 const startBtn = document.getElementById('startCamera');
                 const stopBtn = document.getElementById('stopCamera');
                 if (startBtn) startBtn.style.display = 'inline-block';
                 if (stopBtn) stopBtn.style.display = 'none';
                 updateScanStatus('Cámara detenida', 'info');
             }

             // Función mejorada para escanear QR
             function startQRScanning() {
                 if (!window.jsQR) {
                     updateScanStatus('Detector QR no disponible', 'error');
                     return;
                 }

                 isScanning = true;
                 let scanCount = 0;
                 updateScanStatus('🔍 Escaneando... Acerque el código QR', 'warning');

                 scanInterval = setInterval(() => {
                     if (!isScanning) return;

                     scanCount++;
                     const video = document.getElementById('qrVideo');
                     const canvas = document.getElementById('qrCanvas');

                     if (!video || !canvas || video.readyState !== video.HAVE_ENOUGH_DATA) {
                         return;
                     }

                     try {
                         const context = canvas.getContext('2d', { willReadFrequently: true });

                         // Ajustar canvas al tamaño del video
                         canvas.width = video.videoWidth;
                         canvas.height = video.videoHeight;

                         if (canvas.width === 0 || canvas.height === 0) return;

                         // Dibujar frame actual del video en el canvas
                         context.drawImage(video, 0, 0, canvas.width, canvas.height);

                         // Obtener datos de imagen
                         const imageData = context.getImageData(0, 0, canvas.width, canvas.height);

                         // Intentar detectar QR
                         const code = window.jsQR(imageData.data, imageData.width, imageData.height, {
                             inversionAttempts: "dontInvert",
                         });

                         if (code && code.data && code.data.length > 10) {
                             console.log('✅ QR detectado:', code.data);
                             updateScanStatus('✅ ¡Código detectado! Procesando...', 'success');
                             stopCamera();

                             setTimeout(() => {
                                 cleanup();
                                 procesarQRPorGuardia(code.data);
                             }, 1000);
                             return;
                         }

                         // Mostrar progreso cada 15 intentos
                         if (scanCount % 15 === 0) {
                             const segundos = Math.floor(scanCount / 10);
                             updateScanStatus(`🔍 Buscando código... (${segundos} seg)`, 'warning');
                         }

                     } catch (error) {
                         console.error('Error en detección QR:', error);
                         if (scanCount % 50 === 0) { // Solo mostrar error cada 50 intentos
                             updateScanStatus('Error detectando QR - Verifique la iluminación', 'error');
                         }
                     }
                 }, 100); // Escanear cada 100ms
             }

             // Función para ingreso manual del QR
             function mostrarIngresoManual() {
                 const qrData = prompt('Ingrese el contenido del código QR manualmente:\n\n(Pegue aquí el texto completo del código QR)');
                 if (qrData && qrData.trim()) {
                     cleanup();
                     procesarQRPorGuardia(qrData.trim());
                 }
             }

             // Función de limpieza
             function cleanup() {
                 stopCamera();
                 if (document.body.contains(overlay)) {
                     document.body.removeChild(overlay);
                 }
             }

             // Cargar librería y configurar eventos
             cargarJsQR()
                 .then(() => {
                     updateScanStatus('✅ Detector listo - Presione "Iniciar Cámara"', 'success');

                     // Event listeners
                     document.getElementById('startCamera').onclick = startCamera;
                     document.getElementById('stopCamera').onclick = stopCamera;
                     document.getElementById('manualInput').onclick = mostrarIngresoManual;
                     document.getElementById('cancelarEscaneo').onclick = cleanup;

                     // Cerrar con click fuera o ESC
                     overlay.onclick = function(e) {
                         if (e.target === overlay) cleanup();
                     };

                     const handleEscape = (e) => {
                         if (e.key === 'Escape') {
                             cleanup();
                             document.removeEventListener('keydown', handleEscape);
                         }
                     };
                     document.addEventListener('keydown', handleEscape);
                 })
                 .catch((error) => {
                     console.error('Error cargando detector QR:', error);
                     updateScanStatus('⚠️ Error cargando detector. Use "Ingreso Manual"', 'error');

                     // Event listeners básicos sin detector QR
                     document.getElementById('startCamera').style.display = 'none';
                     document.getElementById('manualInput').onclick = mostrarIngresoManual;
                     document.getElementById('cancelarEscaneo').onclick = cleanup;

                     // También permitir cerrar
                     overlay.onclick = function(e) {
                         if (e.target === overlay) cleanup();
                     };
                 });
         }

         // Función para procesar el QR escaneado por el guardia - CORREGIDA COMPLETAMENTE
         async function procesarQRPorGuardia(qrContent) {
             try {
                 // Intentar parsear el QR como JSON
                 let qrData;
                 try {
                     qrData = JSON.parse(qrContent);
                 } catch (error) {
                     showNotification('El código QR no tiene un formato válido', 'error');
                     return;
                 }

                 // Validar que tenga los campos necesarios
                 if (!qrData.id || !qrData.nom || !qrData.doc) {
                     showNotification('El código QR no contiene información válida de registro', 'error');
                     return;
                 }

                 showNotification('Código QR detectado, verificando estado...', 'info');

                 // VERIFICACIÓN CRÍTICA: Buscar el registro actual en Firebase
                 const registro = await buscarRegistroPorId(qrData.id);
                 if (!registro) {
                     showNotification('❌ ACCESO DENEGADO: El registro no existe o ha sido eliminado', 'error');
                     return;
                 }

                 // VERIFICACIÓN CRÍTICA: Estado autorizado y activo
                 if (registro.estado !== 'autorizado') {
                     showNotification(`❌ ACCESO DENEGADO: Estado actual "${registro.estado.toUpperCase()}" - Contacte supervisor`, 'error');
                     return;
                 }

                 if (registro.activo !== true) {
                     showNotification('❌ ACCESO DENEGADO: Persona DESVINCULADA - Contacte supervisor', 'error');
                     return;
                 }

                 // VERIFICACIÓN CRÍTICA: Solo trabajadores pueden usar QR
                 if (registro.tipo !== 'trabajador' && registro.tipo !== 'asistencia_trabajador') {
                     showNotification('❌ ACCESO DENEGADO: Este QR no es válido para trabajadores', 'error');
                     return;
                 }

                 // VERIFICACIÓN: Vigencia si tiene fechas configuradas
                 if (registro.fechasVigencia) {
                     const hoy = new Date().toISOString().split('T')[0];
                     if (hoy < registro.fechasVigencia.fechaInicio || hoy > registro.fechasVigencia.fechaFin) {
                         showNotification('❌ ACCESO DENEGADO: Fuera del período de vigencia autorizado', 'error');
                         return;
                     }
                 }

                 // VERIFICACIÓN CRÍTICA: Bloqueos activos
                 const bloqueosActivos = await verificarBloqueosPorDocumento(registro.documento);
                 if (bloqueosActivos.length > 0) {
                     const motivos = bloqueosActivos.map(b => b.motivo === 'otro' ? b.otroMotivo : b.motivo).join(', ');
                     showNotification(`❌ ACCESO DENEGADO: Persona bloqueada - ${motivos}`, 'error');
                     return;
                 }

                 // VERIFICACIÓN: Asistencia del día (no permitir duplicados)
                 const hoy = new Date().toISOString().split('T')[0];
                 const yaMarcoAsistencia = await verificarAsistenciaHoy(registro.documento, hoy);
                 if (yaMarcoAsistencia) {
                     showNotification('⚠️ Esta persona ya marcó asistencia el día de hoy', 'warning');
                     return;
                 }

                 // ✅ TODAS LAS VERIFICACIONES PASARON
                 console.log('✅ Verificaciones pasadas, mostrando modal de asistencia:', registro);

                 // MOSTRAR MODAL PARA REGISTRAR ASISTENCIA DIRECTAMENTE (SIN LLENAR FORMULARIO)
                 mostrarModalConfirmacionPatentesQR(registro);

             } catch (error) {
                 console.error('Error procesando QR:', error);
                 showNotification('❌ Error al procesar el código QR', 'error');
             }
         }

         // Nueva función para modal de confirmación específico para QR
         function mostrarModalConfirmacionLlegadaQR(registro, qrData) {
             const overlay = document.createElement('div');
             overlay.style.cssText = `
                 position: fixed;
                 top: 0;
                 left: 0;
                 width: 100%;
                 height: 100%;
                 background: rgba(0, 0, 0, 0.7);
                 display: flex;
                 justify-content: center;
                 align-items: center;
                 z-index: 1000;
             `;

             const modal = document.createElement('div');
             modal.style.cssText = `
                 background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                 border-radius: var(--border-radius);
                 padding: 40px;
                 max-width: 600px;
                 width: 90%;
                 border: 1px solid rgba(255, 255, 255, 0.2);
                 backdrop-filter: blur(20px);
                 box-shadow: var(--shadow-xl);
             `;

             const patentesRegistradas = registro.patentes || [];
             const llegaAPie = patentesRegistradas.length === 0;

             // Historial de patentes previas
             const patentesHistorial = registro.patentesHistorial || new Set(patentesRegistradas);
             const patentesHistorialArray = Array.from(patentesHistorial);

             modal.innerHTML = `
                 <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                     ✅ Persona Identificada por QR
                 </h3>

                 <div style="background: rgba(34, 197, 94, 0.1); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid rgba(34, 197, 94, 0.3);">
                     <h4 style="color: #22c55e; margin: 0 0 12px 0;">
                         👤 ${registro.nombre}
                     </h4>
                     <p style="color: var(--text-light); margin: 4px 0;">
                         <strong>Documento:</strong> ${registro.documento}
                     </p>
                     <p style="color: var(--text-light); margin: 4px 0;">
                         <strong>Empresa:</strong> ${registro.empresa}
                     </p>
                     ${registro.subContrato ? `
                         <p style="color: var(--text-light); margin: 4px 0;">
                             <strong>Subcontrato:</strong> ${registro.subContrato}
                         </p>
                     ` : ''}
                     <p style="color: var(--text-light); margin: 4px 0;">
                         <strong>Tipo:</strong> ${registro.tipo === 'asistencia_trabajador' ? 'TRABAJADOR' : registro.tipo.toUpperCase()}
                     </p>
                 </div>

                 <div style="margin-bottom: 20px;">
                     <h4 style="color: white; margin-bottom: 12px;">
                         🚗 Información de Vehículo
                     </h4>
                     <p style="color: var(--text-light); font-size: 0.9rem; margin-bottom: 12px;">
                         Patentes registradas: ${llegaAPie ?
                             '<span style="color: #fbbf24;">🚶 A pie</span>' :
                             patentesRegistradas.map(p => `<span style="color: #3b82f6;">${p}</span>`).join(', ')
                         }
                     </p>

                     ${patentesHistorialArray.length > 0 ? `
                         <p style="color: var(--text-light); font-size: 0.8rem; margin-bottom: 12px;">
                             Historial: ${patentesHistorialArray.map(p => `<span style="color: #8b5cf6;">${p}</span>`).join(', ')}
                         </p>
                     ` : ''}

                     <div style="margin-bottom: 16px;">
                         <label style="display: flex; align-items: center; gap: 12px; color: var(--text-light); cursor: pointer; margin-bottom: 12px;">
                             <input type="radio" name="tipoLlegadaQR" value="pie"
                                    style="width: 20px; height: 20px; accent-color: #667eea;">
                             <span>🚶 Llega a pie</span>
                         </label>
                         <label style="display: flex; align-items: center; gap: 12px; color: var(--text-light); cursor: pointer; margin-bottom: 12px;">
                             <input type="radio" name="tipoLlegadaQR" value="misma_patente"
                                    style="width: 20px; height: 20px; accent-color: #667eea;"
                                    ${patentesRegistradas.length > 0 ? '' : 'disabled'}>
                             <span>🚗 Mismo vehículo registrado</span>
                         </label>
                         <label style="display: flex; align-items: center; gap: 12px; color: var(--text-light); cursor: pointer;">
                             <input type="radio" name="tipoLlegadaQR" value="otra_patente"
                                    style="width: 20px; height: 20px; accent-color: #667eea;">
                             <span>🚙 Vehículo diferente</span>
                         </label>
                     </div>

                     <div id="vehiculoContainerQR" style="display: none;">
                         <div style="margin-bottom: 12px;">
                             <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                                 Patente del vehículo:
                             </label>
                             <div style="display: flex; gap: 12px;">
                                 <input type="text" id="nuevaPatenteQR"
                                        style="flex: 1; padding: 12px; border-radius: 8px;
                                               border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                               color: white;" placeholder="AA-BB-11">
                                 ${patentesHistorialArray.length > 0 ? `
                                     <select id="patenteHistorialQR" style="padding: 12px; border-radius: 8px;
                                             border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                             color: white;">
                                         <option value="">Historial</option>
                                         ${patentesHistorialArray.map(p => `<option value="${p}">${p}</option>`).join('')}
                                     </select>
                                 ` : ''}
                             </div>
                         </div>
                     </div>
                 </div>

                 <div style="display: flex; gap: 12px; justify-content: center;">
                     <button id="cancelarQRForm" class="btn-secondary">Cancelar</button>
                     <button id="continuarQRForm" class="btn-primary">Continuar con Registro</button>
                 </div>
             `;

             overlay.appendChild(modal);
             document.body.appendChild(overlay);

             // Event listeners
             const radios = document.querySelectorAll('input[name="tipoLlegadaQR"]');
             const vehiculoContainer = document.getElementById('vehiculoContainerQR');

             radios.forEach(radio => {
                 radio.addEventListener('change', function() {
                     if (this.value === 'otra_patente') {
                         vehiculoContainer.style.display = 'block';
                     } else {
                         vehiculoContainer.style.display = 'none';
                     }
                 });
             });

             // Formateo de patente
             const nuevaPatenteInput = document.getElementById('nuevaPatenteQR');
             if (nuevaPatenteInput) {
                 nuevaPatenteInput.addEventListener('input', function(e) {
                     let patente = e.target.value.toUpperCase();
                     patente = patente.replace(/[^A-Z0-9]/g, '');

                     if (patente.length > 6) {
                         patente = patente.substring(0, 6);
                     }

                     if (patente.length > 4) {
                         patente = patente.substring(0, 4) + '-' + patente.substring(4);
                     } else if (patente.length > 2) {
                         patente = patente.substring(0, 2) + '-' + patente.substring(2);
                     }

                     e.target.value = patente;
                 });
             }

             // Seleccionar del historial
             const patenteHistorialSelect = document.getElementById('patenteHistorialQR');
             if (patenteHistorialSelect) {
                 patenteHistorialSelect.addEventListener('change', function() {
                     if (this.value && nuevaPatenteInput) {
                         nuevaPatenteInput.value = this.value;
                     }
                 });
             }

             document.getElementById('cancelarQRForm').onclick = () => {
                 document.body.removeChild(overlay);
                 limpiarRegistro();
             };

             document.getElementById('continuarQRForm').onclick = () => {
                 const tipoLlegada = document.querySelector('input[name="tipoLlegadaQR"]:checked');

                 if (!tipoLlegada) {
                     showNotification('Debe seleccionar cómo llega la persona', 'error');
                     return;
                 }

                 let patentesFinales = [];

                 if (tipoLlegada.value === 'pie') {
                     patentesFinales = []; // Sin patentes
                 } else if (tipoLlegada.value === 'misma_patente') {
                     patentesFinales = [...patentesRegistradas]; // Usar las mismas patentes
                 } else if (tipoLlegada.value === 'otra_patente') {
                     const nuevaPatente = nuevaPatenteInput ? nuevaPatenteInput.value.trim().toUpperCase() : '';
                     if (!nuevaPatente) {
                         showNotification('Debe ingresar la patente del vehículo', 'error');
                         return;
                     }
                     patentesFinales = [nuevaPatente];
                 }

                 // Cerrar modal
                 document.body.removeChild(overlay);

                 // Configurar las patentes en el formulario
                 patentesActuales = [...patentesFinales];
                 renderPatentes();
                 updateLlegaPieMessage();

                 // Configurar el botón según el tipo
                 if (registro.tipo === 'trabajador' || registro.tipo === 'asistencia_trabajador') {
                     actualizarBotonGuardia('trabajador');
                 } else {
                     actualizarBotonGuardia(registro.tipo);
                 }

                 showNotification(`Datos cargados desde QR: ${registro.nombre} - Complete el formulario`, 'success');
             };

             // Cerrar con ESC
             const handleKeyPress = (e) => {
                 if (e.key === 'Escape') {
                     document.body.removeChild(overlay);
                     document.removeEventListener('keydown', handleKeyPress);
                     limpiarRegistro();
                 }
             };
             document.addEventListener('keydown', handleKeyPress);
         }

          // Función para buscar registro por ID
          async function buscarRegistroPorId(registroId) {
              try {
                  const docRef = doc(db, 'registros', registroId);
                  const docSnap = await getDoc(docRef);

                  if (docSnap.exists()) {
                      return { id: docSnap.id, ...docSnap.data() };
                  }
                  return null;
              } catch (error) {
                  console.error('Error buscando registro:', error);
                  return null;
              }
          }

          // Modal para confirmar llegada y modificar patentes
          function mostrarModalConfirmacionLlegada(registro, qrData) {
              const overlay = document.createElement('div');
              overlay.style.cssText = `
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background: rgba(0, 0, 0, 0.7);
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  z-index: 1000;
              `;

              const modal = document.createElement('div');
              modal.style.cssText = `
                  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                  border-radius: var(--border-radius);
                  padding: 40px;
                  max-width: 600px;
                  width: 90%;
                  border: 1px solid rgba(255, 255, 255, 0.2);
                  backdrop-filter: blur(20px);
                  box-shadow: var(--shadow-xl);
              `;

              const patentesRegistradas = registro.patentes || [];
              const llegaAPie = patentesRegistradas.length === 0;

              // Historial de patentes previas
              const patentesHistorial = registro.patentesHistorial || new Set(patentesRegistradas);
              const patentesHistorialArray = Array.from(patentesHistorial);

              modal.innerHTML = `
                  <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                      ✅ Confirmación de Llegada
                  </h3>

                  <div style="background: rgba(34, 197, 94, 0.1); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid rgba(34, 197, 94, 0.3);">
                      <h4 style="color: #22c55e; margin: 0 0 12px 0;">
                          👤 ${registro.nombre}
                      </h4>
                      <p style="color: var(--text-light); margin: 4px 0;">
                          <strong>Documento:</strong> ${registro.documento}
                      </p>
                      <p style="color: var(--text-light); margin: 4px 0;">
                          <strong>Empresa:</strong> ${registro.empresa}
                      </p>
                      ${registro.subContrato ? `
                          <p style="color: var(--text-light); margin: 4px 0;">
                              <strong>Subcontrato:</strong> ${registro.subContrato}
                          </p>
                      ` : ''}
                      <p style="color: var(--text-light); margin: 4px 0;">
                          <strong>Tipo:</strong> ${registro.tipo.toUpperCase()}
                      </p>
                  </div>

                  <div style="margin-bottom: 20px;">
                      <h4 style="color: white; margin-bottom: 12px;">
                          🚗 Información de Vehículo
                      </h4>
                      <p style="color: var(--text-light); font-size: 0.9rem; margin-bottom: 12px;">
                          Patentes registradas originalmente: ${llegaAPie ?
                              '<span style="color: #fbbf24;">🚶 A pie</span>' :
                              patentesRegistradas.map(p => `<span style="color: #3b82f6;">${p}</span>`).join(', ')
                          }
                      </p>

                      ${patentesHistorialArray.length > 0 ? `
                          <p style="color: var(--text-light); font-size: 0.8rem; margin-bottom: 12px;">
                              Historial de patentes: ${patentesHistorialArray.map(p => `<span style="color: #8b5cf6;">${p}</span>`).join(', ')}
                          </p>
                      ` : ''}

                      <div style="margin-bottom: 16px;">
                          <label style="display: flex; align-items: center; gap: 12px; color: var(--text-light); cursor: pointer; margin-bottom: 12px;">
                              <input type="radio" name="tipoLlegada" value="pie"
                                     style="width: 20px; height: 20px; accent-color: #667eea;">
                              <span>🚶 Llega a pie</span>
                          </label>
                          <label style="display: flex; align-items: center; gap: 12px; color: var(--text-light); cursor: pointer;">
                              <input type="radio" name="tipoLlegada" value="vehiculo"
                                     style="width: 20px; height: 20px; accent-color: #667eea;">
                              <span>🚗 Llega en vehículo</span>
                          </label>
                      </div>

                      <div id="vehiculoContainer" style="display: none;">
                          <div style="margin-bottom: 12px;">
                              <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                                  Patente del vehículo:
                              </label>
                              <div style="display: flex; gap: 12px;">
                                  <input type="text" id="nuevaPatenteLlegada"
                                         style="flex: 1; padding: 12px; border-radius: 8px;
                                                border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                                color: white;" placeholder="AA-BB-11">
                                  ${patentesHistorialArray.length > 0 ? `
                                      <select id="patenteHistorial" style="padding: 12px; border-radius: 8px;
                                              border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                              color: white;">
                                          <option value="">Seleccionar del historial</option>
                                          ${patentesHistorialArray.map(p => `<option value="${p}">${p}</option>`).join('')}
                                      </select>
                                  ` : ''}
                              </div>
                              <p style="color: rgba(255,255,255,0.6); font-size: 0.8rem; margin-top: 8px;">
                                  Puede escribir una nueva patente o seleccionar del historial
                              </p>
                          </div>
                      </div>
                  </div>

                  <div style="display: flex; gap: 12px; justify-content: center;">
                      <button id="cancelarLlegada" class="btn-secondary">Cancelar</button>
                      <button id="confirmarLlegada" class="btn-primary">Confirmar Llegada</button>
                  </div>
              `;

              overlay.appendChild(modal);
              document.body.appendChild(overlay);

              // Event listeners
              const radios = document.querySelectorAll('input[name="tipoLlegada"]');
              const vehiculoContainer = document.getElementById('vehiculoContainer');

              radios.forEach(radio => {
                  radio.addEventListener('change', function() {
                      if (this.value === 'vehiculo') {
                          vehiculoContainer.style.display = 'block';
                      } else {
                          vehiculoContainer.style.display = 'none';
                      }
                  });
              });

              // Formateo de patente
              const nuevaPatenteInput = document.getElementById('nuevaPatenteLlegada');
              if (nuevaPatenteInput) {
                  nuevaPatenteInput.addEventListener('input', function(e) {
                      let patente = e.target.value.toUpperCase();
                      patente = patente.replace(/[^A-Z0-9]/g, '');

                      if (patente.length > 6) {
                          patente = patente.substring(0, 6);
                      }

                      if (patente.length > 4) {
                          patente = patente.substring(0, 4) + '-' + patente.substring(4);
                      } else if (patente.length > 2) {
                          patente = patente.substring(0, 2) + '-' + patente.substring(2);
                      }

                      e.target.value = patente;
                  });
              }

              // Seleccionar del historial
              const patenteHistorialSelect = document.getElementById('patenteHistorial');
              if (patenteHistorialSelect) {
                  patenteHistorialSelect.addEventListener('change', function() {
                      if (this.value && nuevaPatenteInput) {
                          nuevaPatenteInput.value = this.value;
                      }
                  });
              }

              document.getElementById('cancelarLlegada').onclick = () => {
                  document.body.removeChild(overlay);
              };

              document.getElementById('confirmarLlegada').onclick = async () => {
                  const tipoLlegada = document.querySelector('input[name="tipoLlegada"]:checked');

                  if (!tipoLlegada) {
                      showNotification('Debe seleccionar cómo llega la persona', 'error');
                      return;
                  }

                  let patenteActual = null;

                  if (tipoLlegada.value === 'vehiculo') {
                      patenteActual = nuevaPatenteInput ? nuevaPatenteInput.value.trim().toUpperCase() : '';

                      if (!patenteActual) {
                          showNotification('Debe ingresar la patente del vehículo', 'error');
                          return;
                      }
                  }

                  try {
                      await registrarLlegadaConPatente(registro, patenteActual);
                      document.body.removeChild(overlay);
                  } catch (error) {
                      console.error('Error registrando llegada:', error);
                      showNotification('Error al registrar la llegada', 'error');
                  }
              };

              // Cerrar con ESC
              const handleKeyPress = (e) => {
                  if (e.key === 'Escape') {
                      document.body.removeChild(overlay);
                      document.removeEventListener('keydown', handleKeyPress);
                  }
              };
              document.addEventListener('keydown', handleKeyPress);
          }

          // Función para registrar la llegada con la patente actual
          async function registrarLlegadaConPatente(registro, patenteActual) {
              try {
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                  const ahora = new Date();

                  // Crear registro de llegada
                  const registroLlegada = {
                      registroOriginalId: registro.id,
                      documentoPersona: registro.documento,
                      nombrePersona: registro.nombre,
                      empresaPersona: registro.empresa,
                      subcontratoPersona: registro.subContrato || null,
                      tipoPersona: registro.tipo,
                      patenteOriginal: registro.patentes || [],
                      patenteActual: patenteActual ? [patenteActual] : [],
                      llegaAPie: !patenteActual,
                      fechaLlegada: ahora.toISOString().split('T')[0],
                      horaLlegada: ahora.toLocaleTimeString(),
                      registradoPorGuardia: userName,
                      timestamp: ahora.toISOString()
                  };

                  // Guardar registro de llegada
                  await addDoc(collection(db, 'llegadas'), registroLlegada);

                  // Actualizar historial de patentes en el registro original si es necesario
                  let actualizacionRegistro = {};

                  if (patenteActual) {
                      const patentesHistorial = new Set(registro.patentesHistorial || registro.patentes || []);
                      patentesHistorial.add(patenteActual);

                      actualizacionRegistro.patentesHistorial = Array.from(patentesHistorial);
                      actualizacionRegistro.ultimaLlegada = {
                          fecha: ahora.toISOString().split('T')[0],
                          hora: ahora.toLocaleTimeString(),
                          patente: patenteActual,
                          guardia: userName
                      };
                  } else {
                      actualizacionRegistro.ultimaLlegada = {
                          fecha: ahora.toISOString().split('T')[0],
                          hora: ahora.toLocaleTimeString(),
                          patente: null,
                          llegaAPie: true,
                          guardia: userName
                      };
                  }

                  // Actualizar registro original
                  await actualizarRegistro(registro.id, actualizacionRegistro);

                  // Mensaje de confirmación
                  const mensaje = patenteActual ?
                      `✅ Llegada registrada: ${registro.nombre} en vehículo ${patenteActual}` :
                      `✅ Llegada registrada: ${registro.nombre} a pie`;

                  showNotification(mensaje, 'success');

                  // Log para el administrador
                  console.log('Llegada registrada:', {
                      persona: registro.nombre,
                      documento: registro.documento,
                      patenteOriginal: registro.patentes,
                      patenteActual: patenteActual,
                      fecha: ahora.toISOString().split('T')[0],
                      hora: ahora.toLocaleTimeString(),
                      guardia: userName
                  });

              } catch (error) {
                  console.error('Error registrando llegada:', error);
                  throw error;
              }
          }

          // Nueva función para mostrar botón de escáner QR en el header del guardia
          function mostrarBotonEscanerGuardia() {
              if (userRole !== 'guardia') return;

              // Buscar si ya existe el botón
              let botonExistente = document.getElementById('botonEscanerQR');
              if (botonExistente) return;

              // Crear botón de escáner
              const botonEscaner = document.createElement('button');
              botonEscaner.id = 'botonEscanerQR';
              botonEscaner.className = 'neo-btn';
              botonEscaner.style.cssText = `
                  background: linear-gradient(135deg, #16a34a 0%, #059669 100%);
                  margin-left: 15px;
                  padding: 12px 20px;
                  font-size: 0.9rem;
                  border-radius: 12px;
                  box-shadow: 0 6px 16px rgba(22, 163, 74, 0.3);
                  transition: all 0.3s ease;
                  position: relative;
                  overflow: hidden;
              `;
              botonEscaner.innerHTML = '<span>📷 Escanear QR</span>';
              botonEscaner.onclick = () => escanearQRGuardia();

              // Agregar efectos hover
              botonEscaner.addEventListener('mouseenter', function() {
                  this.style.transform = 'translateY(-2px)';
                  this.style.boxShadow = '0 8px 20px rgba(22, 163, 74, 0.4)';
              });

              botonEscaner.addEventListener('mouseleave', function() {
                  this.style.transform = 'translateY(0)';
                  this.style.boxShadow = '0 6px 16px rgba(22, 163, 74, 0.3)';
              });

              // Insertar en el header del usuario
              const userInfo = document.querySelector('.user-info');
              if (userInfo) {
                  userInfo.insertAdjacentElement('beforebegin', botonEscaner);
              }
          }

          // Función para ocultar el botón cuando no es guardia
          function ocultarBotonEscanerGuardia() {
              const botonExistente = document.getElementById('botonEscanerQR');
              if (botonExistente) {
                  botonExistente.remove();
              }
          }


          // Filtrar opciones de rol según el usuario actual
          function filtrarOpcionesRol() {
              const tipoRolSelect = document.getElementById('tipoRol');
              const optionsHTML = tipoRolSelect.innerHTML;

              // Guardar las opciones originales si no están guardadas
              if (!tipoRolSelect.dataset.originalOptions) {
                  tipoRolSelect.dataset.originalOptions = optionsHTML;
              }

              // Restaurar opciones originales
              tipoRolSelect.innerHTML = tipoRolSelect.dataset.originalOptions;

              // Filtrar según el rol del usuario actual
              const todasLasOpciones = tipoRolSelect.querySelectorAll('option');

              if (userRole === 'autorizador') {
                  // Autorizadores pueden crear: autorizador, registrador, sub-registrador
                  todasLasOpciones.forEach(option => {
                      const value = option.value;
                      if (value && !['autorizador', 'registrador', 'sub-registrador'].includes(value)) {
                          option.remove();
                      }
                  });
              } else if (userRole === 'registrador') {
                  // Registradores solo pueden crear: sub-registrador
                  todasLasOpciones.forEach(option => {
                      const value = option.value;
                      if (value && value !== 'sub-registrador') {
                          option.remove();
                      }
                  });
              } else if (userRole === 'sub-registrador') {
                  // Sub-registradores no pueden crear usuarios (deshabilitar todo)
                  todasLasOpciones.forEach(option => {
                      const value = option.value;
                      if (value) {
                          option.remove();
                      }
                  });

                  // Agregar mensaje informativo
                  const optionMensaje = document.createElement('option');
                  optionMensaje.value = '';
                  optionMensaje.textContent = 'No tienes permisos para crear usuarios';
                  optionMensaje.disabled = true;
                  tipoRolSelect.appendChild(optionMensaje);
              }
              // Para administradores, mantener todas las opciones
          }


          function mostrarModalConfirmacionPatentesQR(registro) {
              const overlay = document.createElement('div');
              overlay.style.cssText = `
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background: rgba(0, 0, 0, 0.7);
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  z-index: 1000;
              `;

              const modal = document.createElement('div');
              modal.style.cssText = `
                  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                  border-radius: var(--border-radius);
                  padding: 40px;
                  max-width: 650px;
                  width: 90%;
                  border: 1px solid rgba(255, 255, 255, 0.2);
                  backdrop-filter: blur(20px);
                  box-shadow: var(--shadow-xl);
                  max-height: 90vh;
                  overflow-y: auto;
              `;

              const patentesRegistradas = registro.patentes || [];
              const patentesHistorial = registro.patentesHistorial || new Set(patentesRegistradas);
              const todasLasPatentes = Array.from(new Set([...patentesRegistradas, ...Array.from(patentesHistorial)]));

              // Generar botones de patentes
              let patentesHTML = '';
              if (todasLasPatentes.length > 0) {
                  patentesHTML = `
                      <div style="margin-bottom: 20px;">
                          <h4 style="color: white; margin-bottom: 12px; font-size: 1rem;">
                              🚗 Patentes Registradas
                          </h4>
                          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px; margin-bottom: 16px;">
                              ${todasLasPatentes.map(patente => `
                                  <button type="button" class="patente-btn" data-patente="${patente}"
                                          style="padding: 12px; border-radius: 8px; border: 2px solid rgba(59, 130, 246, 0.3);
                                                 background: rgba(59, 130, 246, 0.1); color: #60a5fa; font-weight: bold;
                                                 cursor: pointer; transition: all 0.3s ease; font-size: 0.9rem;">
                                      ${patente}
                                  </button>
                              `).join('')}
                          </div>
                      </div>
                  `;
              }

              modal.innerHTML = `
                  <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                      ✅ Registrar Asistencia
                  </h3>

                  <div style="background: rgba(34, 197, 94, 0.1); padding: 20px; border-radius: 12px; margin-bottom: 20px; border: 1px solid rgba(34, 197, 94, 0.3);">
                      <h4 style="color: #22c55e; margin: 0 0 12px 0;">
                          👤 ${registro.nombre}
                      </h4>
                      <p style="color: var(--text-light); margin: 4px 0;">
                          <strong>Documento:</strong> ${registro.documento}
                      </p>
                      <p style="color: var(--text-light); margin: 4px 0;">
                          <strong>Empresa:</strong> ${registro.empresa}
                      </p>
                      ${registro.subContrato ? `
                          <p style="color: var(--text-light); margin: 4px 0;">
                              <strong>Subcontrato:</strong> ${registro.subContrato}
                          </p>
                      ` : ''}
                      <p style="color: #22c55e; margin: 8px 0; font-weight: bold;">
                          ✅ AUTORIZADO PARA ASISTENCIA
                      </p>
                  </div>

                  <div style="margin-bottom: 20px;">
                      <h4 style="color: white; margin-bottom: 16px;">
                          🚗 ¿Cómo llega hoy?
                      </h4>

                      <!-- Botón Llega a Pie -->
                      <div style="margin-bottom: 16px;">
                          <button type="button" id="llegaPieBtn" class="opcion-llegada-btn"
                                  style="width: 100%; padding: 16px; border-radius: 12px; border: 2px solid rgba(245, 158, 11, 0.3);
                                         background: rgba(245, 158, 11, 0.1); color: #fbbf24; font-weight: bold;
                                         cursor: pointer; transition: all 0.3s ease; font-size: 1rem;">
                              🚶 Llega a Pie
                          </button>
                      </div>

                      ${patentesHTML}

                      <!-- Sección Nueva Patente -->
                      <div style="margin-bottom: 16px;">
                          <h4 style="color: white; margin-bottom: 12px; font-size: 1rem;">
                              🚙 Nueva Patente
                          </h4>
                          <div style="display: flex; gap: 8px; align-items: stretch; flex-wrap: nowrap;">
                              <input type="text" id="nuevaPatenteQR"
                                     style="flex: 1; min-width: 0; padding: 12px; border-radius: 8px;
                                            border: 2px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                            color: white; font-size: 1rem;" placeholder="AA-BB-11">
                              <button type="button" id="usarNuevaPatenteBtn"
                                      style="flex-shrink: 0; padding: 12px 16px; border-radius: 8px; border: 2px solid rgba(34, 197, 94, 0.3);
                                             background: rgba(34, 197, 94, 0.1); color: #22c55e; font-weight: bold;
                                             cursor: pointer; transition: all 0.3s ease; font-size: 0.9rem; white-space: nowrap;">
                                  ✅ Usar
                              </button>
                          </div>
                      </div>

                      <!-- Alerta de patente bloqueada -->
                      <div id="alertaBloqueoPatente" style="display: none; background: rgba(239, 68, 68, 0.1); border: 2px solid rgba(239, 68, 68, 0.3); padding: 16px; border-radius: 12px; margin-top: 16px;">
                          <p style="color: #ef4444; margin: 0; font-size: 1rem; font-weight: bold;">
                              🚫 PATENTE BLOQUEADA
                          </p>
                          <p id="motivoBloqueoPatente" style="color: #ef4444; margin: 8px 0 0 0; font-size: 0.9rem;"></p>
                      </div>

                      <!-- Selección actual -->
                      <div id="seleccionActual" style="display: none; background: rgba(34, 197, 94, 0.1); border: 2px solid rgba(34, 197, 94, 0.3); padding: 16px; border-radius: 12px; margin-top: 16px;">
                          <p style="color: #22c55e; margin: 0; font-size: 1rem; font-weight: bold;">
                              ✅ SELECCIONADO: <span id="textoSeleccion"></span>
                          </p>
                      </div>
                  </div>

                  <div style="display: flex; gap: 12px; justify-content: center; margin-top: 24px;">
                      <button id="cancelarQRForm" class="btn-secondary">Cancelar</button>
                      <button id="registrarAsistenciaQR" class="btn-primary" disabled
                              style="background: linear-gradient(135deg, #22c55e 0%, #059669 100%); opacity: 0.5;">
                          ✅ Registrar Asistencia
                      </button>
                  </div>
              `;

              overlay.appendChild(modal);
              document.body.appendChild(overlay);

              // Variables de control
              let seleccionActual = null;
              let tipoSeleccion = null; // 'pie', 'patente'
              let patenteValida = true;

              // Elementos
              const llegaPieBtn = document.getElementById('llegaPieBtn');
              const nuevaPatenteInput = document.getElementById('nuevaPatenteQR');
              const usarNuevaPatenteBtn = document.getElementById('usarNuevaPatenteBtn');
              const registrarBtn = document.getElementById('registrarAsistenciaQR');
              const seleccionDiv = document.getElementById('seleccionActual');
              const textoSeleccion = document.getElementById('textoSeleccion');
              const alertaBloqueo = document.getElementById('alertaBloqueoPatente');

              // Función para actualizar selección
              function actualizarSeleccion(tipo, valor) {
                  // Limpiar estilos anteriores
                  document.querySelectorAll('.opcion-llegada-btn, .patente-btn').forEach(btn => {
                      btn.style.border = btn.classList.contains('opcion-llegada-btn') ?
                          '2px solid rgba(245, 158, 11, 0.3)' : '2px solid rgba(59, 130, 246, 0.3)';
                      btn.style.background = btn.classList.contains('opcion-llegada-btn') ?
                          'rgba(245, 158, 11, 0.1)' : 'rgba(59, 130, 246, 0.1)';
                  });

                  // Resaltar selección actual
                  const elementoSeleccionado = tipo === 'pie' ? llegaPieBtn :
                      document.querySelector(`[data-patente="${valor}"]`);

                  if (elementoSeleccionado) {
                      elementoSeleccionado.style.border = '2px solid #22c55e';
                      elementoSeleccionado.style.background = 'rgba(34, 197, 94, 0.2)';
                  }

                  // Actualizar variables
                  seleccionActual = valor;
                  tipoSeleccion = tipo;

                  // Mostrar selección
                  seleccionDiv.style.display = 'block';
                  textoSeleccion.textContent = tipo === 'pie' ? 'Llega a Pie' : `Vehículo ${valor}`;

                  // Habilitar botón si es válido
                  if (tipo === 'pie' || patenteValida) {
                      registrarBtn.disabled = false;
                      registrarBtn.style.opacity = '1';
                  }

                  // Ocultar alerta si selecciona pie
                  if (tipo === 'pie') {
                      alertaBloqueo.style.display = 'none';
                  }
              }

              // Event listeners
              llegaPieBtn.onclick = () => {
                  actualizarSeleccion('pie', null);
                  alertaBloqueo.style.display = 'none';
                  patenteValida = true;
              };

              // Botones de patentes registradas
              document.querySelectorAll('.patente-btn').forEach(btn => {
                  btn.onclick = async () => {
                      const patente = btn.dataset.patente;

                      // Verificar bloqueos
                      const bloqueos = await verificarBloqueosPorPatente(patente);
                      if (bloqueos.length > 0) {
                          const motivos = bloqueos.map(b => b.motivo === 'otro' ? b.otroMotivo : b.motivo).join(', ');
                          document.getElementById('motivoBloqueoPatente').textContent = `Motivo: ${motivos}`;
                          alertaBloqueo.style.display = 'block';
                          patenteValida = false;
                          registrarBtn.disabled = true;
                          registrarBtn.style.opacity = '0.5';
                          seleccionDiv.style.display = 'none';
                      } else {
                          patenteValida = true;
                          alertaBloqueo.style.display = 'none';
                          actualizarSeleccion('patente', patente);
                      }
                  };
              });

              // Formateo de nueva patente
              nuevaPatenteInput.addEventListener('input', function(e) {
                  let patente = e.target.value.toUpperCase();
                  patente = patente.replace(/[^A-Z0-9]/g, '');

                  if (patente.length > 6) {
                      patente = patente.substring(0, 6);
                  }

                  if (patente.length > 4) {
                      patente = patente.substring(0, 4) + '-' + patente.substring(4);
                  } else if (patente.length > 2) {
                      patente = patente.substring(0, 2) + '-' + patente.substring(2);
                  }

                  e.target.value = patente;
              });

              // Usar nueva patente
              usarNuevaPatenteBtn.onclick = async () => {
                  const patente = nuevaPatenteInput.value.trim().toUpperCase();

                  if (!patente || patente.length < 6) {
                      showNotification('Ingrese una patente válida', 'error');
                      return;
                  }

                  // Verificar bloqueos
                  const bloqueos = await verificarBloqueosPorPatente(patente);
                  if (bloqueos.length > 0) {
                      const motivos = bloqueos.map(b => b.motivo === 'otro' ? b.otroMotivo : b.motivo).join(', ');
                      document.getElementById('motivoBloqueoPatente').textContent = `Motivo: ${motivos}`;
                      alertaBloqueo.style.display = 'block';
                      patenteValida = false;
                      registrarBtn.disabled = true;
                      registrarBtn.style.opacity = '0.5';
                      seleccionDiv.style.display = 'none';
                  } else {
                      patenteValida = true;
                      alertaBloqueo.style.display = 'none';
                      actualizarSeleccion('patente', patente);
                      nuevaPatenteInput.value = ''; // Limpiar campo
                  }
              };

              // Permitir usar Enter en nueva patente
              nuevaPatenteInput.addEventListener('keypress', (e) => {
                  if (e.key === 'Enter') {
                      usarNuevaPatenteBtn.click();
                  }
              });

              document.getElementById('cancelarQRForm').onclick = () => {
                  document.body.removeChild(overlay);
              };

              // FUNCIÓN PRINCIPAL: REGISTRAR ASISTENCIA DIRECTAMENTE
              document.getElementById('registrarAsistenciaQR').onclick = async () => {
                  if (!seleccionActual && tipoSeleccion !== 'pie') {
                      showNotification('Debe seleccionar cómo llega la persona', 'error');
                      return;
                  }

                  if (tipoSeleccion === 'patente' && !patenteValida) {
                      showNotification('No se puede registrar con patente bloqueada', 'error');
                      return;
                  }

                  try {
                      // Deshabilitar botón mientras procesa
                      registrarBtn.disabled = true;
                      registrarBtn.innerHTML = '⏳ Registrando...';

                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                      const ahora = new Date();

                      // Determinar patentes
                      const patentesAsistencia = tipoSeleccion === 'pie' ? [] : [seleccionActual];

                      // CREAR REGISTRO DE ASISTENCIA DIRECTAMENTE
                      const registroAsistencia = {
                          documento: registro.documento,
                          esDocumentoExtranjero: registro.esDocumentoExtranjero || false,
                          nombre: registro.nombre,
                          empresa: registro.empresa,
                          subContrato: registro.subContrato || null,
                          tipo: 'asistencia_trabajador',
                          patentes: patentesAsistencia,
                          acompañantes: [],
                          cantidadAcompañantes: 0,
                          estado: 'autorizado',
                          activo: true,
                          registradoPor: userName,
                          registradoPorRol: userRole,
                          autorizadoPor: userName,
                          fecha: ahora.toISOString().split('T')[0],
                          hora: ahora.toLocaleTimeString(),
                          timestamp: ahora.toISOString(),
                          registradoPorQR: true,
                          registroOriginalId: registro.id
                      };

                      // GUARDAR EN FIREBASE
                      const docId = await guardarRegistro(registroAsistencia);
                      registroAsistencia.id = docId;

                      // ACTUALIZAR HISTORIAL DE PATENTES EN REGISTRO ORIGINAL
                      if (patentesAsistencia.length > 0) {
                          const patentesHistorialActualizado = new Set(registro.patentesHistorial || registro.patentes || []);
                          patentesAsistencia.forEach(patente => patentesHistorialActualizado.add(patente));

                          const datosActualizacionOriginal = {
                              patentesHistorial: Array.from(patentesHistorialActualizado),
                              ultimaAsistencia: {
                                  fecha: ahora.toISOString().split('T')[0],
                                  hora: ahora.toLocaleTimeString(),
                                  patentes: patentesAsistencia,
                                  guardia: userName
                              }
                          };

                          await actualizarRegistro(registro.id, datosActualizacionOriginal);
                      }

                      // ACTUALIZAR ARRAYS EN MEMORIA
                      registros.push(registroAsistencia);

                      // Si estamos en el tab de registros, actualizar vista
                      const tabRegistrarActivo = document.getElementById('registrar')?.classList.contains('active');
                      if (tabRegistrarActivo) {
                          renderRegistros();
                      }

                      // Cerrar modal
                      document.body.removeChild(overlay);

                      // MENSAJE DE ÉXITO Y PREPARAR PARA SIGUIENTE ESCANEO
                      const llegadaTexto = patentesAsistencia.length > 0 ?
                          `en vehículo ${patentesAsistencia.join(', ')}` : 'a pie';

                      showNotification(`✅ Asistencia registrada: ${registro.nombre} ${llegadaTexto}`, 'success');

                      // ABRIR AUTOMÁTICAMENTE EL ESCÁNER PARA EL SIGUIENTE
                      setTimeout(() => {
                          escanearQRGuardia();
                      }, 1500);

                  } catch (error) {
                      console.error('Error registrando asistencia:', error);
                      showNotification('❌ Error al registrar asistencia', 'error');

                      // Rehabilitar botón en caso de error
                      registrarBtn.disabled = false;
                      registrarBtn.innerHTML = '✅ Registrar Asistencia';
                  }
              };

              // Cerrar con ESC
              const handleKeyPress = (e) => {
                  if (e.key === 'Escape') {
                      document.body.removeChild(overlay);
                      document.removeEventListener('keydown', handleKeyPress);
                  }
              };
              document.addEventListener('keydown', handleKeyPress);
          }

          // Función específica para editar proveedores/visitas desde asistencias del guardia
          function editarProveedorVisitaGuardiaAsistencias(registroId) {
              if (userRole !== 'guardia') {
                  showNotification('Solo los guardias pueden editar desde esta vista', 'error');
                  return;
              }

              // Buscar el registro en asistencias
              let registro = asistenciasOriginales.find(r => r.id === registroId);
              if (!registro) {
                  registro = registros.find(r => r.id === registroId);
              }
              if (!registro) {
                  registro = registrosOriginales.find(r => r.id === registroId);
              }

              if (!registro) {
                  showNotification('Registro no encontrado', 'error');
                  return;
              }

              if (registro.tipo !== 'proveedor' && registro.tipo !== 'visita') {
                  showNotification('Esta función solo está disponible para proveedores y visitas', 'error');
                  return;
              }

              // Verificar que sea el guardia que lo registró
              const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
              if (registro.registradoPor !== userName) {
                  showNotification('Solo puedes editar registros que tú creaste', 'error');
                  return;
              }

              // MARCAR COMO EDICIÓN DESDE ASISTENCIAS
              window.editandoDesdeAsistencias = true;
              window.tipoOriginalRegistro = registro.tipo;
              editandoRegistro = registroId;

              // Llenar formulario completo
              document.getElementById('esDocumentoExtranjero').checked = registro.esDocumentoExtranjero || false;
              toggleDocumentoExtranjero();

              document.getElementById('documento').value = registro.documento;
              document.getElementById('nombreRegistro').value = registro.nombre;
              document.getElementById('empresaRegistro').value = registro.empresa;
              document.getElementById('subContrato').value = registro.subContrato || '';
              document.getElementById('tipoPersona').value = registro.tipo;

              if (registro.empresaProveedora) {
                  document.getElementById('empresaProveedora').value = registro.empresaProveedora;
              }
              if (registro.numeroGuia) {
                  document.getElementById('numeroGuia').value = registro.numeroGuia;
              }

              // CARGAR ACOMPAÑANTES SI LOS HAY
              if (registro.acompañantes && registro.acompañantes.length > 0) {
                  document.getElementById('acompañantesGroup').style.display = 'block';
                  document.getElementById('cantidadAcompañantes').value = registro.acompañantes.length;
                  generarCamposAcompañantes();

                  setTimeout(() => {
                      registro.acompañantes.forEach((acomp, index) => {
                          const numero = index + 1;
                          const docInput = document.getElementById(`documentoAcomp${numero}`);
                          const nombreInput = document.getElementById(`nombreAcomp${numero}`);
                          const checkboxExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`);

                          if (checkboxExtranjero) {
                              checkboxExtranjero.checked = acomp.esDocumentoExtranjero || false;
                              toggleDocumentoExtranjeroAcompañante(numero);
                          }
                          if (docInput) docInput.value = acomp.documento;
                          if (nombreInput) nombreInput.value = acomp.nombre;
                      });
                  }, 100);
              } else {
                  document.getElementById('cantidadAcompañantes').value = '';
                  document.getElementById('acompañantesContainer').style.display = 'none';
              }

              patentesActuales = registro.patentes || [];
              renderPatentes();
              updateLlegaPieMessage();
              toggleProveedorFields();

              // Cambiar al tab de registro
              showTab('registrar');

              // Cambiar botón
              setTimeout(() => {
                  const submitBtn = document.querySelector('#registroForm button[type="submit"]');
                  if (submitBtn) {
                      submitBtn.innerHTML = '<span>✏️ Actualizar Registro</span>';
                      submitBtn.className = 'btn-primary';
                      submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100())';
                      submitBtn.style.boxShadow = '0 8px 20px rgba(245, 158, 11, 0.3)';
                      submitBtn.disabled = false;
                  }
              }, 200);

              const tipoTexto = registro.tipo === 'proveedor' ? 'proveedor' : 'visita';
              showNotification(`Editando ${tipoTexto}: ${registro.nombre} desde asistencias`, 'info');
          }

          // Función para eliminar proveedor/visita con motivo desde asistencias del guardia
          function eliminarProveedorVisitaGuardiaAsistencias(registroId) {
              if (userRole !== 'guardia') {
                  showNotification('Solo los guardias pueden eliminar desde esta vista', 'error');
                  return;
              }

              // Buscar el registro
              let registro = asistenciasOriginales.find(r => r.id === registroId);
              if (!registro) {
                  registro = registros.find(r => r.id === registroId);
              }
              if (!registro) {
                  registro = registrosOriginales.find(r => r.id === registroId);
              }

              if (!registro) {
                  showNotification('Registro no encontrado', 'error');
                  return;
              }

              // Verificar que sea el guardia que lo registró
              const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
              if (registro.registradoPor !== userName) {
                  showNotification('Solo puedes eliminar registros que tú creaste', 'error');
                  return;
              }

              // Mostrar modal para eliminar con motivo
              mostrarModalEliminarConMotivoAsistencias(registro);
          }

          // Modal para eliminar con motivo desde asistencias
          function mostrarModalEliminarConMotivoAsistencias(registro) {
              const overlay = document.createElement('div');
              overlay.style.cssText = `
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background: rgba(0, 0, 0, 0.7);
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  z-index: 1000;
              `;

              const modal = document.createElement('div');
              modal.style.cssText = `
                  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                  border-radius: var(--border-radius);
                  padding: 40px;
                  max-width: 500px;
                  width: 90%;
                  border: 1px solid rgba(255, 255, 255, 0.2);
                  backdrop-filter: blur(20px);
                  box-shadow: var(--shadow-xl);
              `;

              modal.innerHTML = `
                  <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                      🗑️ Eliminar ${registro.tipo === 'proveedor' ? 'Proveedor' : 'Visita'}
                  </h3>
                  <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                      <strong>${registro.nombre}</strong><br>
                      ${registro.tipo.toUpperCase()} - ${registro.empresa}<br>
                      Fecha: ${registro.fecha} - Hora: ${registro.hora}
                  </p>
                  <div style="margin-bottom: 20px;">
                      <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                          Motivo de eliminación *
                      </label>
                      <textarea id="motivoEliminacionAsistencias"
                               style="width: 100%; height: 100px; padding: 12px; border-radius: 8px;
                                      border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                      color: white; resize: vertical;"
                               placeholder="Explique el motivo por el cual está eliminando este registro..."
                               required></textarea>
                  </div>
                  <div style="display: flex; gap: 12px; justify-content: center;">
                      <button id="cancelarEliminacionAsistencias" class="btn-secondary">Cancelar</button>
                      <button id="confirmarEliminacionAsistencias" class="btn-primary" style="background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);">Eliminar</button>
                  </div>
              `;

              overlay.appendChild(modal);
              document.body.appendChild(overlay);

              // Enfocar el textarea
              setTimeout(() => {
                  document.getElementById('motivoEliminacionAsistencias').focus();
              }, 100);

              // Event listeners
              document.getElementById('cancelarEliminacionAsistencias').onclick = () => {
                  document.body.removeChild(overlay);
              };

              document.getElementById('confirmarEliminacionAsistencias').onclick = async () => {
                  const motivo = document.getElementById('motivoEliminacionAsistencias').value.trim();
                  if (!motivo) {
                      showNotification('Debe ingresar un motivo para la eliminación', 'error');
                      return;
                  }

                  try {
                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                      // Crear notificación para el administrador
                      const notificacionAdmin = {
                          tipo: 'eliminacion_proveedor_visita_asistencias',
                          registroId: registro.id,
                          documentoPersona: registro.documento,
                          nombrePersona: registro.nombre,
                          empresaPersona: registro.empresa,
                          tipoPersona: registro.tipo,
                          fechaRegistro: registro.fecha,
                          horaRegistro: registro.hora,
                          patentesRegistro: registro.patentes || [],
                          acompañantesRegistro: registro.acompañantes || [],
                          motivoEliminacion: motivo,
                          eliminadoPor: userName,
                          eliminadoPorRol: userRole,
                          fechaEliminacion: new Date().toISOString().split('T')[0],
                          horaEliminacion: new Date().toLocaleTimeString(),
                          timestamp: new Date().toISOString(),
                          estado: 'pendiente_revision'
                      };

                      // Guardar notificación en Firebase
                      await addDoc(collection(db, 'notificaciones_admin'), notificacionAdmin);

                      // Eliminar el registro
                      await eliminarRegistroFirebase(registro.id);

                      // Eliminar de memoria en todos los arrays
                      [registros, registrosOriginales, registrosBusqueda, asistenciasOriginales, asistenciasFiltradas].forEach(array => {
                          const index = array.findIndex(r => r.id === registro.id);
                          if (index !== -1) {
                              array.splice(index, 1);
                          }
                      });

                      renderRegistros();
                      renderAsistencias();

                      document.body.removeChild(overlay);
                      showNotification('Registro eliminado y notificación enviada al administrador', 'success');
                  } catch (error) {
                      console.error('Error eliminando registro:', error);
                      showNotification('Error al eliminar registro', 'error');
                  }
              };

              // Cerrar con ESC
              const handleKeyPress = (e) => {
                  if (e.key === 'Escape') {
                      document.body.removeChild(overlay);
                      document.removeEventListener('keydown', handleKeyPress);
                  }
              };
              document.addEventListener('keydown', handleKeyPress);
          }

          // Función específica para editar proveedores/visitas desde búsqueda (guardia)
          function editarProveedorVisitaGuardia(registroId) {
              if (userRole !== 'guardia') {
                  showNotification('Solo los guardias pueden editar desde esta vista', 'error');
                  return;
              }

              // Buscar el registro en todos los arrays posibles
              let registro = registrosBusqueda.find(r => r.id === registroId);
              if (!registro) {
                  registro = registrosOriginales.find(r => r.id === registroId);
              }
              if (!registro) {
                  registro = registros.find(r => r.id === registroId);
              }

              if (!registro) {
                  showNotification('Registro no encontrado', 'error');
                  return;
              }

              if (registro.tipo !== 'proveedor' && registro.tipo !== 'visita') {
                  showNotification('Esta función solo está disponible para proveedores y visitas', 'error');
                  return;
              }

              // Verificar que sea el guardia que lo registró
              const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
              if (registro.registradoPor !== userName) {
                  showNotification('Solo puedes editar registros que tú creaste', 'error');
                  return;
              }

              // Usar la función de edición normal pero marcar que viene de búsqueda
              window.editandoDesdeBusqueda = true;
              editarRegistro(registroId);
          }

          // Función específica para eliminar proveedores/visitas desde búsqueda (guardia)
          function eliminarProveedorVisitaGuardia(registroId) {
              if (userRole !== 'guardia') {
                  showNotification('Solo los guardias pueden eliminar desde esta vista', 'error');
                  return;
              }

              // Buscar el registro
              let registro = registrosBusqueda.find(r => r.id === registroId);
              if (!registro) {
                  registro = registrosOriginales.find(r => r.id === registroId);
              }
              if (!registro) {
                  registro = registros.find(r => r.id === registroId);
              }

              if (!registro) {
                  showNotification('Registro no encontrado', 'error');
                  return;
              }

              // Verificar que sea el guardia que lo registró
              const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
              if (registro.registradoPor !== userName) {
                  showNotification('Solo puedes eliminar registros que tú creaste', 'error');
                  return;
              }

              // Usar la función de eliminación con motivo
              eliminarRegistroConMotivo(registroId, registro);
          }

          // Función para eliminar trabajadores desde búsqueda (guardia)
          function eliminarTrabajadorGuardia(registroId) {
              if (userRole !== 'guardia') {
                  showNotification('Solo los guardias pueden eliminar trabajadores', 'error');
                  return;
              }

              // Buscar el registro
              let registro = registrosBusqueda.find(r => r.id === registroId);
              if (!registro) {
                  registro = registrosOriginales.find(r => r.id === registroId);
              }
              if (!registro) {
                  registro = registros.find(r => r.id === registroId);
              }

              if (!registro) {
                  showNotification('Registro no encontrado', 'error');
                  return;
              }

              if (registro.tipo !== 'trabajador') {
                  showNotification('Esta función solo está disponible para trabajadores', 'error');
                  return;
              }

              // Los guardias no pueden eliminar trabajadores autorizados, solo reportar problemas
              mostrarModalReportarProblema(registro);
          }

          // Modal para reportar problema con trabajador
          function mostrarModalReportarProblema(registro) {
              const overlay = document.createElement('div');
              overlay.style.cssText = `
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background: rgba(0, 0, 0, 0.7);
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  z-index: 1000;
              `;

              const modal = document.createElement('div');
              modal.style.cssText = `
                  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                  border-radius: var(--border-radius);
                  padding: 40px;
                  max-width: 500px;
                  width: 90%;
                  border: 1px solid rgba(255, 255, 255, 0.2);
                  backdrop-filter: blur(20px);
                  box-shadow: var(--shadow-xl);
              `;

              modal.innerHTML = `
                  <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                      ⚠️ Reportar Problema con Trabajador
                  </h3>
                  <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                      <strong>${registro.nombre}</strong><br>
                      ${registro.documento} - ${registro.empresa}
                  </p>
                  <p style="color: #fbbf24; margin-bottom: 20px; text-align: center; font-size: 0.9rem;">
                      Los guardias no pueden eliminar trabajadores autorizados.<br>
                      Reporte el problema para que sea revisado por un supervisor.
                  </p>
                  <div style="margin-bottom: 20px;">
                      <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                          Describe el problema *
                      </label>
                      <textarea id="problemaDescripcion"
                               style="width: 100%; height: 100px; padding: 12px; border-radius: 8px;
                                      border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                      color: white; resize: vertical;"
                               placeholder="Explique detalladamente el problema encontrado con este trabajador..."
                               required></textarea>
                  </div>
                  <div style="display: flex; gap: 12px; justify-content: center;">
                      <button id="cancelarReporte" class="btn-secondary">Cancelar</button>
                      <button id="enviarReporte" class="btn-primary">Enviar Reporte</button>
                  </div>
              `;

              overlay.appendChild(modal);
              document.body.appendChild(overlay);

              // Event listeners
              document.getElementById('cancelarReporte').onclick = () => {
                  document.body.removeChild(overlay);
              };

              document.getElementById('enviarReporte').onclick = async () => {
                  const descripcion = document.getElementById('problemaDescripcion').value.trim();
                  if (!descripcion) {
                      showNotification('Debe describir el problema', 'error');
                      return;
                  }

                  try {
                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                      const reporte = {
                          tipo: 'problema_trabajador',
                          registroId: registro.id,
                          documentoPersona: registro.documento,
                          nombrePersona: registro.nombre,
                          empresaPersona: registro.empresa,
                          problemaDescripcion: descripcion,
                          reportadoPor: userName,
                          reportadoPorRol: userRole,
                          fechaReporte: new Date().toISOString().split('T')[0],
                          horaReporte: new Date().toLocaleTimeString(),
                          timestamp: new Date().toISOString(),
                          estado: 'pendiente_revision'
                      };

                      await addDoc(collection(db, 'reportes_problemas'), reporte);
                      document.body.removeChild(overlay);
                      showNotification('Problema reportado exitosamente. Será revisado por un supervisor.', 'success');
                  } catch (error) {
                      console.error('Error enviando reporte:', error);
                      showNotification('Error al enviar reporte', 'error');
                  }
              };
          }

          // Función general para eliminar registros con motivo
          function eliminarRegistroConMotivo(registroId, registro) {
              const overlay = document.createElement('div');
              overlay.style.cssText = `
                  position: fixed;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                  background: rgba(0, 0, 0, 0.7);
                  display: flex;
                  justify-content: center;
                  align-items: center;
                  z-index: 1000;
              `;

              const modal = document.createElement('div');
              modal.style.cssText = `
                  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                  border-radius: var(--border-radius);
                  padding: 40px;
                  max-width: 500px;
                  width: 90%;
                  border: 1px solid rgba(255, 255, 255, 0.2);
                  backdrop-filter: blur(20px);
                  box-shadow: var(--shadow-xl);
              `;

              modal.innerHTML = `
                  <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                      🗑️ Eliminar Registro
                  </h3>
                  <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                      <strong>${registro.nombre}</strong><br>
                      ${registro.tipo.toUpperCase()} - ${registro.empresa}
                  </p>
                  <div style="margin-bottom: 20px;">
                      <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                          Motivo de eliminación *
                      </label>
                      <textarea id="motivoEliminacion"
                               style="width: 100%; height: 100px; padding: 12px; border-radius: 8px;
                                      border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                      color: white; resize: vertical;"
                               placeholder="Explique el motivo por el cual está eliminando este registro..."
                               required></textarea>
                  </div>
                  <div style="display: flex; gap: 12px; justify-content: center;">
                      <button id="cancelarEliminacion" class="btn-secondary">Cancelar</button>
                      <button id="confirmarEliminacion" class="btn-primary" style="background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);">Eliminar</button>
                  </div>
              `;

              overlay.appendChild(modal);
              document.body.appendChild(overlay);

              document.getElementById('cancelarEliminacion').onclick = () => {
                  document.body.removeChild(overlay);
              };

              document.getElementById('confirmarEliminacion').onclick = async () => {
                  const motivo = document.getElementById('motivoEliminacion').value.trim();
                  if (!motivo) {
                      showNotification('Debe ingresar un motivo para la eliminación', 'error');
                      return;
                  }

                  try {
                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                      // Crear notificación para el administrador
                      const notificacion = {
                          tipo: 'eliminacion_registro',
                          registroId: registro.id,
                          documentoPersona: registro.documento,
                          nombrePersona: registro.nombre,
                          empresaPersona: registro.empresa,
                          tipoRegistro: registro.tipo,
                          motivoEliminacion: motivo,
                          eliminadoPor: userName,
                          eliminadoPorRol: userRole,
                          fechaEliminacion: new Date().toISOString().split('T')[0],
                          horaEliminacion: new Date().toLocaleTimeString(),
                          timestamp: new Date().toISOString(),
                          estado: 'pendiente_revision'
                      };

                      await addDoc(collection(db, 'notificaciones_admin'), notificacion);
                      await eliminarRegistroFirebase(registro.id);

                      // Eliminar de memoria en todos los arrays
                      [registros, registrosOriginales, registrosBusqueda].forEach(array => {
                          const index = array.findIndex(r => r.id === registro.id);
                          if (index !== -1) {
                              array.splice(index, 1);
                          }
                      });

                      renderRegistros();
                      if (document.getElementById('resultadosBusqueda').children.length > 0) {
                          realizarBusqueda();
                      }

                      document.body.removeChild(overlay);
                      showNotification('Registro eliminado y notificación enviada al administrador', 'success');
                  } catch (error) {
                      console.error('Error eliminando registro:', error);
                      showNotification('Error al eliminar registro', 'error');
                  }
              };
          }

          function updatePermissions() {
              const rol = document.getElementById('tipoRol').value;
              const supervisorGroup = document.getElementById('supervisorGroup');
              const subcontratoGroup = document.getElementById('subcontratoGroup');
              const checkboxes = document.querySelectorAll('input[name="permisos"]');

              // Limpiar todos los checkboxes
              checkboxes.forEach(cb => cb.checked = false);

              // Validación temprana para sub-registradores
              if (userRole === 'sub-registrador') {
                  showNotification('Los Sub-Registradores no pueden crear usuarios', 'error');
                  document.getElementById('tipoRol').value = '';
                  return;
              }

              if (rol === 'sub-registrador') {
                  supervisorGroup.style.display = 'block';
                  subcontratoGroup.style.display = 'block';
                  updateSupervisorOptions();
              } else {
                  supervisorGroup.style.display = 'none';
                  subcontratoGroup.style.display = 'none';
              }

              // Permisos según el rol del usuario que está creando el usuario
              let permisosDisponibles = [];

              if (userRole === 'administrador') {
                  // El administrador puede asignar todos los permisos según el rol
                  const defaultPermissions = {
                      'administrador': ['registrar', 'buscar', 'autorizar', 'dias-especiales', 'feriados', 'esperadas', 'bloqueos', 'solicitudes', 'usuarios'],
                      'autorizador': ['registrar', 'autorizar', 'buscar', 'dias-especiales', 'bloqueos', 'esperadas', 'solicitudes', 'usuarios'],
                      'registrador': ['registrar', 'buscar', 'solicitudes', 'usuarios', 'dias-especiales', 'esperadas'],
                      'sub-registrador': ['registrar', 'buscar', 'solicitudes', 'dias-especiales', 'esperadas'],
                      'guardia': ['registrar', 'buscar', 'autorizar', 'dias-especiales', 'feriados', 'esperadas', 'bloqueos', 'solicitudes', 'usuarios'],
                      'usuario': ['buscar']
                  };
                  permisosDisponibles = defaultPermissions[rol] || [];

              } else if (userRole === 'autorizador') {
                  // El autorizador puede crear: autorizador, registrador, sub-registrador
                  const defaultPermissions = {
                      'autorizador': ['registrar', 'autorizar', 'buscar', 'dias-especiales', 'bloqueos', 'esperadas', 'solicitudes', 'usuarios'],
                      'registrador': ['registrar', 'buscar', 'solicitudes', 'usuarios', 'dias-especiales', 'esperadas'],
                      'sub-registrador': ['registrar', 'buscar', 'solicitudes', 'dias-especiales', 'esperadas']
                  };

                  if (defaultPermissions[rol]) {
                      permisosDisponibles = defaultPermissions[rol];
                  } else {
                      showNotification('Los autorizadores solo pueden crear Autorizadores, Registradores y Sub-Registradores', 'error');
                      document.getElementById('tipoRol').value = '';
                      return;
                  }

              } else if (userRole === 'registrador') {
                  // El registrador tiene permisos limitados según el rol que está creando
                  if (rol === 'sub-registrador') {
                      // Solo puede asignar estos permisos a sub-registradores
                      permisosDisponibles = ['registrar', 'buscar', 'dias-especiales'];
                  } else {
                      // No puede crear otros tipos de usuarios
                      showNotification('Los registradores solo pueden crear Sub-Registradores', 'error');
                      document.getElementById('tipoRol').value = '';
                      return;
                  }
              }

              // Habilitar/deshabilitar checkboxes según los permisos disponibles
              checkboxes.forEach(checkbox => {
                  const permisoValue = checkbox.value;

                  if (permisosDisponibles.includes(permisoValue)) {
                      checkbox.checked = true;
                      checkbox.disabled = false;
                      checkbox.parentElement.style.opacity = '1';
                      checkbox.parentElement.style.pointerEvents = 'auto';
                  } else {
                      checkbox.checked = false;
                      checkbox.disabled = true;
                      checkbox.parentElement.style.opacity = '0.5';
                      checkbox.parentElement.style.pointerEvents = 'none';
                  }
              });

              // Mostrar mensaje informativo
              if (userRole === 'registrador' && rol === 'sub-registrador') {
                  showNotification('Los Sub-Registradores tendrán permisos limitados: Registrar, Buscar y Días Especiales', 'info');
              } else if (userRole === 'autorizador') {
                  if (rol === 'sub-registrador') {
                      showNotification('Sub-Registrador con permisos: Registrar, Buscar, Solicitudes, Días Especiales y Esperadas', 'info');
                  } else if (rol === 'autorizador') {
                      showNotification('Autorizador con permisos: Registrar, Autorizar, Buscar, Días Especiales, Bloqueos, Esperadas, Solicitudes y Usuarios', 'info');
                  } else if (rol === 'registrador') {
                      showNotification('Registrador con permisos: Registrar, Buscar, Solicitudes, Usuarios, Días Especiales y Esperadas', 'info');
                  } else {
                      showNotification(`Permisos asignados automáticamente para el rol: ${rol}`, 'info');
                  }
              } else if (userRole === 'administrador') {
                  if (rol === 'guardia') {
                      showNotification('Guardia con acceso completo: Puede tener cualquier permiso según las necesidades del administrador', 'info');
                  } else {
                      showNotification(`Permisos asignados automáticamente para el rol: ${rol}`, 'info');
                  }
              }
          }


            function updateSupervisorOptions() {
                const supervisorSelect = document.getElementById('supervisorUsuario');
                supervisorSelect.innerHTML = '<option value="">Seleccionar supervisor...</option>';

                const registradores = usuarios.filter(u => u.rol === 'registrador' && u.activo);
                registradores.forEach(reg => {
                    const option = document.createElement('option');
                    option.value = reg.nombre;
                    option.textContent = reg.nombre;
                    supervisorSelect.appendChild(option);
                });
            }

            // Funciones para RUT chileno
            function formatearRUT(rut) {
              // Limpiar el RUT de caracteres no válidos
              rut = rut.replace(/[^0-9kK]/g, '');
              if (rut.length < 2) return rut;

              // Separar cuerpo y dígito verificador
              let cuerpo = rut.slice(0, -1);
              let dv = rut.slice(-1).toUpperCase();

              // Formatear el cuerpo agregando puntos
              let cuerpoFormateado = '';
              let contador = 0;

              for (let i = cuerpo.length - 1; i >= 0; i--) {
                  if (contador === 3) {
                      cuerpoFormateado = '.' + cuerpoFormateado;
                      contador = 0;
                  }
                  cuerpoFormateado = cuerpo[i] + cuerpoFormateado;
                  contador++;
              }

              return `${cuerpoFormateado}-${dv}`;
          }

            function validarRUT(rut) {
                rut = rut.replace(/[^0-9kK]/g, '');
                if (rut.length < 8 || rut.length > 9) return false;

                let cuerpo = rut.slice(0, -1);
                let dv = rut.slice(-1).toUpperCase();

                let suma = 0;
                let multiplicador = 2;

                for (let i = cuerpo.length - 1; i >= 0; i--) {
                    suma += parseInt(cuerpo.charAt(i)) * multiplicador;
                    multiplicador = multiplicador === 7 ? 2 : multiplicador + 1;
                }

                let dvCalculado = 11 - (suma % 11);
                if (dvCalculado === 11) dvCalculado = '0';
                if (dvCalculado === 10) dvCalculado = 'K';
                else dvCalculado = dvCalculado.toString();

                return dv === dvCalculado;
            }

            function convertirAMayuscula(texto) {
                return texto.toUpperCase();
            }


            // Verificar si documento ya existe
            // Verificar si documento ya existe - VERSIÓN CORREGIDA PARA PROVEEDORES/VISITAS
            async function verificarDocumentoExistente(documento, excludeId = null, tipoPersona = null, fecha = null) {
                try {
                    let q;

                    if (tipoPersona === 'proveedor' || tipoPersona === 'visita') {
                        // Para proveedores/visitas, la lógica depende del rol del usuario
                        const fechaHoy = fecha || new Date().toISOString().split('T')[0];

                        if (userRole === 'guardia') {
                            // Los guardias pueden registrar proveedores/visitas aunque ya estén autorizados
                            // Solo verificar si YA registró HOY como guardia
                            q = query(
                                collection(db, 'registros'),
                                where('documento', '==', documento),
                                where('tipo', '==', tipoPersona),
                                where('fecha', '==', fechaHoy),
                                where('registradoPorRol', '==', 'guardia')
                            );
                        } else {
                            // Para otros roles (admin, autorizador, registrador, sub-registrador)
                            // Verificar si ya existe registro del mismo tipo (independiente del rol)
                            q = query(
                                collection(db, 'registros'),
                                where('documento', '==', documento),
                                where('tipo', '==', tipoPersona),
                                where('fecha', '==', fechaHoy)
                            );
                        }
                    } else {
                        // Para trabajadores, verificar globalmente (lógica original)
                        q = query(
                            collection(db, 'registros'),
                            where('documento', '==', documento),
                            where('tipo', '==', 'trabajador')
                        );
                    }

                    const querySnapshot = await getDocs(q);

                    if (excludeId) {
                        let exists = false;
                        querySnapshot.forEach((docSnapshot) => {
                            if (docSnapshot.id !== excludeId) {
                                exists = true;
                            }
                        });
                        return exists;
                    }

                    return !querySnapshot.empty;
                } catch (error) {
                    console.error('Error verificando documento:', error);
                    return false;
                }
            }

            async function verificarRutExistente(rut, excludeId = null) {
                try {
                    const q = query(collection(db, 'usuarios'), where('rut', '==', rut));
                    const querySnapshot = await getDocs(q);

                    if (excludeId) {
                        let exists = false;
                        querySnapshot.forEach((docSnapshot) => {
                            if (docSnapshot.id !== excludeId) {
                                exists = true;
                            }
                        });
                        return exists;
                    }

                    return !querySnapshot.empty;
                } catch (error) {
                    console.error('Error verificando RUT:', error);
                    return false;
                }
            }

            async function verificarUsuarioExistente(usuario, excludeId = null) {
                try {
                    const q = query(collection(db, 'usuarios'), where('usuario', '==', usuario));
                    const querySnapshot = await getDocs(q);

                    if (excludeId) {
                        let exists = false;
                        querySnapshot.forEach((docSnapshot) => {
                            if (docSnapshot.id !== excludeId) {
                                exists = true;
                            }
                        });
                        return exists;
                    }

                    return !querySnapshot.empty;
                } catch (error) {
                    console.error('Error verificando usuario:', error);
                    return false;
                }
            }

            // Renderizar usuarios
            function renderUsers() {
                const usersGrid = document.getElementById('usersGrid');
                usersGrid.innerHTML = '';

                let usuariosFiltrados = [...usuarios];

                // Filtrar usuarios según el rol del usuario actual
                if (userRole === 'autorizador') {
                    // Autorizadores solo ven usuarios que ELLOS registraron
                    const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                    usuariosFiltrados = usuarios.filter(u => u.registradoPor === userName);
                } else if (userRole === 'registrador') {
                    // Registradores solo ven usuarios que ELLOS registraron
                    const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                    usuariosFiltrados = usuarios.filter(u => u.registradoPor === userName);
                }
                // Administradores ven TODOS los usuarios (sin filtro)

                if (usuariosFiltrados.length === 0) {
                    let mensaje = 'No hay usuarios registrados';

                    if (userRole === 'autorizador') {
                        mensaje = 'No has registrado usuarios en el sistema';
                    } else if (userRole === 'registrador') {
                        mensaje = 'No has registrado usuarios en el sistema';
                    }

                    usersGrid.innerHTML = `<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">${mensaje}</p>`;
                    return;
                }

                usuariosFiltrados.forEach(usuario => {
                    const userCard = createUserCard(usuario);
                    usersGrid.appendChild(userCard);
                });
            }

            // Crear tarjeta de usuario
            function createUserCard(usuario) {
                const card = document.createElement('div');
                card.className = 'user-card';

                const initials = usuario.nombre.split(' ').map(n => n[0]).join('').substring(0, 2);
                const permissionTags = usuario.permisos.map(p => `<span class="permission-tag">${p}</span>`).join('');

                card.innerHTML = `
                    <div class="user-card-header">
                    <div class="user-card-avatar">${initials}</div>
                    <div class="user-card-info">
                        <h3>${usuario.nombre}</h3>
                        <p>${usuario.rut}</p>
                    </div>
                </div>
                <div class="user-card-details">
                    <div class="user-detail-item">
                        <span class="user-detail-label">Empresa:</span>
                        <span class="user-detail-value">${usuario.empresa}</span>
                    </div>
                    <div class="user-detail-item">
                        <span class="user-detail-label">Usuario:</span>
                        <span class="user-detail-value">${usuario.usuario}</span>
                    </div>
                    <div class="user-detail-item">
                        <span class="user-detail-label">Rol:</span>
                        <span class="user-detail-value">${usuario.rol}</span>
                    </div>
                    <div class="user-detail-item">
                        <span class="user-detail-label">Contraseña:</span>
                        <span class="user-detail-value">${usuario.password}</span>
                    </div>
                    <div class="user-detail-item">
                        <span class="user-detail-label">Estado:</span>
                        <span class="status-badge ${usuario.activo ? 'status-active' : 'status-inactive'}">
                            ${usuario.activo ? 'Activo' : 'Inactivo'}
                        </span>
                    </div>
                    <div class="user-detail-item">
                        <span class="user-detail-label">Registrado por:</span>
                        <span class="user-detail-value">${usuario.registradoPor}</span>
                    </div>
                    <div class="user-detail-item">
                        <span class="user-detail-label">Autorizado por:</span>
                        <span class="user-detail-value">${usuario.autorizadoPor}</span>
                    </div>
                    ${usuario.supervisor ? `
                        <div class="user-detail-item">
                            <span class="user-detail-label">Supervisor:</span>
                            <span class="user-detail-value">${usuario.supervisor}</span>
                        </div>
                    ` : ''}
                    ${usuario.subcontrato ? `
                        <div class="user-detail-item">
                            <span class="user-detail-label">Subcontrato:</span>
                            <span class="user-detail-value">${usuario.subcontrato}</span>
                        </div>
                    ` : ''}
                    <div class="user-detail-item">
                        <span class="user-detail-label">Fecha creación:</span>
                        <span class="user-detail-value">${usuario.fechaCreacion}</span>
                    </div>
                </div>
                <div class="user-permissions">
                    <h4>Permisos:</h4>
                    <div class="permission-tags">${permissionTags}</div>
                </div>
                <div class="user-card-actions">
                    ${generarBotonesUsuario(usuario)}
                </div>
            `;

            return card;
         }



         // Generar botones según permisos del usuario actual
         function generarBotonesUsuario(usuario) {
             let botones = '';
             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

             if (userRole === 'administrador') {
                 // Administradores pueden hacer todo
                 botones += `<button class="btn-sm btn-edit" onclick="window.editarUsuario('${usuario.id}')">Editar</button>`;
                 botones += `<button class="btn-sm btn-toggle" onclick="window.toggleUsuario('${usuario.id}')">${usuario.activo ? 'Desactivar' : 'Activar'}</button>`;
                 botones += `<button class="btn-sm btn-delete" onclick="window.eliminarUsuarioConfirm('${usuario.id}')">Eliminar</button>`;
             } else if ((userRole === 'autorizador' || userRole === 'registrador') && usuario.registradoPor === userName) {
                 // Solo pueden editar/gestionar usuarios que ELLOS registraron
                 botones += `<button class="btn-sm btn-edit" onclick="window.editarUsuario('${usuario.id}')">Editar</button>`;
                 botones += `<button class="btn-sm btn-toggle" onclick="window.toggleUsuario('${usuario.id}')">${usuario.activo ? 'Desactivar' : 'Activar'}</button>`;
                 botones += `<button class="btn-sm btn-delete" onclick="window.eliminarUsuarioConfirm('${usuario.id}')">Eliminar</button>`;
             } else {
                 // Solo pueden ver (sin botones de acción)
                 botones = '<span style="color: var(--text-secondary); font-size: 0.8rem;">Solo lectura</span>';
             }

             return botones;
         }


         function limpiarUsuario() {
             document.getElementById('usuarioForm').reset();
             document.getElementById('supervisorGroup').style.display = 'none';
             document.getElementById('subcontratoGroup').style.display = 'none';
             document.getElementById('submitBtn').textContent = 'Crear Usuario';
             editandoUsuario = null;

             const rutInput = document.getElementById('rutUsuario');
             const icon = document.getElementById('rutValidationIcon');
             const message = document.getElementById('rutMessage');

             rutInput.classList.remove('rut-valid', 'rut-invalid', 'with-icon');
             icon.style.display = 'none';
             message.style.display = 'none';

             const checkboxes = document.querySelectorAll('input[name="permisos"]');
             checkboxes.forEach(cb => {
                 cb.checked = false;
                 cb.disabled = false;
                 cb.parentElement.style.opacity = '1';
                 cb.parentElement.style.pointerEvents = 'auto';
             });

             // Restaurar opciones de rol filtradas
             filtrarOpcionesRol(); // AGREGAR ESTA LÍNEA

             showNotification('Formulario limpiado', 'info');
         }

         function editarUsuario(id) {
            const usuario = usuarios.find(u => u.id === id);
            if (!usuario) return;

            // Verificar permisos
                if (userRole !== 'administrador') {
                    const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                    if (usuario.registradoPor !== userName) {
                        showNotification('No tienes permisos para editar este usuario', 'error');
                        return;
                    }
                }

            editandoUsuario = id;
            document.getElementById('submitBtn').textContent = 'Actualizar Datos';

            document.getElementById('rutUsuario').value = usuario.rut;
            document.getElementById('nombreUsuario').value = usuario.nombre;
            document.getElementById('empresaUsuario').value = usuario.empresa;
            document.getElementById('usuarioLogin').value = usuario.usuario;
            document.getElementById('tipoRol').value = usuario.rol;
            document.getElementById('passwordUsuario').value = usuario.password;

            if (usuario.supervisor) {
                document.getElementById('supervisorUsuario').value = usuario.supervisor;
            }

            if (usuario.subcontrato) {
                document.getElementById('subcontratoUsuario').value = usuario.subcontrato;
            }

            const checkboxes = document.querySelectorAll('input[name="permisos"]');
            checkboxes.forEach(cb => cb.checked = false);
            usuario.permisos.forEach(permiso => {
                const checkbox = document.getElementById(`perm-${permiso}`);
                if (checkbox) checkbox.checked = true;
            });

            updatePermissions();
            showNotification('Datos cargados para edición', 'info');
         }

         async function toggleUsuario(id) {
            const usuario = usuarios.find(u => u.id === id);
            if (!usuario) return;

            // Verificar permisos
                if (userRole !== 'administrador') {
                    const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                    if (usuario.registradoPor !== userName) {
                        showNotification('No tienes permisos para modificar este usuario', 'error');
                        return;
                    }
                }

            const accion = usuario.activo ? 'desactivar' : 'activar';
            if (confirm(`¿Estás seguro de que deseas ${accion} a ${usuario.nombre}?`)) {
                try {
                    await actualizarUsuario(id, { activo: !usuario.activo });
                    usuario.activo = !usuario.activo;
                    renderUsers();
                    showNotification(`Usuario ${accion}do correctamente`, 'success');
                } catch (error) {
                    showNotification('Error al actualizar usuario', 'error');
                }
            }
         }

         async function eliminarUsuarioConfirm(id) {
            const usuario = usuarios.find(u => u.id === id);
            if (!usuario) return;
            // Verificar permisos
               if (userRole !== 'administrador') {
                   const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                   if (usuario.registradoPor !== userName) {
                       showNotification('No tienes permisos para eliminar este usuario', 'error');
                       return;
                   }
               }

            if (confirm(`¿Estás seguro de que deseas eliminar a ${usuario.nombre}? Esta acción no se puede deshacer.`)) {
                try {
                    await eliminarUsuarioFirebase(id);
                    usuarios = usuarios.filter(u => u.id !== id);
                    renderUsers();
                    showNotification('Usuario eliminado correctamente', 'success');
                } catch (error) {
                    showNotification('Error al eliminar usuario', 'error');
                }
            }
         }

         // Funciones para manejo de selecciones múltiples
         function toggleRegistroSelection(registroId) {
            const checkbox = document.getElementById(`select-${registroId}`);
            const card = document.querySelector(`[data-registro-id="${registroId}"]`);

            if (checkbox.checked) {
                selectedRegistros.add(registroId);
                card.classList.add('selected');
            } else {
                selectedRegistros.delete(registroId);
                card.classList.remove('selected');
            }

            updateSelectionControls();
         }

         function selectAllPending() {
            const registrosPendientes = registros.filter(r => r.estado === 'pendiente');

            registrosPendientes.forEach(registro => {
                selectedRegistros.add(registro.id);
                const checkbox = document.getElementById(`select-${registro.id}`);
                const card = document.querySelector(`[data-registro-id="${registro.id}"]`);

                if (checkbox) checkbox.checked = true;
                if (card) card.classList.add('selected');
            });

            updateSelectionControls();
         }

         function clearAllSelections() {
            selectedRegistros.forEach(registroId => {
                const checkbox = document.getElementById(`select-${registroId}`);
                const card = document.querySelector(`[data-registro-id="${registroId}"]`);

                if (checkbox) checkbox.checked = false;
                if (card) card.classList.remove('selected');
            });

            selectedRegistros.clear();
            updateSelectionControls();
         }

         function updateSelectionControls() {
            const selectedCountElement = document.getElementById('selectedCount');
            const selectedBadge = document.getElementById('selectedBadge');
            const authorizeBtn = document.getElementById('authorizeGroupBtn');
            const rejectBtn = document.getElementById('rejectGroupBtn');

            const count = selectedRegistros.size;

            if (selectedCountElement) selectedCountElement.textContent = count;

            if (selectedBadge) {
                if (count > 0) {
                    selectedBadge.textContent = count;
                    selectedBadge.style.display = 'inline';
                } else {
                    selectedBadge.style.display = 'none';
                }
            }

            if (authorizeBtn) authorizeBtn.disabled = count === 0;
            if (rejectBtn) rejectBtn.disabled = count === 0;
         }

         // Autorizar registros seleccionados
         async function authorizeSelected() {
            if (selectedRegistros.size === 0) {
                showNotification('No hay registros seleccionados', 'error');
                return;
            }

            const count = selectedRegistros.size;
            if (!confirm(`¿Está seguro de que desea autorizar ${count} registro(s)?`)) {
                return;
            }

            try {
                const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                const promises = [];

                selectedRegistros.forEach(registroId => {
                    const datosActualizados = {
                        estado: 'autorizado',
                        autorizadoPor: userName,
                        fechaAutorizacion: new Date().toISOString().split('T')[0],
                        horaAutorizacion: new Date().toLocaleTimeString()
                    };

                    promises.push(actualizarRegistro(registroId, datosActualizados));
                });

                await Promise.all(promises);

                // Actualizar registros en memoria
                selectedRegistros.forEach(registroId => {
                    const registroIndex = registros.findIndex(r => r.id === registroId);
                    if (registroIndex !== -1) {
                        registros[registroIndex].estado = 'autorizado';
                        registros[registroIndex].autorizadoPor = userName;
                        registros[registroIndex].fechaAutorizacion = new Date().toISOString().split('T')[0];
                        registros[registroIndex].horaAutorizacion = new Date().toLocaleTimeString();
                    }
                });

                selectedRegistros.clear();
                renderRegistros();
                renderRegistrosPendientes();
                showNotification(`${count} registro(s) autorizado(s) exitosamente`, 'success');

            } catch (error) {
                console.error('Error autorizando registros:', error);
                showNotification('Error al autorizar registros', 'error');
            }
         }

         // Rechazar registros seleccionados
         async function rejectSelected() {
            if (selectedRegistros.size === 0) {
                showNotification('No hay registros seleccionados', 'error');
                return;
            }

            const count = selectedRegistros.size;
            if (!confirm(`¿Está seguro de que desea rechazar ${count} registro(s)?`)) {
                return;
            }

            try {
                const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                const promises = [];

                selectedRegistros.forEach(registroId => {
                    const datosActualizados = {
                        estado: 'rechazado',
                        rechazadoPor: userName,
                        fechaRechazo: new Date().toISOString().split('T')[0],
                        horaRechazo: new Date().toLocaleTimeString()
                    };

                    promises.push(actualizarRegistro(registroId, datosActualizados));
                });

                await Promise.all(promises);

                // Actualizar registros en memoria
                selectedRegistros.forEach(registroId => {
                    const registroIndex = registros.findIndex(r => r.id === registroId);
                    if (registroIndex !== -1) {
                        registros[registroIndex].estado = 'rechazado';
                        registros[registroIndex].rechazadoPor = userName;
                        registros[registroIndex].fechaRechazo = new Date().toISOString().split('T')[0];
                        registros[registroIndex].horaRechazo = new Date().toLocaleTimeString();
                    }
                });

                selectedRegistros.clear();
                renderRegistros();
                renderRegistrosPendientes();
                showNotification(`${count} registro(s) rechazado(s)`, 'info');

            } catch (error) {
                console.error('Error rechazando registros:', error);
                showNotification('Error al rechazar registros', 'error');
            }
         }

         // Rechazar registro individual
         async function rechazarRegistro(id) {
            if (confirm('¿Está seguro de que desea rechazar este registro?')) {
                try {
                    const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                    const datosActualizados = {
                        estado: 'rechazado',
                        rechazadoPor: userName,
                        fechaRechazo: new Date().toISOString().split('T')[0],
                        horaRechazo: new Date().toLocaleTimeString()
                    };

                    await actualizarRegistro(id, datosActualizados);

                    const registroIndex = registros.findIndex(r => r.id === id);
                    if (registroIndex !== -1) {
                        registros[registroIndex] = { ...registros[registroIndex], ...datosActualizados };
                    }

                    renderRegistros();
                    renderRegistrosPendientes();
                    showNotification('Registro rechazado', 'info');
                } catch (error) {
                    showNotification('Error al rechazar registro', 'error');
                }
            }
         }


         // Cargar todos los registros para búsqueda
         async function cargarTodosLosRegistros() {
             try {
                 const querySnapshot = await getDocs(collection(db, 'registros'));
                 registrosOriginales = [];
                 querySnapshot.forEach((docSnapshot) => {
                     const registro = { id: docSnapshot.id, ...docSnapshot.data() };
                     // INCLUIR TODOS LOS REGISTROS AUTORIZADOS
                     if (registro.estado === 'autorizado' &&
                         (registro.tipo === 'trabajador' ||
                          registro.tipo === 'proveedor' ||
                          registro.tipo === 'visita' ||
                          registro.tipo === 'asistencia_trabajador')) {
                         registrosOriginales.push(registro);
                     }
                 });

                 // Ordenar por timestamp descendente
                 registrosOriginales.sort((a, b) => {
                     const fechaA = new Date(a.timestamp || `${a.fecha} ${a.hora}`);
                     const fechaB = new Date(b.timestamp || `${b.fecha} ${b.hora}`);
                     return fechaB - fechaA;
                 });

                 // Filtrar según el rol del usuario
                 filtrarRegistrosPorRol();

                 // Mostrar primeros 10 registros
                 mostrarRegistrosPaginados();
             } catch (error) {
                 console.error('Error cargando todos los registros:', error);
                 showNotification('Error al cargar registros', 'error');
             }
         }

         // Filtrar registros según el rol del usuario - SOLO LOS QUE REGISTRARON
         function filtrarRegistrosPorRol() {
             if (!currentUserData) return;

             const userName = currentUserData.name || currentUserData.nombre || 'Usuario';

             if (userRole === 'sub-registrador') {
                 registrosBusqueda = registrosOriginales.filter(r =>
                     r.registradoPor === userName
                 );
             } else if (userRole === 'registrador') {
                 registrosBusqueda = registrosOriginales.filter(r =>
                     r.registradoPor === userName ||
                     (r.registradoPorRol === 'sub-registrador' && r.supervisor === userName)
                 );
             } else if (userRole === 'autorizador') {
                 registrosBusqueda = registrosOriginales.filter(r =>
                     r.registradoPor === userName ||
                     r.registradoPorRol === 'registrador' ||
                     r.registradoPorRol === 'sub-registrador'
                 );
             } else if (userRole === 'guardia') {
                 registrosBusqueda = registrosOriginales.filter(r =>
                     r.registradoPor === userName
                 );
             } else if (userRole === 'administrador') {
                 // ADMINISTRADOR VE TODO - INCLUIR ASISTENCIAS
                 registrosBusqueda = [...registrosOriginales];
             } else {
                 registrosBusqueda = [];
             }
         }

         // Cambiar filtro de fecha
         function cambiarFiltroFecha() {
            const filtroFecha = document.getElementById('filtroFecha').value;
            const fechaDesdeGroup = document.getElementById('fechaDesdeGroup');
            const fechaHastaGroup = document.getElementById('fechaHastaGroup');

            if (filtroFecha === 'personalizado') {
                fechaDesdeGroup.style.display = 'block';
                fechaHastaGroup.style.display = 'block';

                // Establecer fechas por defecto
                const hoy = new Date().toISOString().split('T')[0];
                const haceUnMes = new Date();
                haceUnMes.setMonth(haceUnMes.getMonth() - 1);

                document.getElementById('fechaDesde').value = haceUnMes.toISOString().split('T')[0];
                document.getElementById('fechaHasta').value = hoy;
            } else {
                fechaDesdeGroup.style.display = 'none';
                fechaHastaGroup.style.display = 'none';
            }

            realizarBusqueda();
         }

         // Función principal de búsqueda
         function realizarBusqueda() {
             const termino = document.getElementById('campoBusqueda').value.toLowerCase().trim();
             const filtroFecha = document.getElementById('filtroFecha').value;
             const filtroEstado = document.getElementById('filtroEstado').value;
             const filtroTipo = document.getElementById('filtroTipo').value;
             const filtroActivo = document.getElementById('filtroActivo').value;

             let registrosFiltrados = [...registrosBusqueda];

             // Filtro por término de búsqueda
             if (termino) {
                 registrosFiltrados = registrosFiltrados.filter(registro => {
                     const campos = [
                         registro.documento || '',
                         registro.nombre || '',
                         registro.empresa || '',
                         registro.subContrato || '',
                         registro.empresaProveedora || '',
                         registro.tipo || '',
                         ...(registro.patentes || [])
                     ];

                     return campos.some(campo =>
                         campo.toString().toLowerCase().includes(termino)
                     );
                 });
             }

             // Filtro por fecha
             if (filtroFecha !== 'todos') {
                 const hoy = new Date();
                 let fechaInicio, fechaFin;

                 switch (filtroFecha) {
                     case 'hoy':
                         fechaInicio = fechaFin = hoy.toISOString().split('T')[0];
                         break;
                     case 'semana':
                         const inicioSemana = new Date(hoy);
                         inicioSemana.setDate(hoy.getDate() - hoy.getDay());
                         fechaInicio = inicioSemana.toISOString().split('T')[0];
                         fechaFin = hoy.toISOString().split('T')[0];
                         break;
                     case 'mes':
                         fechaInicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1).toISOString().split('T')[0];
                         fechaFin = hoy.toISOString().split('T')[0];
                         break;
                     case 'personalizado':
                         fechaInicio = document.getElementById('fechaDesde').value;
                         fechaFin = document.getElementById('fechaHasta').value;
                         break;
                 }

                 if (fechaInicio && fechaFin) {
                     registrosFiltrados = registrosFiltrados.filter(registro => {
                         const fechaRegistro = registro.fecha;
                         return fechaRegistro >= fechaInicio && fechaRegistro <= fechaFin;
                     });
                 }
             }

             // Filtro por tipo
             if (filtroTipo) {
                 registrosFiltrados = registrosFiltrados.filter(registro =>
                     registro.tipo === filtroTipo ||
                     (filtroTipo === 'asistencia_trabajador' && registro.tipo === 'asistencia_trabajador')
                 );
             }

             // Filtro por activo
             if (filtroActivo) {
                 const esActivo = filtroActivo === 'true';
                 registrosFiltrados = registrosFiltrados.filter(registro =>
                     registro.activo === esActivo
                 );
             }

             // Ordenar por fecha y hora más reciente
             registrosFiltrados.sort((a, b) => {
                 const fechaA = new Date(a.timestamp || `${a.fecha} ${a.hora}`);
                 const fechaB = new Date(b.timestamp || `${b.fecha} ${b.hora}`);
                 return fechaB - fechaA;
             });

             // Reiniciar paginación
             registrosPaginados = registrosFiltrados;
             totalRegistrosFiltrados = registrosFiltrados.length;
             paginaActual = 0;

             mostrarRegistrosPaginados();
         }


         // Mostrar registros con paginación
         function mostrarRegistrosPaginados() {
             const container = document.getElementById('resultadosBusqueda');
             const contador = document.getElementById('contadorResultados');
             const numeroResultados = document.getElementById('numeroResultados');

             // Si es la primera página, limpiar contenedor
             if (paginaActual === 0) {
                 container.innerHTML = '';
             }

             // Actualizar contador
             numeroResultados.textContent = totalRegistrosFiltrados;
             contador.style.display = 'block';

             if (totalRegistrosFiltrados === 0) {
                 let mensajeVacio = 'No se encontraron registros con los criterios especificados';

                 if (userRole === 'sub-registrador') {
                     mensajeVacio = 'No has creado registros que coincidan con los criterios de búsqueda';
                 } else if (userRole === 'registrador') {
                     mensajeVacio = 'No hay registros tuyos o de tus sub-registradores que coincidan con los criterios';
                 } else if (userRole === 'autorizador') {
                     mensajeVacio = 'No hay registros de registradores/sub-registradores que coincidan con los criterios';
                 } else if (userRole === 'guardia') {
                     mensajeVacio = 'No has creado registros que coincidan con los criterios de búsqueda';
                 } else if (userRole === 'administrador') {
                     mensajeVacio = 'No se encontraron registros que coincidan con los criterios de búsqueda';
                 }

                 container.innerHTML = `<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">${mensajeVacio}</p>`;
                 return;
             }

             // Calcular registros para esta página
             const inicio = paginaActual * registrosPorPagina;
             const fin = inicio + registrosPorPagina;
             const registrosParaMostrar = registrosPaginados.slice(inicio, fin);

             // Crear tarjetas de resultados
             registrosParaMostrar.forEach(registro => {
                 const registroCard = createRegistroCard(registro);
                 // Agregar clase especial para diferenciarlo de otros tabs
                 registroCard.classList.add('resultado-busqueda');
                 container.appendChild(registroCard);
             });

             // Mostrar/ocultar botón "Cargar más"
             mostrarBotonCargarMas();
         }

         // Mostrar botón cargar más
         function mostrarBotonCargarMas() {
             const container = document.getElementById('resultadosBusqueda');
             let botonExistente = document.getElementById('cargarMasBtn');

             // Eliminar botón existente si existe
             if (botonExistente) {
                 botonExistente.remove();
             }

             // Verificar si hay más registros para cargar
             const totalMostrados = (paginaActual + 1) * registrosPorPagina;
             if (totalMostrados < totalRegistrosFiltrados) {
                 const botonCargarMas = document.createElement('div');
                 botonCargarMas.id = 'cargarMasBtn';
                 botonCargarMas.style.gridColumn = '1 / -1';
                 botonCargarMas.style.textAlign = 'center';
                 botonCargarMas.style.marginTop = '20px';

                 botonCargarMas.innerHTML = `
                     <button class="btn-primary" onclick="cargarMasRegistros()" style="padding: 12px 30px;">
                         📄 Cargar más registros (${totalRegistrosFiltrados - totalMostrados} restantes)
                     </button>
                 `;

                 container.appendChild(botonCargarMas);
             }
         }

         // Cargar más registros
         function cargarMasRegistros() {
             paginaActual++;
             mostrarRegistrosPaginados();
         }


         // Mostrar todos los registros autorizados sin filtros
         function mostrarTodosLosRegistros() {
             // Limpiar filtros
             document.getElementById('campoBusqueda').value = '';
             document.getElementById('filtroFecha').value = 'todos';
             document.getElementById('filtroTipo').value = '';
             document.getElementById('filtroActivo').value = '';

             cambiarFiltroFecha(); // Ocultar campos de fecha personalizada

             // Aplicar filtro por rol (igual que en filtrarRegistrosPorRol)
             const userName = currentUserData.name || currentUserData.nombre || 'Usuario';
             let registrosFiltradosPorRol = [];

             if (userRole === 'sub-registrador') {
                 // SOLO sus registros
                 registrosFiltradosPorRol = registrosOriginales.filter(r =>
                     r.registradoPor === userName
                 );
             } else if (userRole === 'registrador') {
                 // Sus registros + los de SUS sub-registradores
                 registrosFiltradosPorRol = registrosOriginales.filter(r =>
                     r.registradoPor === userName ||
                     (r.registradoPorRol === 'sub-registrador' && r.supervisor === userName)
                 );
             } else if (userRole === 'autorizador') {
                 // Sus registros + registradores + sub-registradores (NO administrador NI guardia)
                 registrosFiltradosPorRol = registrosOriginales.filter(r =>
                     r.registradoPor === userName ||
                     r.registradoPorRol === 'registrador' ||
                     r.registradoPorRol === 'sub-registrador'
                 );
             } else if (userRole === 'guardia') {
                 // SOLO sus registros
                 registrosFiltradosPorRol = registrosOriginales.filter(r =>
                     r.registradoPor === userName
                 );
             } else if (userRole === 'administrador') {
                 // TODOS los registros
                 registrosFiltradosPorRol = [...registrosOriginales];
             } else {
                 registrosFiltradosPorRol = [];
             }

             // Reiniciar paginación y mostrar todos los permitidos para este rol
             registrosPaginados = registrosFiltradosPorRol;
             totalRegistrosFiltrados = registrosFiltradosPorRol.length;
             paginaActual = 0;

             mostrarRegistrosPaginados();

             // Mensaje personalizado según el rol
             let mensaje = 'todos los registros autorizados';
             if (userRole === 'sub-registrador') {
                 mensaje = 'todos tus registros';
             } else if (userRole === 'registrador') {
                 mensaje = 'todos tus registros y los de tus sub-registradores';
             } else if (userRole === 'autorizador') {
                 mensaje = 'todos los registros de registradores y sub-registradores';
             } else if (userRole === 'guardia') {
                 mensaje = 'todos tus registros de asistencia y proveedores/visitas';
             }

             showNotification(`Mostrando ${mensaje}`, 'info');
         }


         // Mostrar resultados de búsqueda
         function mostrarResultadosBusqueda(resultados) {
            const container = document.getElementById('resultadosBusqueda');
            const contador = document.getElementById('contadorResultados');
            const numeroResultados = document.getElementById('numeroResultados');

            // Actualizar contador
            numeroResultados.textContent = resultados.length;
            contador.style.display = 'block';

            // Limpiar contenedor
            container.innerHTML = '';

            if (resultados.length === 0) {
                container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No se encontraron registros con los criterios especificados</p>';
                return;
            }

            // Crear tarjetas de resultados
            resultados.forEach(registro => {
                const registroCard = createRegistroCard(registro);
                // Agregar clase especial para diferenciarlo de otros tabs
                registroCard.classList.add('resultado-busqueda');
                container.appendChild(registroCard);
            });
         }

         // Limpiar búsqueda
         function limpiarBusqueda() {
             document.getElementById('campoBusqueda').value = '';
             document.getElementById('filtroFecha').value = 'todos';
             document.getElementById('filtroTipo').value = '';
             document.getElementById('filtroActivo').value = '';

             cambiarFiltroFecha(); // Ocultar campos de fecha personalizada

             const container = document.getElementById('resultadosBusqueda');
             const contador = document.getElementById('contadorResultados');

             // Mensaje personalizado según el rol
             let mensaje = 'Utilice el buscador para encontrar registros o presione "Mostrar Todos"';

             if (userRole === 'sub-registrador') {
                 mensaje = 'Busque entre los registros que usted ha creado';
             } else if (userRole === 'registrador') {
                 mensaje = 'Busque entre sus registros y los de sus sub-registradores supervisados';
             } else if (userRole === 'autorizador') {
                 mensaje = 'Busque entre sus registros y los creados por registradores/sub-registradores';
             } else if (userRole === 'guardia') {
                 mensaje = 'Busque entre los registros que usted ha creado';
             } else if (userRole === 'administrador') {
                 mensaje = 'Busque entre todos los registros del sistema';
             }

             container.innerHTML = `<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">${mensaje}</p>`;
             contador.style.display = 'none';

             // Resetear paginación
             registrosPaginados = [];
             totalRegistrosFiltrados = 0;
             paginaActual = 0;

             showNotification('Búsqueda limpiada', 'info');
         }

         // Limpiar búsqueda sin mostrar notificación (para uso interno)
         function limpiarBusquedaSilenciosa() {
            if (document.getElementById('campoBusqueda')) {
                document.getElementById('campoBusqueda').value = '';
                document.getElementById('filtroFecha').value = 'todos';
                document.getElementById('filtroEstado').value = '';
                document.getElementById('filtroTipo').value = '';
                document.getElementById('filtroActivo').value = '';

                // Ocultar campos de fecha personalizada
                const fechaDesdeGroup = document.getElementById('fechaDesdeGroup');
                const fechaHastaGroup = document.getElementById('fechaHastaGroup');
                if (fechaDesdeGroup) fechaDesdeGroup.style.display = 'none';
                if (fechaHastaGroup) fechaHastaGroup.style.display = 'none';

                // Limpiar resultados
                const container = document.getElementById('resultadosBusqueda');
                const contador = document.getElementById('contadorResultados');

                if (container) {
                    container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">Utilice el buscador para encontrar registros</p>';
                }
                if (contador) {
                    contador.style.display = 'none';
                }

                // Limpiar arrays de búsqueda
                registrosBusqueda = [];
                registrosOriginales = [];
            }
         }


         // Funciones para módulo Esperadas
         function toggleDocumentoExtranjeroEsperada() {
            const checkbox = document.getElementById('esDocumentoExtranjeroEsperada');
            const documentoInput = document.getElementById('documentoEsperada');
            const documentoLabel = document.getElementById('documentoEsperadaLabel');
            const documentoMessage = document.getElementById('documentoEsperadaMessage');

            if (checkbox.checked) {
                documentoLabel.textContent = 'Documento Extranjero';
                documentoInput.placeholder = 'Número de documento';
                documentoInput.maxLength = 20;
                documentoInput.classList.add('documento-extranjero');
                documentoMessage.style.display = 'block';
                documentoMessage.textContent = 'Documento extranjero registrado';
                documentoMessage.style.color = '#ef4444';
            } else {
                documentoLabel.textContent = 'RUT';
                documentoInput.placeholder = '12.345.678-9';
                documentoInput.maxLength = 12;
                documentoInput.classList.remove('documento-extranjero');
                documentoMessage.style.display = 'none';
            }
            documentoInput.value = '';
         }

         function limpiarEsperada() {
            document.getElementById('esperadaForm').reset();
            document.getElementById('fechaEspera').value = new Date().toISOString().split('T')[0];
            toggleDocumentoExtranjeroEsperada();
            editandoEsperada = null;
            showNotification('Formulario limpiado', 'info');
         }

         async function cargarEsperadas() {
            try {
                const querySnapshot = await getDocs(collection(db, 'esperadas'));
                esperadas = [];
                querySnapshot.forEach((docSnapshot) => {
                    esperadas.push({
                        id: docSnapshot.id,
                        ...docSnapshot.data()
                    });
                });
                renderEsperadas();
            } catch (error) {
                console.error('Error cargando esperadas:', error);
                showNotification('Error al cargar esperadas', 'error');
            }
         }

         function renderEsperadas() {
            const container = document.getElementById('personasEsperadas');
            if (!container) return;

            container.innerHTML = '';

            let esperadasFiltradas = [...esperadas];

            // Filtrar según el rol del usuario
            if (userRole === 'registrador' || userRole === 'sub-registrador') {
                const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                esperadasFiltradas = esperadasFiltradas.filter(e => e.quienEspera === userName || e.registradoPor === userName);
            } else if (userRole === 'autorizador') {
                esperadasFiltradas = esperadasFiltradas.filter(e =>
                    e.estado === 'autorizada' || e.registradoPorRol === 'registrador' || e.registradoPorRol === 'sub-registrador'
                );
            }

            if (esperadasFiltradas.length === 0) {
                container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No hay personas esperadas</p>';
                return;
            }

            esperadasFiltradas.forEach(esperada => {
                const esperadaCard = createEsperadaCard(esperada);
                container.appendChild(esperadaCard);
            });
         }

         function createEsperadaCard(esperada) {
            const card = document.createElement('div');
            card.className = `esperada-card ${esperada.estado || 'pendiente'}`;

            const initials = esperada.nombre.split(' ').map(n => n[0]).join('').substring(0, 2);

            const estadoClass = {
                'pendiente': 'status-pending',
                'autorizada': 'status-authorized',
                'rechazada': 'status-rejected'
            }[esperada.estado] || 'status-pending';

            let actionButtons = '';

            if (esperada.estado !== 'autorizada' || userRole === 'administrador') {
                actionButtons += `<button class="btn-sm btn-edit" onclick="editarEsperada('${esperada.id}')">Editar</button>`;
            }

            if (userRole === 'administrador' || userRole === 'autorizador') {
                if (esperada.estado === 'pendiente') {
                    actionButtons += `
                        <button class="btn-sm btn-primary" onclick="autorizarEsperada('${esperada.id}')">Autorizar</button>
                        <button class="btn-sm btn-reject" onclick="rechazarEsperada('${esperada.id}')">Rechazar</button>
                    `;
                }
                if (esperada.estado === 'autorizada') {
                    const toggleText = esperada.activa === false ? 'Activar' : 'Desactivar';
                    actionButtons += `<button class="btn-sm btn-toggle" onclick="toggleEsperada('${esperada.id}')">${toggleText}</button>`;
                }
            }

            actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarEsperadaConfirm('${esperada.id}')">Eliminar</button>`;

            card.innerHTML = `
                <div class="user-card-header">
                    <div class="user-card-avatar">${initials}</div>
                    <div class="user-card-info">
                        <h3>${esperada.nombre}</h3>
                        <p class="${esperada.esDocumentoExtranjero ? 'documento-extranjero' : ''}">${esperada.documento}</p>
                    </div>
                </div>
                <div class="user-card-details">
                    <div class="user-detail-item">
                        <span class="user-detail-label">Fecha de Espera:</span>
                        <span class="user-detail-value">${esperada.fechaEspera}</span>
                    </div>
                    <div class="user-detail-item">
                        <span class="user-detail-label">Quien Espera:</span>
                        <span class="user-detail-value">${esperada.quienEspera}</span>
                    </div>
                    <div class="user-detail-item">
                    <span class="user-detail-label">Estado:</span>
                    <span class="status-badge ${estadoClass}">${esperada.estado || 'pendiente'}</span>
                </div>
                <div class="user-detail-item">
                    <span class="user-detail-label">Registrado por:</span>
                    <span class="user-detail-value">${esperada.registradoPor}</span>
                </div>
                ${esperada.autorizadoPor ? `
                    <div class="user-detail-item">
                        <span class="user-detail-label">Autorizado por:</span>
                        <span class="user-detail-value">${esperada.autorizadoPor}</span>
                    </div>
                ` : ''}
            </div>
            <div class="user-card-actions">
                ${actionButtons}
            </div>
         `;

         return card;
         }

         // Verificar si una persona está esperada
         async function verificarPersonaEsperada(documento, fecha) {
             try {
                 const q = query(
                     collection(db, 'esperadas'),
                     where('documento', '==', documento),
                     where('fechaEspera', '==', fecha),
                     where('estado', '==', 'autorizada'),
                     where('activa', '!=', false)
                 );
                 const querySnapshot = await getDocs(q);

                 if (!querySnapshot.empty) {
                     let esperada = null;
                     querySnapshot.forEach((docSnapshot) => {
                         esperada = { id: docSnapshot.id, ...docSnapshot.data() };
                     });
                     return esperada;
                 }
                 return null;
             } catch (error) {
                 console.error('Error verificando persona esperada:', error);
                 return null;
             }
         }

         // Verificar bloqueos y mostrar alerta específica para guardias
         async function verificarBloqueosPorDocumento(documento) {
             try {
                 const q = query(
                     collection(db, 'bloqueos'),
                     where('documento', '==', documento),
                     where('activo', '!=', false)
                 );
                 const querySnapshot = await getDocs(q);

                 let bloqueos = [];
                 querySnapshot.forEach((docSnapshot) => {
                     const bloqueo = { id: docSnapshot.id, ...docSnapshot.data() };

                     // Verificar si el bloqueo está vigente
                     if (!bloqueo.indefinido) {
                         const hoy = new Date().toISOString().split('T')[0];
                         if (hoy >= bloqueo.fechaDesde && hoy <= bloqueo.fechaHasta) {
                             bloqueos.push(bloqueo);
                         }
                     } else {
                         bloqueos.push(bloqueo);
                     }
                 });

                 return bloqueos;
             } catch (error) {
                 console.error('Error verificando bloqueos por documento:', error);
                 return [];
             }
         }

         // Verificar bloqueos por patente
         async function verificarBloqueosPorPatente(patente) {
             try {
                 const q = query(
                     collection(db, 'bloqueos'),
                     where('patente', '==', patente),
                     where('activo', '!=', false)
                 );
                 const querySnapshot = await getDocs(q);

                 let bloqueos = [];
                 querySnapshot.forEach((docSnapshot) => {
                     const bloqueo = { id: docSnapshot.id, ...docSnapshot.data() };

                     // Verificar si el bloqueo está vigente
                     if (!bloqueo.indefinido) {
                         const hoy = new Date().toISOString().split('T')[0];
                         if (hoy >= bloqueo.fechaDesde && hoy <= bloqueo.fechaHasta) {
                             bloqueos.push(bloqueo);
                         }
                     } else {
                         bloqueos.push(bloqueo);
                     }
                 });

                 return bloqueos;
             } catch (error) {
                 console.error('Error verificando bloqueos por patente:', error);
                 return [];
             }
         }


         // Funciones para módulo Bloqueos
         function cambiarTipoBloqueo(tipo) {
         tipoBloqueoActual = tipo;

         const togglePersona = document.getElementById('togglePersona');
         const toggleVehiculo = document.getElementById('toggleVehiculo');
         const camposPersona = document.getElementById('camposPersona');
         const camposVehiculo = document.getElementById('camposVehiculo');

         if (tipo === 'persona') {
            togglePersona.classList.add('active');
            toggleVehiculo.classList.remove('active');
            camposPersona.style.display = 'block';
            camposVehiculo.style.display = 'none';

            document.getElementById('documentoBloqueo').required = true;
            document.getElementById('nombreBloqueo').required = true;
            document.getElementById('patenteBloqueo').required = false;
         } else {
            toggleVehiculo.classList.add('active');
            togglePersona.classList.remove('active');
            camposPersona.style.display = 'none';
            camposVehiculo.style.display = 'block';

            document.getElementById('documentoBloqueo').required = false;
            document.getElementById('nombreBloqueo').required = false;
            document.getElementById('patenteBloqueo').required = true;
         }
         }

         function toggleDocumentoExtranjeroBloqueo() {
         const checkbox = document.getElementById('esDocumentoExtranjeroBloqueo');
         const documentoInput = document.getElementById('documentoBloqueo');
         const documentoLabel = document.getElementById('documentoBloqueoLabel');

         if (checkbox.checked) {
            documentoLabel.textContent = 'Documento Extranjero';
            documentoInput.placeholder = 'Número de documento';
            documentoInput.maxLength = 20;
            documentoInput.classList.add('documento-extranjero');
         } else {
            documentoLabel.textContent = 'RUT';
            documentoInput.placeholder = '12.345.678-9';
            documentoInput.maxLength = 12;
            documentoInput.classList.remove('documento-extranjero');
         }
         documentoInput.value = '';
         }

         function toggleFechasBloqueo() {
         const checkbox = document.getElementById('bloqueoIndefinido');
         const fechasGroup = document.getElementById('fechasBloqueoGroup');
         const fechaDesde = document.getElementById('fechaDesdeBloqueo');
         const fechaHasta = document.getElementById('fechaHastaBloqueo');

         if (checkbox.checked) {
            fechasGroup.style.display = 'none';
            fechaDesde.required = false;
            fechaHasta.required = false;
         } else {
            fechasGroup.style.display = 'block';
            fechaDesde.required = true;
            fechaHasta.required = true;
         }
         }


         function limpiarBloqueo() {
         document.getElementById('bloqueoForm').reset();
         cambiarTipoBloqueo('persona');
         toggleDocumentoExtranjeroBloqueo();
         toggleFechasBloqueo();
         document.getElementById('otroMotivoGroup').style.display = 'none';
         editandoBloqueo = null;
         showNotification('Formulario limpiado', 'info');
         }

         async function cargarBloqueos() {
         try {
           const querySnapshot = await getDocs(collection(db, 'bloqueos'));
           bloqueos = [];
           querySnapshot.forEach((docSnapshot) => {
               bloqueos.push({
                   id: docSnapshot.id,
                   ...docSnapshot.data()
               });
           });
           renderBloqueos();
         } catch (error) {
           console.error('Error cargando bloqueos:', error);
           showNotification('Error al cargar bloqueos', 'error');
         }
         }

         function renderBloqueos() {
         const container = document.getElementById('listaBloqueos');
         if (!container) return;

         container.innerHTML = '';

         if (bloqueos.length === 0) {
           container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No hay bloqueos registrados</p>';
           return;
         }

         bloqueos.forEach(bloqueo => {
           const bloqueoCard = createBloqueoCard(bloqueo);
           container.appendChild(bloqueoCard);
         });
         }

         function createBloqueoCard(bloqueo) {
         const card = document.createElement('div');
         card.className = `bloqueo-card ${bloqueo.activo === false ? 'inactivo' : ''}`;

         const esTipoPersona = bloqueo.tipo === 'persona';
         const initials = esTipoPersona ? bloqueo.nombre.split(' ').map(n => n[0]).join('').substring(0, 2) : '🚗';

         const estadoClass = bloqueo.activo !== false ? 'status-bloqueado' : 'status-desbloqueado';
         const estadoTexto = bloqueo.activo !== false ? 'Bloqueado' : 'Desbloqueado';

         let actionButtons = '';

         if (userRole === 'administrador' || userRole === 'autorizador') {
           actionButtons += `<button class="btn-sm btn-edit" onclick="editarBloqueo('${bloqueo.id}')">Editar</button>`;

           if (bloqueo.activo !== false) {
               actionButtons += `<button class="btn-sm btn-desbloquear" onclick="desbloquear('${bloqueo.id}')">Desbloquear</button>`;
           } else {
               actionButtons += `<button class="btn-sm btn-bloquear" onclick="reactivarBloqueo('${bloqueo.id}')">Reactivar</button>`;
           }

           actionButtons += `<button class="btn-sm btn-cerrar-bloqueo" onclick="cerrarBloqueo('${bloqueo.id}')">Cerrar</button>`;
         }

         actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarBloqueoConfirm('${bloqueo.id}')">Eliminar</button>`;

         const fechasTexto = bloqueo.indefinido ? 'Indefinido' : `${bloqueo.fechaDesde} - ${bloqueo.fechaHasta}`;

         card.innerHTML = `
           <div class="bloqueo-tipo bloqueo-${bloqueo.tipo}">${bloqueo.tipo.toUpperCase()}</div>
           <div class="user-card-header">
               <div class="user-card-avatar">${initials}</div>
               <div class="user-card-info">
                   <h3>${esTipoPersona ? bloqueo.nombre : bloqueo.patente}</h3>
                   ${esTipoPersona ? `<p class="${bloqueo.esDocumentoExtranjero ? 'documento-extranjero' : ''}">${bloqueo.documento}</p>` : '<p>Vehículo</p>'}
               </div>
           </div>
           <div class="user-card-details">
               <div class="user-detail-item">
                   <span class="user-detail-label">Motivo:</span>
                   <span class="user-detail-value">${bloqueo.motivo === 'otro' ? bloqueo.otroMotivo : bloqueo.motivo}</span>
               </div>
               <div class="user-detail-item">
                   <span class="user-detail-label">Período:</span>
                   <span class="user-detail-value">${fechasTexto}</span>
               </div>
               <div class="user-detail-item">
                   <span class="user-detail-label">Estado:</span>
                   <span class="status-badge ${estadoClass}">${estadoTexto}</span>
               </div>
               <div class="user-detail-item">
                   <span class="user-detail-label">Bloqueado por:</span>
                   <span class="user-detail-value">${bloqueo.bloqueadoPor}</span>
               </div>
               ${bloqueo.desbloqueadoPor ? `
                   <div class="user-detail-item">
                       <span class="user-detail-label">Desbloqueado por:</span>
                       <span class="user-detail-value">${bloqueo.desbloqueadoPor}</span>
                   </div>
               ` : ''}
           </div>
           <div class="user-card-actions">
               ${actionButtons}
           </div>
         `;

         return card;
         }

         function buscarBloqueos() {
         const termino = document.getElementById('buscarBloqueo').value.toLowerCase().trim();
         const filtroEstado = document.getElementById('filtroEstadoBloqueo').value;

         let bloqueosFiltrados = [...bloqueos];

         if (termino) {
           bloqueosFiltrados = bloqueosFiltrados.filter(bloqueo => {
               const campos = [
                   bloqueo.documento || '',
                   bloqueo.nombre || '',
                   bloqueo.patente || '',
                   bloqueo.motivo || '',
                   bloqueo.otroMotivo || ''
               ];
               return campos.some(campo => campo.toString().toLowerCase().includes(termino));
           });
         }

         if (filtroEstado) {
           const esActivo = filtroEstado === 'activo';
           bloqueosFiltrados = bloqueosFiltrados.filter(bloqueo =>
               esActivo ? bloqueo.activo !== false : bloqueo.activo === false
           );
         }

         // Renderizar resultados filtrados
         const container = document.getElementById('listaBloqueos');
         container.innerHTML = '';

         if (bloqueosFiltrados.length === 0) {
           container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No se encontraron bloqueos</p>';
           return;
         }

         bloqueosFiltrados.forEach(bloqueo => {
           const bloqueoCard = createBloqueoCard(bloqueo);
           container.appendChild(bloqueoCard);
         });
         }

         // Funciones para verificar bloqueos en el registro
         async function verificarBloqueos(documento, patentes = []) {
         try {
           const querySnapshot = await getDocs(collection(db, 'bloqueos'));
           let bloqueosActivos = [];

           querySnapshot.forEach((docSnapshot) => {
               const bloqueo = { id: docSnapshot.id, ...docSnapshot.data() };

               // Solo verificar bloqueos activos
               if (bloqueo.activo === false) return;

               // Verificar si el bloqueo está vigente
               if (!bloqueo.indefinido) {
                   const hoy = new Date().toISOString().split('T')[0];
                   if (hoy < bloqueo.fechaDesde || hoy > bloqueo.fechaHasta) return;
               }

               // Verificar bloqueo de persona
               if (bloqueo.tipo === 'persona' && bloqueo.documento === documento) {
                   bloqueosActivos.push(bloqueo);
               }

               // Verificar bloqueo de vehículo
               if (bloqueo.tipo === 'vehiculo' && patentes.includes(bloqueo.patente)) {
                   bloqueosActivos.push(bloqueo);
               }
           });

           return bloqueosActivos;
         } catch (error) {
           console.error('Error verificando bloqueos:', error);
           return [];
         }
         }

         // Funciones para feriados
         function limpiarFeriado() {
         document.getElementById('feriadoForm').reset();
         showNotification('Formulario limpiado', 'info');
         }

         async function cargarFeriados() {
         try {
           const querySnapshot = await getDocs(collection(db, 'feriados'));
           feriados = [];
           querySnapshot.forEach((docSnapshot) => {
               feriados.push({
                   id: docSnapshot.id,
                   ...docSnapshot.data()
               });
           });
           renderFeriados();
         } catch (error) {
           console.error('Error cargando feriados:', error);
           showNotification('Error al cargar feriados', 'error');
         }
         }

         function renderFeriados() {
         const container = document.getElementById('listaFeriados');
         if (!container) return;

         container.innerHTML = '';

         if (feriados.length === 0) {
           container.innerHTML = '<p style="color: var(--text-light); text-align: center;">No hay feriados registrados</p>';
           return;
         }

         // Ordenar por fecha
         const feriadosOrdenados = [...feriados].sort((a, b) => new Date(a.fecha) - new Date(b.fecha));

         feriadosOrdenados.forEach(feriado => {
           const feriadoItem = document.createElement('div');
           feriadoItem.className = 'feriado-item';
           feriadoItem.innerHTML = `
               <span class="feriado-fecha">${feriado.fecha}</span>
               <span class="feriado-nombre">${feriado.nombre}</span>
               <button class="btn-eliminar-feriado" onclick="eliminarFeriadoConfirm('${feriado.id}')">Eliminar</button>
           `;
           container.appendChild(feriadoItem);
         });
         }

         function generarFeriadosChile() {
         const año = document.getElementById('añoFeriados').value;

         const feriadosChile = [
           { fecha: `${año}-01-01`, nombre: 'Año Nuevo' },
           { fecha: `${año}-05-01`, nombre: 'Día del Trabajador' },
           { fecha: `${año}-05-21`, nombre: 'Día de las Glorias Navales' },
           { fecha: `${año}-06-29`, nombre: 'San Pedro y San Pablo' },
           { fecha: `${año}-07-16`, nombre: 'Día de la Virgen del Carmen' },
           { fecha: `${año}-08-15`, nombre: 'Asunción de la Virgen' },
           { fecha: `${año}-09-18`, nombre: 'Independencia Nacional' },
           { fecha: `${año}-09-19`, nombre: 'Día de las Glorias del Ejército' },
           { fecha: `${año}-10-12`, nombre: 'Encuentro de Dos Mundos' },
           { fecha: `${año}-10-31`, nombre: 'Día de las Iglesias Evangélicas y Protestantes' },
           { fecha: `${año}-11-01`, nombre: 'Día de Todos los Santos' },
           { fecha: `${año}-12-08`, nombre: 'Inmaculada Concepción' },
           { fecha: `${año}-12-25`, nombre: 'Navidad' }
         ];

         // Calcular fechas variables (Semana Santa)
         const fechaPascua = calcularPascua(parseInt(año));
         const viernesSanto = new Date(fechaPascua);
         viernesSanto.setDate(fechaPascua.getDate() - 2);
         const sabadoSanto = new Date(fechaPascua);
         sabadoSanto.setDate(fechaPascua.getDate() - 1);

         feriadosChile.push(
           { fecha: viernesSanto.toISOString().split('T')[0], nombre: 'Viernes Santo' },
           { fecha: sabadoSanto.toISOString().split('T')[0], nombre: 'Sábado Santo' }
         );

         // Agregar feriados a la base de datos
         feriadosChile.forEach(async (feriado) => {
           try {
               // Verificar si ya existe
               const existe = feriados.some(f => f.fecha === feriado.fecha);
               if (!existe) {
                   const docRef = await addDoc(collection(db, 'feriados'), feriado);
                   feriados.push({ id: docRef.id, ...feriado });
               }
           } catch (error) {
               console.error('Error agregando feriado:', error);
           }
         });

         renderFeriados();
         showNotification(`Feriados de Chile ${año} generados exitosamente`, 'success');
         }

         function calcularPascua(año) {
         const a = año % 19;
         const b = Math.floor(año / 100);
         const c = año % 100;
         const d = Math.floor(b / 4);
         const e = b % 4;
         const f = Math.floor((b + 8) / 25);
         const g = Math.floor((b - f + 1) / 3);
         const h = (19 * a + b - d - g + 15) % 30;
         const i = Math.floor(c / 4);
         const k = c % 4;
         const l = (32 + 2 * e + 2 * i - h - k) % 7;
         const m = Math.floor((a + 11 * h + 22 * l) / 451);
         const n = Math.floor((h + l - 7 * m + 114) / 31);
         const p = (h + l - 7 * m + 114) % 31;
         return new Date(año, n - 1, p + 1);
         }

         // Funciones para CRUD de esperadas, bloqueos y feriados
         async function autorizarEsperada(id) {
         if (confirm('¿Está seguro de que desea autorizar esta persona esperada?')) {
           try {
               const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
               const datosActualizados = {
                   estado: 'autorizada',
                   autorizadoPor: userName,
                   fechaAutorizacion: new Date().toISOString().split('T')[0]
               };

               await actualizarRegistro(id, datosActualizados, 'esperadas');
               const esperadaIndex = esperadas.findIndex(e => e.id === id);
               if (esperadaIndex !== -1) {
                   esperadas[esperadaIndex] = { ...esperadas[esperadaIndex], ...datosActualizados };
               }

               renderEsperadas();
               showNotification('Persona esperada autorizada', 'success');
           } catch (error) {
               showNotification('Error al autorizar', 'error');
           }
         }
         }

         async function rechazarEsperada(id) {
         if (confirm('¿Está seguro de que desea rechazar esta persona esperada?')) {
           try {
               const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
               const datosActualizados = {
                   estado: 'rechazada',
                   rechazadoPor: userName,
                   fechaRechazo: new Date().toISOString().split('T')[0]
               };

               await actualizarRegistro(id, datosActualizados, 'esperadas');
               const esperadaIndex = esperadas.findIndex(e => e.id === id);
               if (esperadaIndex !== -1) {
                   esperadas[esperadaIndex] = { ...esperadas[esperadaIndex], ...datosActualizados };
               }

               renderEsperadas();
               showNotification('Persona esperada rechazada', 'info');
           } catch (error) {
               showNotification('Error al rechazar', 'error');
           }
         }
         }

         async function desbloquear(id) {
         if (confirm('¿Está seguro de que desea desbloquear este elemento?')) {
           try {
               const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
               const datosActualizados = {
                   activo: false,
                   desbloqueadoPor: userName,
                   fechaDesbloqueo: new Date().toISOString().split('T')[0]
               };

               await actualizarRegistro(id, datosActualizados, 'bloqueos');
               const bloqueoIndex = bloqueos.findIndex(b => b.id === id);
               if (bloqueoIndex !== -1) {
                   bloqueos[bloqueoIndex] = { ...bloqueos[bloqueoIndex], ...datosActualizados };
               }

               renderBloqueos();
               showNotification('Bloqueo desactivado', 'success');
           } catch (error) {
               showNotification('Error al desbloquear', 'error');
           }
         }
         }

         async function reactivarBloqueo(id) {
         if (confirm('¿Está seguro de que desea reactivar este bloqueo?')) {
           try {
               const datosActualizados = {
                   activo: true,
                   desbloqueadoPor: null,
                   fechaDesbloqueo: null
               };

               await actualizarRegistro(id, datosActualizados, 'bloqueos');
               const bloqueoIndex = bloqueos.findIndex(b => b.id === id);
               if (bloqueoIndex !== -1) {
                   bloqueos[bloqueoIndex] = { ...bloqueos[bloqueoIndex], ...datosActualizados };
               }

               renderBloqueos();
               showNotification('Bloqueo reactivado', 'info');
           } catch (error) {
               showNotification('Error al reactivar bloqueo', 'error');
           }
         }
         }


         // Función para cerrar alerta de bloqueo
         function cerrarAlertaBloqueo() {
         const alerta = document.getElementById('bloqueoAlert');
         if (alerta) {
            alerta.remove();
         }
         }

         // Funciones adicionales para CRUD
         function editarEsperada(id) {
         const esperada = esperadas.find(e => e.id === id);
         if (!esperada) return;

         editandoEsperada = id;

         document.getElementById('esDocumentoExtranjeroEsperada').checked = esperada.esDocumentoExtranjero || false;
         toggleDocumentoExtranjeroEsperada();

         document.getElementById('documentoEsperada').value = esperada.documento;
         document.getElementById('nombreEsperada').value = esperada.nombre;
         document.getElementById('fechaEspera').value = esperada.fechaEspera;
         document.getElementById('quienEspera').value = esperada.quienEspera;

         showNotification('Datos cargados para edición', 'info');
         }

         function toggleEsperada(id) {
         const esperada = esperadas.find(e => e.id === id);
         if (!esperada) return;

         const nuevoEstadoActivo = esperada.activa === false ? true : false;
         const accion = nuevoEstadoActivo ? 'activar' : 'desactivar';

         if (confirm(`¿Está seguro de que desea ${accion} esta persona esperada?`)) {
            actualizarRegistro(id, { activa: nuevoEstadoActivo }, 'esperadas').then(() => {
                esperada.activa = nuevoEstadoActivo;
                renderEsperadas();
                showNotification(`Persona esperada ${accion}da correctamente`, 'success');
            }).catch(() => {
                showNotification('Error al actualizar', 'error');
            });
         }
         }

         function eliminarEsperadaConfirm(id) {
         const esperada = esperadas.find(e => e.id === id);
         if (!esperada) return;

         if (confirm(`¿Está seguro de que desea eliminar a ${esperada.nombre}? Esta acción no se puede deshacer.`)) {
            deleteDoc(doc(db, 'esperadas', id)).then(() => {
                esperadas = esperadas.filter(e => e.id !== id);
                renderEsperadas();
                showNotification('Persona esperada eliminada correctamente', 'success');
            }).catch(() => {
                showNotification('Error al eliminar', 'error');
            });
         }
         }

         function editarBloqueo(id) {
         const bloqueo = bloqueos.find(b => b.id === id);
         if (!bloqueo) return;

         editandoBloqueo = id;

         cambiarTipoBloqueo(bloqueo.tipo);

         if (bloqueo.tipo === 'persona') {
            document.getElementById('esDocumentoExtranjeroBloqueo').checked = bloqueo.esDocumentoExtranjero || false;
            toggleDocumentoExtranjeroBloqueo();
            document.getElementById('documentoBloqueo').value = bloqueo.documento;
            document.getElementById('nombreBloqueo').value = bloqueo.nombre;
         } else {
            document.getElementById('patenteBloqueo').value = bloqueo.patente;
         }

         document.getElementById('motivoBloqueo').value = bloqueo.motivo;
         if (bloqueo.motivo === 'otro') {
            document.getElementById('otroMotivoGroup').style.display = 'block';
            document.getElementById('otroMotivo').value = bloqueo.otroMotivo;
         }

         document.getElementById('bloqueoIndefinido').checked = bloqueo.indefinido;
         toggleFechasBloqueo();

         if (!bloqueo.indefinido) {
            document.getElementById('fechaDesdeBloqueo').value = bloqueo.fechaDesde;
            document.getElementById('fechaHastaBloqueo').value = bloqueo.fechaHasta;
         }

         showNotification('Datos cargados para edición', 'info');
         }

         function cerrarBloqueo(id) {
         if (confirm('¿Está seguro de que desea cerrar este bloqueo permanentemente?')) {
            actualizarRegistro(id, {
                activo: false,
                cerrado: true,
                fechaCierre: new Date().toISOString().split('T')[0]
            }, 'bloqueos').then(() => {
                const bloqueoIndex = bloqueos.findIndex(b => b.id === id);
                if (bloqueoIndex !== -1) {
                    bloqueos[bloqueoIndex].activo = false;
                    bloqueos[bloqueoIndex].cerrado = true;
                }
                renderBloqueos();
                showNotification('Bloqueo cerrado permanentemente', 'info');
            }).catch(() => {
                showNotification('Error al cerrar bloqueo', 'error');
            });
         }
         }

         function eliminarBloqueoConfirm(id) {
         const bloqueo = bloqueos.find(b => b.id === id);
         if (!bloqueo) return;

         const elemento = bloqueo.tipo === 'persona' ? bloqueo.nombre : bloqueo.patente;
         if (confirm(`¿Está seguro de que desea eliminar el bloqueo de ${elemento}? Esta acción no se puede deshacer.`)) {
            deleteDoc(doc(db, 'bloqueos', id)).then(() => {
                bloqueos = bloqueos.filter(b => b.id !== id);
                renderBloqueos();
                showNotification('Bloqueo eliminado correctamente', 'success');
            }).catch(() => {
                showNotification('Error al eliminar bloqueo', 'error');
            });
         }
         }

         function eliminarFeriadoConfirm(id) {
         const feriado = feriados.find(f => f.id === id);
         if (!feriado) return;

         if (confirm(`¿Está seguro de que desea eliminar el feriado "${feriado.nombre}"?`)) {
            deleteDoc(doc(db, 'feriados', id)).then(() => {
                feriados = feriados.filter(f => f.id !== id);
                renderFeriados();
                showNotification('Feriado eliminado correctamente', 'success');
            }).catch(() => {
                showNotification('Error al eliminar feriado', 'error');
            });
         }
         }

         // Funciones para días especiales
         async function cargarDiasEspeciales() {
             try {
                 if (!db) {
                     console.log('Base de datos no disponible para días especiales');
                     return;
                 }

                 const querySnapshot = await getDocs(collection(db, 'dias_especiales'));
                 diasEspeciales = [];

                 querySnapshot.forEach((docSnapshot) => {
                     try {
                         const data = docSnapshot.data();
                         if (data && data.nombrePersona && data.documentoPersona) {
                             diasEspeciales.push({
                                 id: docSnapshot.id,
                                 ...data
                             });
                         }
                     } catch (docError) {
                         console.warn('Error procesando documento de día especial:', docError);
                     }
                 });

                 console.log('Días especiales cargados:', diasEspeciales.length);
                 renderTablaDiasEspeciales();
                 actualizarContadoresDiasEspeciales();

             } catch (error) {
                 console.error('Error cargando días especiales:', error);
                 diasEspeciales = [];
             }
         }

         function buscarPersonaDiasEspeciales() {
             const termino = document.getElementById('buscarPersonaDiasEspeciales').value.toLowerCase().trim();
             const resultadosDiv = document.getElementById('resultadosBusquedaDias');

             if (termino.length < 2) {
                 resultadosDiv.style.display = 'none';
                 return;
             }

             // Asegurarse de que registrosOriginales esté cargado
             if (!registrosOriginales || registrosOriginales.length === 0) {
                 cargarTrabajadoresParaDiasEspeciales().then(() => {
                     buscarPersonaDiasEspeciales(); // Volver a ejecutar después de cargar
                 });
                 return;
             }

             // FILTRAR SOLO TRABAJADORES AUTORIZADOS (NO ASISTENCIAS)
             const trabajadoresAutorizados = registrosOriginales.filter(registro =>
                 registro.tipo === 'trabajador' &&
                 registro.estado === 'autorizado' &&
                 registro.activo === true
             );

             // Buscar en trabajadores autorizados
             const resultados = trabajadoresAutorizados.filter(registro => {
                 const campos = [
                     registro.documento || '',
                     registro.nombre || '',
                     registro.empresa || '',
                     registro.subContrato || ''
                 ];
                 return campos.some(campo => campo.toString().toLowerCase().includes(termino));
             });

             // Buscar empresas y subcontratos en trabajadores autorizados
             const empresasEncontradas = new Map();
             const subcontratosEncontrados = new Map();

             trabajadoresAutorizados.forEach(registro => {
                 const empresa = registro.empresa?.toLowerCase() || '';
                 const subcontrato = registro.subContrato?.toLowerCase() || '';

                 // CORRECCIÓN: Solo buscar empresas SIN subcontrato cuando se busca por empresa
                 if (empresa.includes(termino)) {
                     if (!registro.subContrato || registro.subContrato.trim() === '') {
                         // Solo trabajadores SIN subcontrato para la búsqueda de empresa
                         if (!empresasEncontradas.has(registro.empresa)) {
                             empresasEncontradas.set(registro.empresa, {
                                 empresa: registro.empresa,
                                 registros: []
                             });
                         }
                         empresasEncontradas.get(registro.empresa).registros.push(registro);
                     }
                 }

                 // Buscar subcontratos específicos
                 if (subcontrato.includes(termino) && registro.subContrato && registro.subContrato.trim() !== '') {
                     const key = `${registro.empresa}-${registro.subContrato}`;
                     if (!subcontratosEncontrados.has(key)) {
                         subcontratosEncontrados.set(key, {
                             empresa: registro.empresa,
                             subcontrato: registro.subContrato,
                             registros: []
                         });
                     }
                     subcontratosEncontrados.get(key).registros.push(registro);
                 }
             });

             if (resultados.length === 0 && empresasEncontradas.size === 0 && subcontratosEncontrados.size === 0) {
                 resultadosDiv.innerHTML = '<div class="resultado-item">No se encontraron trabajadores autorizados</div>';
                 resultadosDiv.style.display = 'block';
                 return;
             }

             let html = '';

             // Mostrar opciones de empresa completa (SOLO SIN SUBCONTRATO)
             empresasEncontradas.forEach((data, empresa) => {
                 if (data.registros.length > 0) {
                     html += `
                         <div class="resultado-item resultado-empresa" onclick="seleccionarEmpresaCompleta('${empresa}')">
                             <div class="resultado-nombre">🏢 EMPRESA: ${empresa}</div>
                             <div class="resultado-detalles">
                                 ${data.registros.length} trabajador(es) autorizado(s) - Solo empresa (sin subcontrato)
                             </div>
                         </div>
                     `;
                 }
             });

             // Mostrar opciones de subcontrato específico
             subcontratosEncontrados.forEach((data, key) => {
                 if (data.registros.length > 0) {
                     html += `
                         <div class="resultado-item resultado-subcontrato" onclick="seleccionarSubcontratoEspecifico('${data.empresa}', '${data.subcontrato}')">
                             <div class="resultado-nombre">🔧 SUBCONTRATO: ${data.subcontrato}</div>
                             <div class="resultado-detalles">
                                 Empresa: ${data.empresa} - ${data.registros.length} trabajador(es) autorizado(s)
                             </div>
                         </div>
                     `;
                 }
             });

             // Mostrar resultados individuales (limitados a 5)
             if (resultados.length > 0) {
                 html += '<div class="separador-resultados">--- Trabajadores individuales ---</div>';
                 resultados.slice(0, 5).forEach(registro => {
                     html += `
                         <div class="resultado-item" onclick="seleccionarPersonaDias('${registro.id}')">
                             <div class="resultado-nombre">👤 ${registro.nombre}</div>
                             <div class="resultado-detalles">
                                 ${registro.documento} - ${registro.empresa}
                                 ${registro.subContrato ? ` - ${registro.subContrato}` : ''}
                             </div>
                         </div>
                     `;
                 });
             }

             resultadosDiv.innerHTML = html;
             resultadosDiv.style.display = 'block';
         }

         // FUNCIÓN CORREGIDA para seleccionar empresa completa (SOLO SIN SUBCONTRATO)
         function seleccionarEmpresaCompleta(empresa) {
             const registrosEmpresa = registrosOriginales.filter(r =>
                 r.empresa === empresa &&
                 r.tipo === 'trabajador' &&
                 r.estado === 'autorizado' &&
                 r.activo === true &&
                 (!r.subContrato || r.subContrato.trim() === '') // SOLO SIN SUBCONTRATO
             );

             personaSeleccionadaDias = {
                 tipo: 'empresa',
                 empresa: empresa,
                 registros: registrosEmpresa,
                 cantidad: registrosEmpresa.length
             };

             document.getElementById('nombreSeleccionado').textContent = `EMPRESA: ${empresa}`;
             document.getElementById('documentoSeleccionado').textContent = `${registrosEmpresa.length} trabajador(es) autorizado(s)`;
             document.getElementById('empresaSeleccionada').textContent = empresa;
             document.getElementById('subcontratoSeleccionado').textContent = 'Solo empresa (sin subcontrato específico)';

             document.getElementById('buscarPersonaDiasEspeciales').value = `🏢 ${empresa}`;
             document.getElementById('resultadosBusquedaDias').style.display = 'none';
             document.getElementById('personaSeleccionadaDias').style.display = 'block';
         }

         // FUNCIÓN CORREGIDA para seleccionar subcontrato específico
         function seleccionarSubcontratoEspecifico(empresa, subcontrato) {
             const registrosSubcontrato = registrosOriginales.filter(r =>
                 r.empresa === empresa &&
                 r.subContrato === subcontrato &&
                 r.tipo === 'trabajador' &&
                 r.estado === 'autorizado' &&
                 r.activo === true
             );

             personaSeleccionadaDias = {
                 tipo: 'subcontrato',
                 empresa: empresa,
                 subcontrato: subcontrato,
                 registros: registrosSubcontrato,
                 cantidad: registrosSubcontrato.length
             };

             document.getElementById('nombreSeleccionado').textContent = `SUBCONTRATO: ${subcontrato}`;
             document.getElementById('documentoSeleccionado').textContent = `${registrosSubcontrato.length} trabajador(es) autorizado(s)`;
             document.getElementById('empresaSeleccionada').textContent = empresa;
             document.getElementById('subcontratoSeleccionado').textContent = subcontrato;

             document.getElementById('buscarPersonaDiasEspeciales').value = `🔧 ${empresa} - ${subcontrato}`;
             document.getElementById('resultadosBusquedaDias').style.display = 'none';
             document.getElementById('personaSeleccionadaDias').style.display = 'block';
         }

         // Función específica para cargar solo trabajadores autorizados (para días especiales)
         async function cargarTrabajadoresParaDiasEspeciales() {
             try {
                 const querySnapshot = await getDocs(collection(db, 'registros'));
                 const trabajadoresAutorizados = [];

                 querySnapshot.forEach((docSnapshot) => {
                     const registro = { id: docSnapshot.id, ...docSnapshot.data() };
                     // SOLO trabajadores autorizados y activos (NO asistencias)
                     if (registro.tipo === 'trabajador' &&
                         registro.estado === 'autorizado' &&
                         registro.activo === true) {
                         trabajadoresAutorizados.push(registro);
                     }
                 });

                 // Ordenar por timestamp descendente
                 trabajadoresAutorizados.sort((a, b) => {
                     const fechaA = new Date(a.timestamp || `${a.fecha} ${a.hora}`);
                     const fechaB = new Date(b.timestamp || `${b.fecha} ${b.hora}`);
                     return fechaB - fechaA;
                 });

                 // Actualizar registrosOriginales solo con trabajadores
                 registrosOriginales = trabajadoresAutorizados;

                 console.log(`Cargados ${trabajadoresAutorizados.length} trabajadores autorizados para días especiales`);

             } catch (error) {
                 console.error('Error cargando trabajadores para días especiales:', error);
                 showNotification('Error al cargar trabajadores', 'error');
             }
         }


         // Función para validar la selección antes de usar
         function validarSeleccionDiasEspeciales() {
             if (!personaSeleccionadaDias) {
                 return false;
             }

             // Si es selección múltiple
             if (personaSeleccionadaDias.tipo === 'empresa' || personaSeleccionadaDias.tipo === 'subcontrato') {
                 return personaSeleccionadaDias.registros && personaSeleccionadaDias.registros.length > 0;
             }

             // Si es selección individual
             return personaSeleccionadaDias.documento && personaSeleccionadaDias.nombre;
         }

         function seleccionarPersonaDias(registroId) {
              const registro = registrosOriginales.find(r => r.id === registroId);
              if (!registro) return;

              personaSeleccionadaDias = registro;

              document.getElementById('nombreSeleccionado').textContent = registro.nombre;
              document.getElementById('documentoSeleccionado').textContent = registro.documento;
              document.getElementById('empresaSeleccionada').textContent = registro.empresa;
              document.getElementById('subcontratoSeleccionado').textContent = registro.subContrato || 'N/A';

              document.getElementById('buscarPersonaDiasEspeciales').value = registro.nombre;
              document.getElementById('resultadosBusquedaDias').style.display = 'none';
              document.getElementById('personaSeleccionadaDias').style.display = 'block';
              }

         function cambiarSeleccionDias() {
              personaSeleccionadaDias = null;
              document.getElementById('buscarPersonaDiasEspeciales').value = '';
              document.getElementById('personaSeleccionadaDias').style.display = 'none';
              document.getElementById('buscarPersonaDiasEspeciales').focus();
              }

         function toggleTipoDia(tipo) {
              const checkbox = document.getElementById(`tipo${tipo.charAt(0).toUpperCase() + tipo.slice(1)}`);
              const opciones = document.getElementById(`opciones${tipo.charAt(0).toUpperCase() + tipo.slice(1)}`);

              if (checkbox.checked) {
              opciones.style.display = 'block';
              if (tipo === 'feriado') {
                cargarFeriadosSelector();
              }
              } else {
              opciones.style.display = 'none';
              // Limpiar selecciones
              if (tipo === 'sabado') {
                fechasSabado = [];
                document.querySelectorAll('input[name="sabadoTipo"]').forEach(r => r.checked = false);
                document.getElementById('sabadoMultiplesContainer').style.display = 'none';
                document.getElementById('sabadoFechaContainer').style.display = 'none';
                document.getElementById('sabadosFechas').innerHTML = '';
              } else if (tipo === 'domingo') {
                fechasDomingo = [];
                document.querySelectorAll('input[name="domingoTipo"]').forEach(r => r.checked = false);
                document.getElementById('domingoMultiplesContainer').style.display = 'none';
                document.getElementById('domingoFechaContainer').style.display = 'none';
                document.getElementById('domingosFechas').innerHTML = '';
              } else if (tipo === 'feriado') {
                feriadosSeleccionados = [];
                document.querySelectorAll('#feriadosSelector input[type="checkbox"]').forEach(cb => cb.checked = false);
              }
              }
              }

         function toggleFechasSabado(tipoSeleccion) {
              const multiplesContainer = document.getElementById('sabadoMultiplesContainer');
              const fechaContainer = document.getElementById('sabadoFechaContainer');

              if (tipoSeleccion === 'multiples') {
              multiplesContainer.style.display = 'flex'; // Cambiar a flex
              fechaContainer.style.display = 'none';
              } else {
              multiplesContainer.style.display = 'none';
              fechaContainer.style.display = 'block';
              }
              }

         function toggleFechasDomingo(tipoSeleccion) {
              const multiplesContainer = document.getElementById('domingoMultiplesContainer');
              const fechaContainer = document.getElementById('domingoFechaContainer');

              if (tipoSeleccion === 'multiples') {
              multiplesContainer.style.display = 'flex'; // Cambiar a flex
              fechaContainer.style.display = 'none';
              } else {
              multiplesContainer.style.display = 'none';
              fechaContainer.style.display = 'block';
              }
              }

         function agregarFechaSabado() {
                  const fechaInput = document.getElementById('sabadoFechaInput');
                  const fecha = fechaInput.value;

                  if (!fecha) {
                      showNotification('Seleccione una fecha', 'error');
                      return;
                  }

                  // CORRECCIÓN: Usar fecha local sin conversión UTC
                  const [año, mes, dia] = fecha.split('-');
                  const fechaObj = new Date(parseInt(año), parseInt(mes) - 1, parseInt(dia));

                  if (fechaObj.getDay() !== 6) { // 6 = Sábado
                      showNotification('La fecha seleccionada no es un sábado', 'error');
                      return;
                  }

                  if (fechasSabado.includes(fecha)) {
                      showNotification('Esta fecha ya fue agregada', 'error');
                      return;
                  }

                  fechasSabado.push(fecha);
                  fechaInput.value = '';
                  renderFechasSabado();
              }

         function agregarFechaDomingo() {
                  const fechaInput = document.getElementById('domingoFechaInput');
                  const fecha = fechaInput.value;

                  if (!fecha) {
                      showNotification('Seleccione una fecha', 'error');
                      return;
                  }

                  // CORRECCIÓN: Usar fecha local sin conversión UTC
                  const [año, mes, dia] = fecha.split('-');
                  const fechaObj = new Date(parseInt(año), parseInt(mes) - 1, parseInt(dia));

                  if (fechaObj.getDay() !== 0) { // 0 = Domingo
                      showNotification('La fecha seleccionada no es un domingo', 'error');
                      return;
                  }

                  if (fechasDomingo.includes(fecha)) {
                      showNotification('Esta fecha ya fue agregada', 'error');
                      return;
                  }

                  fechasDomingo.push(fecha);
                  fechaInput.value = '';
                  renderFechasDomingo();
              }

              function renderFechasSabado() {
              const container = document.getElementById('sabadosFechas');
              if (!container) return;

              container.innerHTML = '';
              container.style.display = 'flex'; // Asegurar que sea visible

              fechasSabado.forEach(fecha => {
              const fechaTag = document.createElement('div');
              fechaTag.className = 'date-tag';
              fechaTag.innerHTML = `
                ${fecha}
                <button type="button" class="date-remove" onclick="eliminarFechaSabado('${fecha}')">×</button>
              `;
              container.appendChild(fechaTag);
              });
              }

              function renderFechasDomingo() {
              const container = document.getElementById('domingosFechas');
              if (!container) return;

              container.innerHTML = '';
              container.style.display = 'flex'; // Asegurar que sea visible

              fechasDomingo.forEach(fecha => {
              const fechaTag = document.createElement('div');
              fechaTag.className = 'date-tag';
              fechaTag.innerHTML = `
                ${fecha}
                <button type="button" class="date-remove" onclick="eliminarFechaDomingo('${fecha}')">×</button>
              `;
              container.appendChild(fechaTag);
              });
              }

              function eliminarFechaSabado(fecha) {
              fechasSabado = fechasSabado.filter(f => f !== fecha);
              renderFechasSabado();
              }

              function eliminarFechaDomingo(fecha) {
              fechasDomingo = fechasDomingo.filter(f => f !== fecha);
              renderFechasDomingo();
              }

              function cargarFeriadosSelector() {
              const container = document.getElementById('feriadosSelector');
              container.innerHTML = '';

              if (feriados.length === 0) {
              container.innerHTML = '<p style="color: var(--text-light); text-align: center;">No hay feriados disponibles</p>';
              return;
              }

              // Ordenar feriados por fecha antes de mostrarlos
              const feriadosOrdenados = [...feriados].sort((a, b) => new Date(a.fecha) - new Date(b.fecha));

              feriadosOrdenados.forEach(feriado => {
              const feriadoDiv = document.createElement('div');
              feriadoDiv.className = 'feriado-checkbox';

              // Formatear la fecha correctamente para mostrar
              const fechaFormateada = new Date(feriado.fecha + 'T00:00:00').toLocaleDateString('es-CL');

              feriadoDiv.innerHTML = `
                <input type="checkbox" id="feriado-${feriado.id}" value="${feriado.id}" onchange="toggleFeriado('${feriado.id}')">
                <label for="feriado-${feriado.id}">${fechaFormateada} - ${feriado.nombre}</label>
              `;
              container.appendChild(feriadoDiv);
              });
              }

              function toggleFeriado(feriadoId) {
              const checkbox = document.getElementById(`feriado-${feriadoId}`);

              if (checkbox.checked) {
              if (!feriadosSeleccionados.includes(feriadoId)) {
                feriadosSeleccionados.push(feriadoId);
              }
              } else {
              feriadosSeleccionados = feriadosSeleccionados.filter(id => id !== feriadoId);
              }
              }

              function limpiarDiasEspeciales() {
                  console.log('=== LIMPIANDO DÍAS ESPECIALES ===');
                  debugPersonaSeleccionada('ANTES DE LIMPIAR');

                  document.getElementById('diasEspecialesForm').reset();

                  // RESETEAR COMPLETAMENTE LA SELECCIÓN
                  personaSeleccionadaDias = null;
                  fechasSabado = [];
                  fechasDomingo = [];
                  feriadosSeleccionados = [];
                  editandoDiaEspecial = null;

                  document.getElementById('buscarPersonaDiasEspeciales').value = '';
                  document.getElementById('personaSeleccionadaDias').style.display = 'none';
                  document.getElementById('resultadosBusquedaDias').style.display = 'none';

                  // Ocultar todas las opciones
                  document.getElementById('opcionesSabado').style.display = 'none';
                  document.getElementById('opcionesDomingo').style.display = 'none';
                  document.getElementById('opcionesFeriado').style.display = 'none';

                  // Limpiar contenedores
                  document.getElementById('sabadosFechas').innerHTML = '';
                  document.getElementById('domingosFechas').innerHTML = '';

                  // Limpiar checkboxes de tipos
                  document.getElementById('tipoSabado').checked = false;
                  document.getElementById('tipoDomingo').checked = false;
                  document.getElementById('tipoFeriado').checked = false;

                  // Limpiar feriados seleccionados
                  document.querySelectorAll('#feriadosSelector input[type="checkbox"]').forEach(cb => cb.checked = false);

                  debugPersonaSeleccionada('DESPUÉS DE LIMPIAR');
                  console.log('=== FIN LIMPIEZA ===');

                  showNotification('Formulario limpiado', 'info');
              }

              // También añade esta función auxiliar para validar el objeto personaSeleccionadaDias
              function validarPersonaSeleccionada(persona) {
                  if (!persona) return false;

                  if (typeof persona !== 'object') return false;

                  // Validar selección individual
                  const esIndividual = persona.documento && persona.nombre && persona.empresa;

                  // Validar selección múltiple
                  const esMultiple = persona.tipo &&
                                    (persona.tipo === 'empresa' || persona.tipo === 'subcontrato') &&
                                    persona.registros &&
                                    Array.isArray(persona.registros) &&
                                    persona.registros.length > 0;

                  return esIndividual || esMultiple;
              }

              // Función mejorada para limpiar días especiales con reset completo del objeto
              function limpiarDiasEspecialesSeguro() {
                  console.log('=== LIMPIANDO DÍAS ESPECIALES (SEGURO) ===');

                  try {
                      // Resetear formulario
                      const form = document.getElementById('diasEspecialesForm');
                      if (form) form.reset();

                      // RESETEAR COMPLETAMENTE TODAS LAS VARIABLES
                      personaSeleccionadaDias = null;
                      fechasSabado = [];
                      fechasDomingo = [];
                      feriadosSeleccionados = [];
                      editandoDiaEspecial = null;

                      // Limpiar UI
                      const busquedaInput = document.getElementById('buscarPersonaDiasEspeciales');
                      if (busquedaInput) busquedaInput.value = '';

                      const personaDiv = document.getElementById('personaSeleccionadaDias');
                      if (personaDiv) personaDiv.style.display = 'none';

                      const resultadosDiv = document.getElementById('resultadosBusquedaDias');
                      if (resultadosDiv) resultadosDiv.style.display = 'none';

                      // Ocultar todas las opciones
                      ['opcionesSabado', 'opcionesDomingo', 'opcionesFeriado'].forEach(id => {
                          const element = document.getElementById(id);
                          if (element) element.style.display = 'none';
                      });

                      // Limpiar contenedores
                      ['sabadosFechas', 'domingosFechas'].forEach(id => {
                          const container = document.getElementById(id);
                          if (container) container.innerHTML = '';
                      });

                      // Limpiar checkboxes de tipos
                      ['tipoSabado', 'tipoDomingo', 'tipoFeriado'].forEach(id => {
                          const checkbox = document.getElementById(id);
                          if (checkbox) checkbox.checked = false;
                      });

                      // Limpiar feriados seleccionados
                      const feriadosCheckboxes = document.querySelectorAll('#feriadosSelector input[type="checkbox"]');
                      feriadosCheckboxes.forEach(cb => cb.checked = false);

                      console.log('=== LIMPIEZA COMPLETADA EXITOSAMENTE ===');
                      showNotification('Formulario limpiado', 'info');

                  } catch (error) {
                      console.error('Error en limpieza segura:', error);
                      // Forzar reset básico en caso de error
                      personaSeleccionadaDias = null;
                  }
              }

              // Función para monitorear cambios en personaSeleccionadaDias
              function debugPersonaSeleccionada(lugar) {
                  console.log(`=== DEBUG ${lugar} ===`);
                  console.log('personaSeleccionadaDias:', personaSeleccionadaDias);
                  console.log('Tipo:', typeof personaSeleccionadaDias);
                  if (personaSeleccionadaDias) {
                      console.log('Propiedades:', Object.keys(personaSeleccionadaDias));
                  }
                  console.log('===============================');
              }

              function renderTablaDiasEspeciales() {
                  const container = document.getElementById('diasEspecialesContainer');
                  if (!container) return;

                  container.innerHTML = '';

                  let diasFiltrados = [...diasEspeciales];

                  // Filtrar según el rol del usuario
                  if (userRole === 'registrador') {
                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                      diasFiltrados = diasFiltrados.filter(d =>
                          d.registradoPor === userName || // Sus propios registros
                          (d.estado === 'pendiente_supervisor' && d.supervisor === userName) // Pendientes de él como supervisor
                      );
                  } else if (userRole === 'sub-registrador') {
                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                      diasFiltrados = diasFiltrados.filter(d => d.registradoPor === userName);
                  } else if (userRole === 'autorizador') {
                      diasFiltrados = diasFiltrados.filter(d =>
                          d.estado === 'pendiente' || // Pendientes de autorización final
                          d.registradoPorRol === 'registrador' ||
                          d.registradoPorRol === 'sub-registrador' ||
                          d.autorizadoPor === (currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario')
                      );
                  }
                  // Administradores ven todo sin filtro

                  // CORECCIÓN: Mostrar controles de envío SOLO para registradores (NO para sub-registradores)
                  if (userRole === 'registrador') {
                      const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                      const diasPendientesSupervisor = diasFiltrados.filter(d =>
                          d.estado === 'pendiente_supervisor' && d.supervisor === userName
                      );

                      if (diasPendientesSupervisor.length > 0) {
                          mostrarControlesEnvioDiasEspeciales(diasPendientesSupervisor.length);
                      }
                  }

                  // MOSTRAR CONTROLES DE AUTORIZACIÓN SOLO PARA ADMIN/AUTORIZADOR Y SIN OTROS CONTROLES
                  if ((userRole === 'administrador' || userRole === 'autorizador')) {
                      const diasPendientesAutorizacion = diasFiltrados.filter(d => d.estado === 'pendiente');

                      // SOLO mostrar si hay días pendientes Y no hay controles de envío para registradores
                      const hayControlesEnvio = document.getElementById('controlesEnvioDiasEspeciales');

                      if (diasPendientesAutorizacion.length > 0 && !hayControlesEnvio) {
                          mostrarControlesAutorizacionDiasEspeciales(diasPendientesAutorizacion.length);
                      }
                  }

                  // ELIMINADO: No mostrar controles para sub-registradores

                  if (diasFiltrados.length === 0) {
                      container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No hay días especiales registrados</p>';
                      return;
                  }

                  diasFiltrados.forEach(dia => {
                      const diaCard = createDiaEspecialCard(dia);
                      container.appendChild(diaCard);
                  });
              }

              // NUEVA FUNCIÓN - mostrarControlesAutorizacionDiasEspeciales
              function mostrarControlesAutorizacionDiasEspeciales(cantidad) {
                  const container = document.getElementById('diasEspecialesContainer').parentNode;
                  let controlsExistente = document.getElementById('controlesAutorizacionDiasEspeciales');

                  if (controlsExistente) {
                      controlsExistente.remove();
                  }

                  const controls = document.createElement('div');
                  controls.id = 'controlesAutorizacionDiasEspeciales';
                  controls.className = 'selection-controls';
                  controls.innerHTML = `
                      <div class="selection-info">
                          <span id="selectedCountDiasAutorizacion">0</span> días especiales seleccionados de <span>${cantidad}</span> pendientes
                      </div>
                      <div class="group-actions">
                          <button class="btn-group btn-group-select" onclick="selectAllDiasEspecialesPendientesAutorizacion()">Seleccionar Todos</button>
                          <button class="btn-group btn-group-select" onclick="clearAllDiasEspecialesAutorizacionSelections()">Limpiar Selección</button>
                          <button class="btn-group btn-group-authorize" onclick="autorizarDiasEspecialesSeleccionados()" id="autorizarDiasGroupBtn" disabled>
                              ✅ Autorizar Seleccionados
                          </button>
                          <button class="btn-group btn-group-reject" onclick="rechazarDiasEspecialesSeleccionados()" id="rechazarDiasGroupBtn" disabled>
                              ❌ Rechazar Seleccionados
                          </button>
                      </div>
                  `;

                  container.insertBefore(controls, container.querySelector('.modern-card:last-child'));
              }

              function createDiaEspecialCard(dia) {
                  const card = document.createElement('div');
                  card.className = `dias-especiales-registro-card ${dia.estado}`;
                  card.setAttribute('data-dia-id', dia.id);

                  const initials = dia.nombrePersona.split(' ').map(n => n[0]).join('').substring(0, 2);

                  // Crear badges para tipos
                  let tiposBadges = '';
                  if (dia.tipos.includes('sabado')) {
                      tiposBadges += '<span class="tipo-dia-badge tipo-sabado">SÁBADO</span>';
                  }
                  if (dia.tipos.includes('domingo')) {
                      tiposBadges += '<span class="tipo-dia-badge tipo-domingo">DOMINGO</span>';
                  }
                  if (dia.tipos.includes('feriado')) {
                      tiposBadges += '<span class="tipo-dia-badge tipo-feriado">FERIADO</span>';
                  }

                  // Crear secciones de fechas detalladas
                  let fechasDetalle = '';

                  // Sábados
                  if (dia.fechasSabado && dia.fechasSabado.length > 0) {
                      const fechasSabados = dia.fechasSabado.map(fecha => `<span class="fecha-item">${fecha}</span>`).join('');
                      fechasDetalle += `
                          <div class="fechas-detalle">
                              <h5>🗓️ Sábados:</h5>
                              <div>${fechasSabados}</div>
                          </div>
                      `;
                  }

                  // Domingos
                  if (dia.fechasDomingo && dia.fechasDomingo.length > 0) {
                      const fechasDomingos = dia.fechasDomingo.map(fecha => `<span class="fecha-item">${fecha}</span>`).join('');
                      fechasDetalle += `
                          <div class="fechas-detalle">
                              <h5>📅 Domingos:</h5>
                              <div>${fechasDomingos}</div>
                          </div>
                      `;
                  }

                  // Feriados
                  if (dia.feriadosSeleccionados && dia.feriadosSeleccionados.length > 0) {
                      const feriadosInfo = dia.feriadosSeleccionados.map(fId => {
                          const feriado = feriados.find(f => f.id === fId);
                          return feriado ? `<div class="feriado-item">${feriado.fecha} - ${feriado.nombre}</div>` : '';
                      }).join('');
                      fechasDetalle += `
                          <div class="fechas-detalle">
                              <h5>🏖️ Feriados:</h5>
                              <div>${feriadosInfo}</div>
                          </div>
                      `;
                  }

                  const estadoClass = {
                      'pendiente_supervisor': 'status-pending',
                      'pendiente': 'status-pending',
                      'autorizado': 'status-authorized',
                      'rechazado': 'status-rejected'
                  }[dia.estado] || 'status-pending';

                  let estadoTexto = dia.estado;
                  if (dia.estado === 'pendiente_supervisor') {
                      estadoTexto = 'Pendiente Envío';
                  } else if (dia.estado === 'pendiente') {
                      estadoTexto = 'Pendiente Autorización';
                  }

                  // LÓGICA CORREGIDA para checkbox
                  const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                  // CORRECCIÓN: Calcular esPendienteSupervisor correctamente
                  const esPendienteSupervisor = (userRole === 'registrador' &&
                                                dia.estado === 'pendiente_supervisor' &&
                                                dia.supervisor === userName);

                  // Determinar si mostrar checkbox
                  let mostrarCheckbox = false;
                  let funcionToggle = 'toggleDiaEspecialSelection';

                  if (esPendienteSupervisor) {
                      // Registrador con días pendientes de envío
                      mostrarCheckbox = true;
                  } else if ((userRole === 'administrador' || userRole === 'autorizador') && dia.estado === 'pendiente') {
                      // Admin/Autorizador con días pendientes de autorización
                      mostrarCheckbox = true;
                      funcionToggle = 'toggleDiaEspecialAutorizacion';
                  }

                  const checkboxHtml = mostrarCheckbox ? `
                      <div class="card-checkbox">
                          <input type="checkbox"
                                 id="select-dia-${dia.id}"
                                 onchange="${funcionToggle}('${dia.id}')"
                                 ${selectedDiasEspeciales.has(dia.id) ? 'checked' : ''}>
                      </div>
                  ` : '';

                  // Botones según el estado y rol
                  let actionButtons = '';

                  // Botón Editar - Solo si no está autorizado o si es admin/autorizador
                  if (dia.estado !== 'autorizado' || userRole === 'administrador' || userRole === 'autorizador') {
                      actionButtons += `<button class="btn-sm btn-edit" onclick="editarDiaEspecial('${dia.id}')">Editar</button>`;
                  }

                  // Botón Enviar SOLO para registradores con días pendientes de supervisor
                  if (esPendienteSupervisor) {
                      actionButtons += `<button class="btn-sm btn-primary" onclick="enviarDiaEspecialIndividual('${dia.id}')">Enviar</button>`;
                  }

                  // Botones para autorización - Solo para admin/autorizador en registros pendientes
                  if ((userRole === 'administrador' || userRole === 'autorizador') && dia.estado === 'pendiente') {
                      actionButtons += `
                          <button class="btn-sm btn-primary" onclick="autorizarDiaEspecial('${dia.id}')">Autorizar</button>
                          <button class="btn-sm btn-reject" onclick="rechazarDiaEspecial('${dia.id}')">Rechazar</button>
                      `;
                  }

                  // Botón Activar/Desactivar - Solo para admin/autorizador cuando está autorizado
                  if ((userRole === 'administrador' || userRole === 'autorizador') && dia.estado === 'autorizado') {
                      const toggleText = dia.activo === false ? 'Activar' : 'Desactivar';
                      actionButtons += `<button class="btn-sm btn-toggle" onclick="toggleDiaEspecial('${dia.id}')">${toggleText}</button>`;
                  }

                  // Botón Eliminar
                  actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarDiaEspecialConfirm('${dia.id}')">Eliminar</button>`;

                  // Información de flujo completo
                  let flujoInfo = '';
                  flujoInfo += `
                      <div class="user-detail-item">
                          <span class="user-detail-label">Registrado por:</span>
                          <span class="user-detail-value">${dia.registradoPor}</span>
                      </div>
                  `;

                  if (dia.supervisor) {
                      flujoInfo += `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Supervisor:</span>
                              <span class="user-detail-value">${dia.supervisor}</span>
                          </div>
                      `;
                  }

                  if (dia.enviadoPorSupervisor) {
                      flujoInfo += `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Enviado por:</span>
                              <span class="user-detail-value">${dia.enviadoPorSupervisor}</span>
                          </div>
                      `;
                  }

                  if (dia.autorizadoPor) {
                      flujoInfo += `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Autorizado por:</span>
                              <span class="user-detail-value">${dia.autorizadoPor}</span>
                          </div>
                      `;
                  }

                  if (dia.rechazadoPor) {
                      flujoInfo += `
                          <div class="user-detail-item">
                              <span class="user-detail-label">Rechazado por:</span>
                              <span class="user-detail-value">${dia.rechazadoPor}</span>
                          </div>
                      `;
                  }

                  card.innerHTML = `
                      ${checkboxHtml}
                      <div class="user-card-header">
                          <div class="user-card-avatar">${initials}</div>
                          <div class="user-card-info">
                              <h3>${dia.nombrePersona}</h3>
                              <p class="${dia.esDocumentoExtranjero ? 'documento-extranjero' : ''}">${dia.documentoPersona}</p>
                          </div>
                      </div>
                      <div class="user-card-details">
                          <div class="user-detail-item">
                              <span class="user-detail-label">Empresa:</span>
                              <span class="user-detail-value">${dia.empresaPersona}</span>
                          </div>
                          ${dia.subcontratoPersona ? `
                              <div class="user-detail-item">
                                  <span class="user-detail-label">Subcontrato:</span>
                                  <span class="user-detail-value">${dia.subcontratoPersona}</span>
                              </div>
                          ` : ''}
                          <div class="user-detail-item">
                              <span class="user-detail-label">Tipos:</span>
                              <span class="user-detail-value">${tiposBadges}</span>
                          </div>
                          <div class="user-detail-item">
                              <span class="user-detail-label">Estado:</span>
                              <span class="status-badge ${estadoClass}">${estadoTexto}</span>
                          </div>
                          ${flujoInfo}
                      </div>
                      <div class="user-detail-item">
                          <span class="user-detail-label">Motivo:</span>
                          <span class="user-detail-value">${dia.motivo}</span>
                      </div>
                      ${fechasDetalle}
                      <div class="user-card-actions">
                          ${actionButtons}
                      </div>
                  `;

                  return card;
              }



              // NUEVA FUNCIÓN - toggleDiaEspecialAutorizacion
              function toggleDiaEspecialAutorizacion(diaId) {
                  const checkbox = document.getElementById(`select-dia-${diaId}`);
                  const card = document.querySelector(`[data-dia-id="${diaId}"]`);

                  if (checkbox.checked) {
                      selectedDiasEspeciales.add(diaId);
                      card.classList.add('selected');
                  } else {
                      selectedDiasEspeciales.delete(diaId);
                      card.classList.remove('selected');
                  }

                  updateDiasEspecialesAutorizacionControls();
              }

              // NUEVA FUNCIÓN - updateDiasEspecialesAutorizacionControls
              function updateDiasEspecialesAutorizacionControls() {
                  // Solo actualizar si hay controles de autorización
                  const autorizarBtn = document.getElementById('autorizarDiasGroupBtn');
                  const rechazarBtn = document.getElementById('rechazarDiasGroupBtn');
                  const selectedCountElement = document.getElementById('selectedCountDiasAutorizacion');

                  const count = selectedDiasEspeciales.size;

                  if (selectedCountElement) selectedCountElement.textContent = count;
                  if (autorizarBtn) autorizarBtn.disabled = count === 0;
                  if (rechazarBtn) rechazarBtn.disabled = count === 0;
              }

              // Variables para selección de días especiales
         let selectedDiasEspeciales = new Set();

         // Mostrar controles de envío para días especiales
         function mostrarControlesEnvioDiasEspeciales(cantidad) {
             const container = document.getElementById('diasEspecialesContainer').parentNode;
             let controlsExistente = document.getElementById('controlesEnvioDiasEspeciales');

             if (controlsExistente) {
                 controlsExistente.remove();
             }

             const controls = document.createElement('div');
             controls.id = 'controlesEnvioDiasEspeciales';
             controls.className = 'selection-controls';
             controls.innerHTML = `
                 <div class="selection-info">
                     <span id="selectedCountDias">0</span> días especiales seleccionados de <span>${cantidad}</span> pendientes
                 </div>
                 <div class="group-actions">
                     <button class="btn-group btn-group-select" onclick="selectAllDiasEspecialesPendientes()">Seleccionar Todos</button>
                     <button class="btn-group btn-group-select" onclick="clearAllDiasEspecialesSelections()">Limpiar Selección</button>
                     <button class="btn-group btn-group-authorize" onclick="enviarDiasEspecialesSeleccionados()" id="enviarDiasGroupBtn" disabled>
                         📤 Enviar Seleccionados
                     </button>
                 </div>
             `;

             container.insertBefore(controls, container.querySelector('.modern-card:last-child'));
         }

         // Seleccionar días especiales
         function toggleDiaEspecialSelection(diaId) {
             const checkbox = document.getElementById(`select-dia-${diaId}`);
             const card = document.querySelector(`[data-dia-id="${diaId}"]`);

             if (checkbox.checked) {
                 selectedDiasEspeciales.add(diaId);
                 card.classList.add('selected');
             } else {
                 selectedDiasEspeciales.delete(diaId);
                 card.classList.remove('selected');
             }

             updateDiasEspecialesSelectionControls();
         }

         // Seleccionar todos los días especiales pendientes
         function selectAllDiasEspecialesPendientes() {
             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
             const diasPendientes = diasEspeciales.filter(d =>
                 d.estado === 'pendiente_supervisor' && d.supervisor === userName
             );

             diasPendientes.forEach(dia => {
                 selectedDiasEspeciales.add(dia.id);
                 const checkbox = document.getElementById(`select-dia-${dia.id}`);
                 const card = document.querySelector(`[data-dia-id="${dia.id}"]`);

                 if (checkbox) checkbox.checked = true;
                 if (card) card.classList.add('selected');
             });

             updateDiasEspecialesSelectionControls();
         }

         // Limpiar selecciones de días especiales
         function clearAllDiasEspecialesSelections() {
             selectedDiasEspeciales.forEach(diaId => {
                 const checkbox = document.getElementById(`select-dia-${diaId}`);
                 const card = document.querySelector(`[data-dia-id="${diaId}"]`);

                 if (checkbox) checkbox.checked = false;
                 if (card) card.classList.remove('selected');
             });

             selectedDiasEspeciales.clear();
             updateDiasEspecialesSelectionControls();
         }

         // Actualizar controles de selección
         function updateDiasEspecialesSelectionControls() {
             const selectedCountElement = document.getElementById('selectedCountDias');
             const enviarBtn = document.getElementById('enviarDiasGroupBtn');

             const count = selectedDiasEspeciales.size;

             if (selectedCountElement) selectedCountElement.textContent = count;
             if (enviarBtn) enviarBtn.disabled = count === 0;
         }

         // Enviar días especiales seleccionados
         async function enviarDiasEspecialesSeleccionados() {
             if (selectedDiasEspeciales.size === 0) {
                 showNotification('No hay días especiales seleccionados', 'error');
                 return;
             }

             const count = selectedDiasEspeciales.size;
             if (!confirm(`¿Está seguro de que desea enviar ${count} día(s) especiales para autorización?`)) {
                 return;
             }

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const promises = [];

                 selectedDiasEspeciales.forEach(diaId => {
                     const datosActualizados = {
                         estado: 'pendiente',
                         enviadoPorSupervisor: userName,
                         fechaEnvio: new Date().toISOString().split('T')[0],
                         horaEnvio: new Date().toLocaleTimeString()
                     };

                     promises.push(actualizarRegistro(diaId, datosActualizados, 'dias_especiales'));
                 });

                 await Promise.all(promises);

                 // Actualizar en memoria
                 selectedDiasEspeciales.forEach(diaId => {
                     const diaIndex = diasEspeciales.findIndex(d => d.id === diaId);
                     if (diaIndex !== -1) {
                         diasEspeciales[diaIndex].estado = 'pendiente';
                         diasEspeciales[diaIndex].enviadoPorSupervisor = userName;
                         diasEspeciales[diaIndex].fechaEnvio = new Date().toISOString().split('T')[0];
                         diasEspeciales[diaIndex].horaEnvio = new Date().toLocaleTimeString();
                     }
                 });

                 selectedDiasEspeciales.clear();
                 renderTablaDiasEspeciales();
                 actualizarContadoresTabs();
                 showNotification(`${count} día(s) especiales enviado(s) para autorización`, 'success');

             } catch (error) {
                 console.error('Error enviando días especiales:', error);
                 showNotification('Error al enviar días especiales', 'error');
             }
         }

         // Enviar día especial individual
         async function enviarDiaEspecialIndividual(diaId) {
             if (!confirm('¿Está seguro de que desea enviar este día especial para autorización?')) {
                 return;
             }

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const datosActualizados = {
                     estado: 'pendiente',
                     enviadoPorSupervisor: userName,
                     fechaEnvio: new Date().toISOString().split('T')[0],
                     horaEnvio: new Date().toLocaleTimeString()
                 };

                 await actualizarRegistro(diaId, datosActualizados, 'dias_especiales');

                 const diaIndex = diasEspeciales.findIndex(d => d.id === diaId);
                 if (diaIndex !== -1) {
                     diasEspeciales[diaIndex].estado = 'pendiente';
                     diasEspeciales[diaIndex].enviadoPorSupervisor = userName;
                     diasEspeciales[diaIndex].fechaEnvio = new Date().toISOString().split('T')[0];
                     diasEspeciales[diaIndex].horaEnvio = new Date().toLocaleTimeString();
                 }

                 renderTablaDiasEspeciales();
                 actualizarContadoresTabs();
                 showNotification('Día especial enviado para autorización', 'success');

             } catch (error) {
                 console.error('Error enviando día especial:', error);
                 showNotification('Error al enviar día especial', 'error');
             }
         }

         // Función corregida para días especiales
         function actualizarContadoresDiasEspeciales() {
             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

             if (userRole === 'registrador') {
                 // Solo contar si hay días especiales cargados
                 if (diasEspeciales && diasEspeciales.length > 0) {
                     const pendientesEnvio = diasEspeciales.filter(d =>
                         d.estado === 'pendiente_supervisor' && d.supervisor === userName
                     );

                     const counterDiasEspeciales = document.getElementById('counter-dias-especiales');
                     if (counterDiasEspeciales) {
                         if (pendientesEnvio.length > 0) {
                             counterDiasEspeciales.textContent = pendientesEnvio.length;
                             counterDiasEspeciales.style.display = 'inline';
                         } else {
                             counterDiasEspeciales.style.display = 'none';
                         }
                     }
                 }
             }

             if (userRole === 'autorizador' || userRole === 'administrador') {
                 // Solo contar si hay días especiales cargados
                 if (diasEspeciales && diasEspeciales.length > 0) {
                     let pendientesAutorizar = diasEspeciales.filter(d => d.estado === 'pendiente');

                     const counterDiasEspeciales = document.getElementById('counter-dias-especiales');
                     if (counterDiasEspeciales) {
                         if (pendientesAutorizar.length > 0) {
                             counterDiasEspeciales.textContent = pendientesAutorizar.length;
                             counterDiasEspeciales.style.display = 'inline';
                         } else {
                             counterDiasEspeciales.style.display = 'none';
                         }
                     }
                 }
             }
         }


         function buscarDiasEspeciales() {
              const termino = document.getElementById('buscarDiasEspeciales').value.toLowerCase().trim();
              const filtroEstado = document.getElementById('filtroEstadoDias').value;

              let diasFiltrados = [...diasEspeciales];

              // Filtrar por término de búsqueda
              if (termino) {
              diasFiltrados = diasFiltrados.filter(dia => {
                const campos = [
                    dia.documentoPersona || '',
                    dia.nombrePersona || '',
                    dia.empresaPersona || '',
                    dia.motivo || ''
                ];
                return campos.some(campo => campo.toString().toLowerCase().includes(termino));
              });
              }

              // Filtrar por estado
              if (filtroEstado) {
              diasFiltrados = diasFiltrados.filter(dia => dia.estado === filtroEstado);
              }

              // Filtrar según el rol del usuario
              if (userRole === 'registrador' || userRole === 'sub-registrador') {
              const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
              diasFiltrados = diasFiltrados.filter(d => d.registradoPor === userName);
              } else if (userRole === 'autorizador') {
              diasFiltrados = diasFiltrados.filter(d =>
                d.registradoPorRol === 'registrador' ||
                d.registradoPorRol === 'sub-registrador' ||
                d.autorizadoPor === (currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario')
              );
              }

              // Actualizar las tarjetas
              const container = document.getElementById('diasEspecialesContainer');
              container.innerHTML = '';

              if (diasFiltrados.length === 0) {
              container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No se encontraron registros</p>';
              return;
              }

              diasFiltrados.forEach(dia => {
              const diaCard = createDiaEspecialCard(dia);
              container.appendChild(diaCard);
              });
              }

              // Funciones CRUD para días especiales
              async function autorizarDiaEspecial(id) {
              if (confirm('¿Está seguro de que desea autorizar este registro de días especiales?')) {
              try {
                const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                const datosActualizados = {
                    estado: 'autorizado',
                    autorizadoPor: userName,
                    fechaAutorizacion: new Date().toISOString().split('T')[0],
                    horaAutorizacion: new Date().toLocaleTimeString()
                };

                await actualizarRegistro(id, datosActualizados, 'dias_especiales');

                const diaIndex = diasEspeciales.findIndex(d => d.id === id);
                if (diaIndex !== -1) {
                    diasEspeciales[diaIndex] = { ...diasEspeciales[diaIndex], ...datosActualizados };
                }

                renderTablaDiasEspeciales();
                actualizarContadoresTabs();
                showNotification('Días especiales autorizados exitosamente', 'success');
              } catch (error) {
                showNotification('Error al autorizar días especiales', 'error');
              }
              }
              }

              async function rechazarDiaEspecial(id) {
              if (confirm('¿Está seguro de que desea rechazar este registro de días especiales?')) {
              try {
                const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                const datosActualizados = {
                    estado: 'rechazado',
                    rechazadoPor: userName,
                    fechaRechazo: new Date().toISOString().split('T')[0],
                    horaRechazo: new Date().toLocaleTimeString()
                };

                await actualizarRegistro(id, datosActualizados, 'dias_especiales');

                const diaIndex = diasEspeciales.findIndex(d => d.id === id);
                if (diaIndex !== -1) {
                    diasEspeciales[diaIndex] = { ...diasEspeciales[diaIndex], ...datosActualizados };
                }

                renderTablaDiasEspeciales();
                showNotification('Días especiales rechazados', 'info');
              } catch (error) {
                showNotification('Error al rechazar días especiales', 'error');
              }
              }
              }

              async function toggleDiaEspecial(id) {
              const dia = diasEspeciales.find(d => d.id === id);
              if (!dia) return;

              const nuevoEstadoActivo = dia.activo === false ? true : false;
              const accion = nuevoEstadoActivo ? 'activar' : 'desactivar';

              if (confirm(`¿Está seguro de que desea ${accion} estos días especiales?`)) {
              try {
                await actualizarRegistro(id, { activo: nuevoEstadoActivo }, 'dias_especiales');
                dia.activo = nuevoEstadoActivo;
                renderTablaDiasEspeciales();
                showNotification(`Días especiales ${accion}dos correctamente`, 'success');
              } catch (error) {
                showNotification('Error al actualizar días especiales', 'error');
              }
              }
              }

              function editarDiaEspecial(id) {
              const dia = diasEspeciales.find(d => d.id === id);
              if (!dia) return;

              editandoDiaEspecial = id;

              // Seleccionar la persona
              const registro = registrosOriginales.find(r => r.documento === dia.documentoPersona);
              if (registro) {
              seleccionarPersonaDias(registro.id);
              }

              // Marcar tipos seleccionados
              document.getElementById('tipoSabado').checked = dia.tipos.includes('sabado');
              document.getElementById('tipoDomingo').checked = dia.tipos.includes('domingo');
              document.getElementById('tipoFeriado').checked = dia.tipos.includes('feriado');

              // Configurar opciones de fechas
              if (dia.tipos.includes('sabado')) {
              toggleTipoDia('sabado');
              fechasSabado = dia.fechasSabado || [];
              if (fechasSabado.length > 1) {
                document.getElementById('sabadoMultiples').checked = true;
                toggleFechasSabado('multiples');
                renderFechasSabado();
              } else if (fechasSabado.length === 1) {
                document.getElementById('sabadoFecha').checked = true;
                toggleFechasSabado('fecha');
                document.getElementById('sabadoFechaEspecifica').value = fechasSabado[0];
              }
              }

              if (dia.tipos.includes('domingo')) {
              toggleTipoDia('domingo');
              fechasDomingo = dia.fechasDomingo || [];
              if (fechasDomingo.length > 1) {
                document.getElementById('domingoMultiples').checked = true;
                toggleFechasDomingo('multiples');
                renderFechasDomingo();
              } else if (fechasDomingo.length === 1) {
                document.getElementById('domingoFecha').checked = true;
                toggleFechasDomingo('fecha');
                document.getElementById('domingoFechaEspecifica').value = fechasDomingo[0];
              }
              }

              if (dia.tipos.includes('feriado')) {
              toggleTipoDia('feriado');
              feriadosSeleccionados = dia.feriadosSeleccionados || [];
              setTimeout(() => {
                feriadosSeleccionados.forEach(feriadoId => {
                    const checkbox = document.getElementById(`feriado-${feriadoId}`);
                    if (checkbox) checkbox.checked = true;
                });
              }, 100);
              }

              document.getElementById('motivoDiasEspeciales').value = dia.motivo;

              showNotification('Datos cargados para edición', 'info');
              }

              async function eliminarDiaEspecialConfirm(id) {
              const dia = diasEspeciales.find(d => d.id === id);
              if (!dia) return;

              if (confirm(`¿Está seguro de que desea eliminar el registro de días especiales de ${dia.nombrePersona}? Esta acción no se puede deshacer.`)) {
              try {
                await deleteDoc(doc(db, 'dias_especiales', id));
                diasEspeciales = diasEspeciales.filter(d => d.id !== id);
                renderTablaDiasEspeciales();
                showNotification('Días especiales eliminados correctamente', 'success');
              } catch (error) {
                showNotification('Error al eliminar días especiales', 'error');
              }
              }
              }


              // Funciones específicas para guardia
              async function cargarTrabajadoresAutorizados() {
              try {
              const querySnapshot = await getDocs(collection(db, 'registros'));
              trabajadoresConPatentes = {};

              querySnapshot.forEach((docSnapshot) => {
                const registro = docSnapshot.data();
                // Solo trabajadores autorizados y activos
                if (registro.tipo === 'trabajador' && registro.estado === 'autorizado' && registro.activo === true) {
                    const documento = registro.documento;
                    if (!trabajadoresConPatentes[documento]) {
                        trabajadoresConPatentes[documento] = {
                            nombre: registro.nombre,
                            empresa: registro.empresa,
                            subContrato: registro.subContrato,
                            patentes: new Set()
                        };
                    }
                    // Agregar todas las patentes históricas
                    if (registro.patentes && registro.patentes.length > 0) {
                        registro.patentes.forEach(patente => {
                            trabajadoresConPatentes[documento].patentes.add(patente);
                        });
                    }
                }
              });

              console.log('Trabajadores autorizados cargados:', Object.keys(trabajadoresConPatentes).length);
              } catch (error) {
              console.error('Error cargando trabajadores:', error);
              }
              }

              async function verificarProveedorVisitaHoy(documento, tipo) {
              try {
              const hoy = new Date().toISOString().split('T')[0];
              const q = query(
                collection(db, 'registros'),
                where('documento', '==', documento),
                where('tipo', '==', tipo),
                where('fecha', '==', hoy)
              );
              const querySnapshot = await getDocs(q);
              return !querySnapshot.empty;
              } catch (error) {
                console.error('Error verificando proveedor/visita:', error);
                return false;
            }
         }

         // Panel de asistencia específico para guardias (CORREGIDO)
         function mostrarPanelAsistenciaGuardia() {
             // Solo mostrar para guardias
             if (userRole !== 'guardia') {
                 // Si existe el panel y no es guardia, eliminarlo
                 const panelExistente = document.getElementById('panelAsistenciaGuardia');
                 if (panelExistente) {
                     panelExistente.remove();
                 }
                 return;
             }

             const container = document.getElementById('registrosHoy').parentNode;
             const panelExistente = document.getElementById('panelAsistenciaGuardia');

             if (panelExistente) return;

             const panel = document.createElement('div');
             panel.id = 'panelAsistenciaGuardia';
             panel.className = 'modern-card';
             panel.innerHTML = `
                 <h3 class="card-title">🛡️ Registro de Asistencia (Guardia)</h3>
                 <p style="color: var(--text-light); margin-bottom: 15px; font-size: 0.9rem;">
                     ℹ️ Complete RUT o Nombre para cargar datos automáticamente de trabajadores autorizados
                 </p>
             `;

             container.insertBefore(panel, container.firstChild);
         }

         // Verificar si un trabajador está autorizado y activo
         async function verificarTrabajadorAutorizado(documento) {
             try {
                 const q = query(
                     collection(db, 'registros'),
                     where('documento', '==', documento),
                     where('tipo', '==', 'trabajador'),
                     where('estado', '==', 'autorizado'),
                     where('activo', '==', true)
                 );
                 const querySnapshot = await getDocs(q);

                 if (!querySnapshot.empty) {
                     // Verificar que no esté desvinculado
                     let trabajadorValido = false;
                     querySnapshot.forEach((docSnapshot) => {
                         const registro = docSnapshot.data();
                         if (registro.estado !== 'desvinculado' && registro.activo === true) {
                             trabajadorValido = true;
                         }
                     });
                     return trabajadorValido;
                 }
                 return false;
             } catch (error) {
                 console.error('Error verificando trabajador:', error);
                 return false;
             }
         }


         // Nueva función para limpiar formulario al cambiar de usuario/rol
         function limpiarFormularioCompleto() {
             // Limpiar todos los formularios
             const formularios = ['registroForm', 'usuarioForm', 'esperadaForm', 'bloqueoForm', 'feriadoForm', 'diasEspecialesForm'];

             formularios.forEach(formId => {
                 const form = document.getElementById(formId);
                 if (form) {
                     form.reset();
                 }
             });

             // Limpiar variables globales
             patentesActuales = [];
             selectedRegistros.clear();
             editandoUsuario = null;
             editandoRegistro = null;
             editandoEsperada = null;
             editandoBloqueo = null;
             editandoDiaEspecial = null;
             personaSeleccionadaDias = null;
             fechasSabado = [];
             fechasDomingo = [];
             feriadosSeleccionados = [];

             // Limpiar contenedores específicos
             const containers = ['patentesContainer', 'resultadosBusquedaDias', 'sabadosFechas', 'domingosFechas'];
             containers.forEach(containerId => {
                 const container = document.getElementById(containerId);
                 if (container) {
                     container.innerHTML = '';
                 }
             });

             // Ocultar paneles específicos
             const panelesToHide = ['personaSeleccionadaDias', 'resultadosBusquedaDias', 'proveedorGroup', 'guiaGroup'];
             panelesToHide.forEach(panelId => {
                 const panel = document.getElementById(panelId);
                 if (panel) {
                     panel.style.display = 'none';
                 }
             });

             // Resetear estados específicos
             updateLlegaPieMessage();

             // Resetear tipo de bloqueo
             cambiarTipoBloqueo('persona');

             // Resetear fechas por defecto
             const fechaEspera = document.getElementById('fechaEspera');
             if (fechaEspera) {
                 fechaEspera.value = new Date().toISOString().split('T')[0];
             }

             const fechaDesdeBloqueo = document.getElementById('fechaDesdeBloqueo');
             const fechaHastaBloqueo = document.getElementById('fechaHastaBloqueo');
             if (fechaDesdeBloqueo && fechaHastaBloqueo) {
                 const hoy = new Date().toISOString().split('T')[0];
                 fechaDesdeBloqueo.value = hoy;
                 const mañana = new Date();
                 mañana.setDate(mañana.getDate() + 1);
                 fechaHastaBloqueo.value = mañana.toISOString().split('T')[0];
             }

             // Limpiar búsqueda
             limpiarBusquedaSilenciosa();
             // Eliminar panel de asistencia si existe
             const panelAsistencia = document.getElementById('panelAsistenciaGuardia');
             if (panelAsistencia) {
                 panelAsistencia.remove();
             }
         }

         // Nueva función para actualizar el botón según el tipo de persona para guardias
         function actualizarBotonGuardia(tipoPersona) {
             if (userRole !== 'guardia') return;

             const submitBtn = document.querySelector('#registroForm button[type="submit"]');
             if (!submitBtn) return;

             const documento = document.getElementById('documento').value.trim();
             const nombre = document.getElementById('nombreRegistro').value.trim();
             const tipoSeleccionado = document.getElementById('tipoPersona').value;

             if (tipoSeleccionado === 'trabajador') {
                 // Para trabajadores, solo permitir si está autorizado Y ACTIVO
                 if (tipoPersona === 'trabajador') {
                     submitBtn.innerHTML = '<span>Registrar Asistencia</span>';
                     submitBtn.className = 'btn-primary';
                     submitBtn.style.background = 'linear-gradient(135deg, #22c55e 0%, #059669 100%)';
                     submitBtn.style.boxShadow = '0 8px 20px rgba(34, 197, 94, 0.3)';
                     submitBtn.disabled = false;
                 } else {
                     submitBtn.innerHTML = '<span>Trabajador No Autorizado o Desvinculado</span>';
                     submitBtn.className = 'btn-secondary';
                     submitBtn.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)';
                     submitBtn.style.boxShadow = '0 8px 20px rgba(239, 68, 68, 0.3)';
                     submitBtn.disabled = true;
                 }
             } else if (tipoSeleccionado === 'proveedor' || tipoSeleccionado === 'visita') {
                 // Para proveedores y visitas, siempre permitir
                 submitBtn.innerHTML = '<span>Registrar Entrada</span>';
                 submitBtn.className = 'btn-primary';
                 submitBtn.style.background = 'var(--primary-gradient)';
                 submitBtn.style.boxShadow = '0 8px 20px rgba(102, 126, 234, 0.3)';
                 submitBtn.disabled = false;
             } else {
                 // Sin tipo seleccionado o tipo inválido
                 submitBtn.innerHTML = '<span>Seleccione Tipo de Persona</span>';
                 submitBtn.className = 'btn-secondary';
                 submitBtn.style.background = 'rgba(255, 255, 255, 0.1)';
                 submitBtn.style.boxShadow = 'none';
                 submitBtn.disabled = true;
             }
         }

         // Función para configurar el botón inicial cuando se carga el tab
         function configurarBotonInicialRegistro() {
             const submitBtn = document.querySelector('#registroForm button[type="submit"]');
             if (!submitBtn) return;

             if (userRole === 'guardia') {
                 // Para guardias, inicializar deshabilitado hasta que seleccionen tipo
                 submitBtn.innerHTML = '<span>Seleccione Tipo de Persona</span>';
                 submitBtn.className = 'btn-secondary';
                 submitBtn.style.background = 'rgba(255, 255, 255, 0.1)';
                 submitBtn.style.boxShadow = 'none';
                 submitBtn.disabled = true;
             } else {
                 // Para otros roles, botón normal
                 submitBtn.innerHTML = '<span>Registrar</span>';
                 submitBtn.className = 'btn-primary';
                 submitBtn.style.background = 'var(--primary-gradient)';
                 submitBtn.style.boxShadow = '0 8px 20px rgba(102, 126, 234, 0.3)';
                 submitBtn.disabled = false;
             }
         }



         // Verificar si ya marcó asistencia hoy
         async function verificarAsistenciaHoy(documento, fecha) {
             try {
                 const q = query(
                     collection(db, 'registros'),
                     where('documento', '==', documento),
                     where('fecha', '==', fecha),
                     where('tipo', '==', 'asistencia_trabajador') // Solo buscar registros de asistencia
                 );
                 const querySnapshot = await getDocs(q);
                 return !querySnapshot.empty;
             } catch (error) {
                 console.error('Error verificando asistencia hoy:', error);
                 return false;
             }
         }


         // Mostrar alerta de persona esperada
         function mostrarAlertaPersonaEsperada(esperada) {
             // Eliminar alertas anteriores
             const alertaAnterior = document.getElementById('alertaPersonaEsperada');
             if (alertaAnterior) {
                 alertaAnterior.remove();
             }

             const container = document.getElementById('registrosHoy');
             const alertDiv = document.createElement('div');
             alertDiv.className = 'notification success';
             alertDiv.id = 'alertaPersonaEsperada';
             alertDiv.style.position = 'relative';
             alertDiv.style.margin = '10px 0';
             alertDiv.style.borderRadius = 'var(--border-radius-sm)';

             alertDiv.innerHTML = `
                 <div style="display: flex; align-items: center; gap: 12px;">
                     <span style="font-size: 1.2rem;">👋</span>
                     <div>
                         <strong>PERSONA ESPERADA</strong><br>
                         <span style="font-size: 0.9rem;">
                             ${esperada.nombre} está esperado por: ${esperada.quienEspera}
                         </span>
                     </div>
                     <button onclick="cerrarAlertaPersonaEsperada()" style="margin-left: auto; background: transparent; border: none; color: white; cursor: pointer; font-size: 1.2rem;">×</button>
                 </div>
             `;

             container.parentNode.insertBefore(alertDiv, container);
         }

         // Mostrar alerta de bloqueo por documento
         function mostrarAlertaBloqueoDocumento(bloqueos) {
             // Eliminar alertas anteriores
             const alertaAnterior = document.getElementById('alertaBloqueoDocumento');
             if (alertaAnterior) {
                 alertaAnterior.remove();
             }

             const container = document.getElementById('registrosHoy');
             const alertDiv = document.createElement('div');
             alertDiv.className = 'notification error';
             alertDiv.id = 'alertaBloqueoDocumento';
             alertDiv.style.position = 'relative';
             alertDiv.style.margin = '10px 0';
             alertDiv.style.borderRadius = 'var(--border-radius-sm)';

             const motivosBloqueo = bloqueos.map(b =>
                 `• Persona bloqueada: ${b.motivo === 'otro' ? b.otroMotivo : b.motivo}`
             ).join('<br>');

             alertDiv.innerHTML = `
                 <div style="display: flex; align-items: center; gap: 12px;">
                     <span style="font-size: 1.2rem;">🚫</span>
                     <div>
                         <strong>PERSONA BLOQUEADA</strong><br>
                         <span style="font-size: 0.9rem;">
                             ${motivosBloqueo}
                         </span>
                     </div>
                     <button onclick="cerrarAlertaBloqueoDocumento()" style="margin-left: auto; background: transparent; border: none; color: white; cursor: pointer; font-size: 1.2rem;">×</button>
                 </div>
             `;

             container.parentNode.insertBefore(alertDiv, container);
         }

         // Mostrar alerta de bloqueo por patente
         function mostrarAlertaBloqueoPatente(bloqueos, patente) {
             // Eliminar alertas anteriores
             const alertaAnterior = document.getElementById('alertaBloqueoPatente');
             if (alertaAnterior) {
                 alertaAnterior.remove();
             }

             const container = document.getElementById('registrosHoy');
             const alertDiv = document.createElement('div');
             alertDiv.className = 'notification error';
             alertDiv.id = 'alertaBloqueoPatente';
             alertDiv.style.position = 'relative';
             alertDiv.style.margin = '10px 0';
             alertDiv.style.borderRadius = 'var(--border-radius-sm)';

             const motivosBloqueo = bloqueos.map(b =>
                 `• Vehículo ${patente} bloqueado: ${b.motivo === 'otro' ? b.otroMotivo : b.motivo}`
             ).join('<br>');

             alertDiv.innerHTML = `
                 <div style="display: flex; align-items: center; gap: 12px;">
                     <span style="font-size: 1.2rem;">🚗🚫</span>
                     <div>
                         <strong>VEHÍCULO BLOQUEADO</strong><br>
                         <span style="font-size: 0.9rem;">
                             ${motivosBloqueo}
                         </span>
                     </div>
                     <button onclick="cerrarAlertaBloqueoPatente()" style="margin-left: auto; background: transparent; border: none; color: white; cursor: pointer; font-size: 1.2rem;">×</button>
                 </div>
             `;

             container.parentNode.insertBefore(alertDiv, container);
         }

         // Funciones para cerrar alertas
         function cerrarAlertaPersonaEsperada() {
             const alerta = document.getElementById('alertaPersonaEsperada');
             if (alerta) {
                 alerta.remove();
             }
         }


         // Función para reactivar persona desvinculada
         async function reactivarPersona(registroId) {
             const registro = registros.find(r => r.id === registroId);
             if (!registro) return;

             if (!confirm(`¿Está seguro de que desea REACTIVAR a ${registro.nombre}? Esta persona podrá volver a ingresar a las instalaciones.`)) {
                 return;
             }

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const datosReactivacion = {
                     activo: true,
                     estado: 'autorizado',
                     fechaReactivacion: new Date().toISOString().split('T')[0],
                     reactivadoPor: userName,
                     // Limpiar datos de desvinculación
                     fechaDesvinculacion: null,
                     desvinculadoPor: null,
                     motivoDesvinculacion: null
                 };

                 await actualizarRegistro(registroId, datosReactivacion);

                 // Actualizar en memoria en todos los arrays
                 const registroIndex = registros.findIndex(r => r.id === registroId);
                 if (registroIndex !== -1) {
                     registros[registroIndex] = { ...registros[registroIndex], ...datosReactivacion };
                 }

                 const registroOriginalIndex = registrosOriginales.findIndex(r => r.id === registroId);
                 if (registroOriginalIndex !== -1) {
                     registrosOriginales[registroOriginalIndex] = { ...registrosOriginales[registroOriginalIndex], ...datosReactivacion };
                 }

                 const registroBusquedaIndex = registrosBusqueda.findIndex(r => r.id === registroId);
                 if (registroBusquedaIndex !== -1) {
                     registrosBusqueda[registroBusquedaIndex] = { ...registrosBusqueda[registroBusquedaIndex], ...datosReactivacion };
                 }

                 renderRegistros();
                 showNotification(`${registro.nombre} ha sido reactivado correctamente`, 'success');
             } catch (error) {
                 console.error('Error reactivando persona:', error);
                 showNotification('Error al reactivar persona', 'error');
             }
         }

         // Mostrar alerta para persona desvinculada
         function mostrarAlertaPersonaDesvinculada(registro) {
             // Eliminar alertas anteriores
             const alertaAnterior = document.getElementById('alertaPersonaDesvinculada');
             if (alertaAnterior) {
                 alertaAnterior.remove();
             }

             const container = document.getElementById('registrosHoy');
             const alertDiv = document.createElement('div');
             alertDiv.className = 'notification error';
             alertDiv.id = 'alertaPersonaDesvinculada';
             alertDiv.style.position = 'relative';
             alertDiv.style.margin = '10px 0';
             alertDiv.style.borderRadius = 'var(--border-radius-sm)';
             alertDiv.style.fontSize = '1.1rem';
             alertDiv.style.fontWeight = '600';

             const fechaTexto = registro.fechaDesvinculacion ? ` el ${registro.fechaDesvinculacion}` : '';
             const motivoTexto = registro.motivoDesvinculacion ? `<br><strong>Motivo:</strong> ${registro.motivoDesvinculacion}` : '';

             alertDiv.innerHTML = `
                 <div style="display: flex; align-items: center; gap: 12px;">
                     <span style="font-size: 2rem;">🚫</span>
                     <div>
                         <strong>⚠️ PERSONA DESVINCULADA DE LA EMPRESA ⚠️</strong><br>
                         <span style="font-size: 0.95rem;">
                             <strong>${registro.nombre}</strong> fue desvinculada${fechaTexto}${motivoTexto}<br>
                             <strong style="color: #ffeb3b;">🔔 NO PUEDE INGRESAR A LAS INSTALACIONES</strong><br>
                             Contacte a su supervisor si hay dudas.
                         </span>
                     </div>
                     <button onclick="cerrarAlertaPersonaDesvinculada()" style="margin-left: auto; background: transparent; border: none; color: white; cursor: pointer; font-size: 1.5rem;">×</button>
                 </div>
             `;

             container.parentNode.insertBefore(alertDiv, container);
         }

         // Función para cerrar alerta
         function cerrarAlertaPersonaDesvinculada() {
             const alerta = document.getElementById('alertaPersonaDesvinculada');
             if (alerta) {
                 alerta.remove();
             }
         }


         function cerrarAlertaBloqueoDocumento() {
             const alerta = document.getElementById('alertaBloqueoDocumento');
             if (alerta) {
                 alerta.remove();
             }
         }

         function cerrarAlertaBloqueoPatente() {
             const alerta = document.getElementById('alertaBloqueoPatente');
             if (alerta) {
                 alerta.remove();
             }
         }


         // Solicitar desactivación con flujo de supervisor
         async function solicitarDesactivacion(registroId) {
             const registro = registros.find(r => r.id === registroId);
             if (!registro) return;

             // Crear modal para motivo
             const motivo = await mostrarModalMotivo('desactivación', registro.nombre);
             if (!motivo) return;

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                 // Determinar a quién va dirigida la solicitud
                 let estadoSolicitud = 'pendiente';
                 let destinatario = null;
                 let mensajeConfirmacion = '';

                 if (userRole === 'sub-registrador') {
                     // Sub-registrador envía al registrador supervisor
                     estadoSolicitud = 'pendiente_supervisor';
                     destinatario = currentUserData.supervisor;
                     mensajeConfirmacion = `Solicitud de desactivación enviada a su supervisor: ${destinatario}`;
                 } else if (userRole === 'registrador') {
                     // Registrador envía directamente a admin/autorizador
                     estadoSolicitud = 'pendiente';
                     mensajeConfirmacion = 'Solicitud de desactivación enviada para autorización final';
                 }

                 const nuevaSolicitud = {
                     tipo: 'desactivacion',
                     registroId: registroId,
                     documentoPersona: registro.documento,
                     nombrePersona: registro.nombre,
                     empresaPersona: registro.empresa,
                     subcontratoPersona: registro.subContrato || null,
                     motivo: motivo,
                     estado: estadoSolicitud,
                     solicitadoPor: userName,
                     solicitadoPorRol: userRole,
                     supervisorDestino: destinatario,
                     fechaSolicitud: new Date().toISOString().split('T')[0],
                     timestamp: new Date().toISOString()
                 };

                 const docRef = await addDoc(collection(db, 'solicitudes_desactivacion'), nuevaSolicitud);
                 nuevaSolicitud.id = docRef.id;
                 solicitudesDesactivacion.push(nuevaSolicitud);

                 showNotification(mensajeConfirmacion, 'success');
             } catch (error) {
                 console.error('Error creando solicitud:', error);
                 showNotification('Error al enviar solicitud', 'error');
             }
         }

         // Solicitar eliminación con flujo de supervisor
         async function solicitarEliminacion(registroId) {
             const registro = registros.find(r => r.id === registroId);
             if (!registro) return;

             // Crear modal para motivo
             const motivo = await mostrarModalMotivo('eliminación', registro.nombre);
             if (!motivo) return;

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                 // Determinar a quién va dirigida la solicitud
                 let estadoSolicitud = 'pendiente';
                 let destinatario = null;
                 let mensajeConfirmacion = '';

                 if (userRole === 'sub-registrador') {
                     // Sub-registrador envía al registrador supervisor
                     estadoSolicitud = 'pendiente_supervisor';
                     destinatario = currentUserData.supervisor;
                     mensajeConfirmacion = `Solicitud de eliminación enviada a su supervisor: ${destinatario}`;
                 } else if (userRole === 'registrador') {
                     // Registrador envía directamente a admin/autorizador
                     estadoSolicitud = 'pendiente';
                     mensajeConfirmacion = 'Solicitud de eliminación enviada para autorización final';
                 }

                 const nuevaSolicitud = {
                     tipo: 'eliminacion',
                     registroId: registroId,
                     documentoPersona: registro.documento,
                     nombrePersona: registro.nombre,
                     empresaPersona: registro.empresa,
                     subcontratoPersona: registro.subContrato || null,
                     motivo: motivo,
                     estado: estadoSolicitud,
                     solicitadoPor: userName,
                     solicitadoPorRol: userRole,
                     supervisorDestino: destinatario,
                     fechaSolicitud: new Date().toISOString().split('T')[0],
                     timestamp: new Date().toISOString()
                 };

                 const docRef = await addDoc(collection(db, 'solicitudes_desactivacion'), nuevaSolicitud);
                 nuevaSolicitud.id = docRef.id;
                 solicitudesDesactivacion.push(nuevaSolicitud);

                 showNotification(mensajeConfirmacion, 'success');
             } catch (error) {
                 console.error('Error creando solicitud:', error);
                 showNotification('Error al enviar solicitud', 'error');
             }
         }

         // Modal para ingresar motivo
         function mostrarModalMotivo(tipoSolicitud, nombrePersona) {
             return new Promise((resolve) => {
                 // Crear overlay
                 const overlay = document.createElement('div');
                 overlay.style.cssText = `
                     position: fixed;
                     top: 0;
                     left: 0;
                     width: 100%;
                     height: 100%;
                     background: rgba(0, 0, 0, 0.7);
                     display: flex;
                     justify-content: center;
                     align-items: center;
                     z-index: 1000;
                 `;

                 // Crear modal
                 const modal = document.createElement('div');
                 modal.style.cssText = `
                     background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                     border-radius: var(--border-radius);
                     padding: 40px;
                     max-width: 500px;
                     width: 90%;
                     border: 1px solid rgba(255, 255, 255, 0.2);
                     backdrop-filter: blur(20px);
                     box-shadow: var(--shadow-xl);
                 `;

                 modal.innerHTML = `
                     <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                         Solicitud de ${tipoSolicitud}
                     </h3>
                     <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                         Persona: <strong>${nombrePersona}</strong>
                     </p>
                     <div style="margin-bottom: 20px;">
                         <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                             Motivo de la solicitud *
                         </label>
                         <textarea id="motivoSolicitud"
                                  style="width: 100%; height: 100px; padding: 12px; border-radius: 8px;
                                         border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                         color: white; resize: vertical;"
                                  placeholder="Ingrese el motivo detallado para la ${tipoSolicitud}..."
                                  required></textarea>
                     </div>
                     <div style="display: flex; gap: 12px; justify-content: center;">
                         <button id="cancelarSolicitud" class="btn-secondary">Cancelar</button>
                         <button id="enviarSolicitud" class="btn-primary">Enviar Solicitud</button>
                     </div>
                 `;

                 overlay.appendChild(modal);
                 document.body.appendChild(overlay);

                 // Enfocar el textarea
                 setTimeout(() => {
                     document.getElementById('motivoSolicitud').focus();
                 }, 100);

                 // Event listeners
                 document.getElementById('cancelarSolicitud').onclick = () => {
                     document.body.removeChild(overlay);
                     resolve(null);
                 };

                 document.getElementById('enviarSolicitud').onclick = () => {
                     const motivo = document.getElementById('motivoSolicitud').value.trim();
                     if (!motivo) {
                         showNotification('Debe ingresar un motivo', 'error');
                         return;
                     }
                     document.body.removeChild(overlay);
                     resolve(motivo);
                 };

                 // Cerrar con ESC
                 const handleKeyPress = (e) => {
                     if (e.key === 'Escape') {
                         document.body.removeChild(overlay);
                         document.removeEventListener('keydown', handleKeyPress);
                         resolve(null);
                     }
                 };
                 document.addEventListener('keydown', handleKeyPress);
             });
         }


         // Configurar fechas de vigencia
         async function configurarFechasVigencia(registroId) {
             const registro = registros.find(r => r.id === registroId);
             if (!registro) return;

             const fechasActuales = registro.fechasVigencia || null;
             const fechas = await mostrarModalFechasVigencia(registro.nombre, fechasActuales);
             if (fechas === null) return;

             try {
                 const datosActualizados = {
                     fechasVigencia: fechas,
                     configuradoPor: currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario',
                     fechaConfiguracion: new Date().toISOString().split('T')[0]
                 };

                 await actualizarRegistro(registroId, datosActualizados);

                 const registroIndex = registros.findIndex(r => r.id === registroId);
                 if (registroIndex !== -1) {
                     registros[registroIndex] = { ...registros[registroIndex], ...datosActualizados };
                 }

                 renderRegistros();

                 if (fechas) {
                     showNotification(`Fechas de vigencia configuradas: ${fechas.fechaInicio} al ${fechas.fechaFin}`, 'success');
                 } else {
                     showNotification('Fechas de vigencia eliminadas - Persona activa permanentemente', 'info');
                 }
             } catch (error) {
                 console.error('Error configurando fechas:', error);
                 showNotification('Error al configurar fechas de vigencia', 'error');
             }
         }

         // Modal para configurar fechas de vigencia
         function mostrarModalFechasVigencia(nombrePersona, fechasActuales) {
             return new Promise((resolve) => {
                 const overlay = document.createElement('div');
                 overlay.style.cssText = `
                     position: fixed;
                     top: 0;
                     left: 0;
                     width: 100%;
                     height: 100%;
                     background: rgba(0, 0, 0, 0.7);
                     display: flex;
                     justify-content: center;
                     align-items: center;
                     z-index: 1000;
                 `;

                 const modal = document.createElement('div');
                 modal.style.cssText = `
                     background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                     border-radius: var(--border-radius);
                     padding: 40px;
                     max-width: 500px;
                     width: 90%;
                     border: 1px solid rgba(255, 255, 255, 0.2);
                     backdrop-filter: blur(20px);
                     box-shadow: var(--shadow-xl);
                 `;

                 const fechaInicioValue = fechasActuales ? fechasActuales.fechaInicio : '';
                 const fechaFinValue = fechasActuales ? fechasActuales.fechaFin : '';
                 const tieneVigenciaValue = fechasActuales ? true : false;

                 modal.innerHTML = `
                     <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                         📅 Configurar Fechas de Vigencia
                     </h3>
                     <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                         Persona: <strong>${nombrePersona}</strong>
                     </p>

                     <div style="margin-bottom: 20px;">
                         <label style="display: flex; align-items: center; gap: 12px; color: var(--text-light); cursor: pointer;">
                             <input type="checkbox" id="tieneVigencia" ${tieneVigenciaValue ? 'checked' : ''}
                                    style="width: 20px; height: 20px; accent-color: #667eea;">
                             <span>Configurar fechas específicas de vigencia</span>
                         </label>
                         <p style="color: rgba(255,255,255,0.6); font-size: 0.8rem; margin-top: 8px;">
                             Si no se marca, la persona estará activa permanentemente
                         </p>
                     </div>

                     <div id="fechasContainer" style="display: ${tieneVigenciaValue ? 'block' : 'none'};">
                         <div style="margin-bottom: 16px;">
                             <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                                 Fecha de inicio *
                             </label>
                             <input type="date" id="fechaInicio" value="${fechaInicioValue}"
                                    style="width: 100%; padding: 12px; border-radius: 8px;
                                           border: 1px solid rgba(255,255,255,0.2);
                                           background: rgba(255,255,255,0.05); color: white;">
                         </div>
                         <div style="margin-bottom: 20px;">
                             <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                                 Fecha de fin *
                             </label>
                             <input type="date" id="fechaFin" value="${fechaFinValue}"
                                    style="width: 100%; padding: 12px; border-radius: 8px;
                                           border: 1px solid rgba(255,255,255,0.2);
                                           background: rgba(255,255,255,0.05); color: white;">
                         </div>
                     </div>

                     <div style="display: flex; gap: 12px; justify-content: center;">
                         <button id="cancelarFechas" class="btn-secondary">Cancelar</button>
                         <button id="guardarFechas" class="btn-primary">Guardar Configuración</button>
                     </div>
                 `;

                 overlay.appendChild(modal);
                 document.body.appendChild(overlay);

                 // Event listeners
                 document.getElementById('tieneVigencia').onchange = (e) => {
                     const container = document.getElementById('fechasContainer');
                     container.style.display = e.target.checked ? 'block' : 'none';
                 };

                 document.getElementById('cancelarFechas').onclick = () => {
                     document.body.removeChild(overlay);
                     resolve(null);
                 };

                 document.getElementById('guardarFechas').onclick = () => {
                     const tieneVigencia = document.getElementById('tieneVigencia').checked;

                     if (!tieneVigencia) {
                         // Sin fechas específicas - activo permanentemente
                         document.body.removeChild(overlay);
                         resolve(null);
                         return;
                     }

                     const fechaInicio = document.getElementById('fechaInicio').value;
                     const fechaFin = document.getElementById('fechaFin').value;

                     if (!fechaInicio || !fechaFin) {
                         showNotification('Debe completar ambas fechas', 'error');
                         return;
                     }

                     if (fechaInicio > fechaFin) {
                         showNotification('La fecha de inicio debe ser anterior a la fecha de fin', 'error');
                         return;
                     }

                     document.body.removeChild(overlay);
                     resolve({
                         fechaInicio: fechaInicio,
                         fechaFin: fechaFin
                     });
                 };

                 // Cerrar con ESC
                 const handleKeyPress = (e) => {
                     if (e.key === 'Escape') {
                         document.body.removeChild(overlay);
                         document.removeEventListener('keydown', handleKeyPress);
                         resolve(null);
                     }
                 };
                 document.addEventListener('keydown', handleKeyPress);
             });
         }

         // Cargar solicitudes según el rol
         async function cargarSolicitudes() {
             try {
                 const querySnapshot = await getDocs(collection(db, 'solicitudes_desactivacion'));
                 solicitudesDesactivacion = [];
                 querySnapshot.forEach((docSnapshot) => {
                     solicitudesDesactivacion.push({
                         id: docSnapshot.id,
                         ...docSnapshot.data()
                     });
                 });
                 renderSolicitudes();
             } catch (error) {
                 console.error('Error cargando solicitudes:', error);
                 showNotification('Error al cargar solicitudes', 'error');
             }
         }

         // Renderizar solicitudes según el rol
         function renderSolicitudes() {
             const container = document.getElementById('solicitudesPendientes');
             if (!container) return;

             container.innerHTML = '';

             let solicitudesFiltradas = [];
             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

             if (userRole === 'sub-registrador') {
                 // Sub-registradores ven sus propias solicitudes
                 solicitudesFiltradas = solicitudesDesactivacion.filter(s =>
                     s.solicitadoPor === userName
                 );
             } else if (userRole === 'registrador') {
                 // Registradores ven:
                 // 1. Sus propias solicitudes
                 // 2. Solicitudes de sus sub-registradores que están pendientes de su aprobación
                 solicitudesFiltradas = solicitudesDesactivacion.filter(s =>
                     s.solicitadoPor === userName ||
                     (s.estado === 'pendiente_supervisor' && s.supervisorDestino === userName)
                 );
             } else if (userRole === 'autorizador' || userRole === 'administrador') {
                 // Admin/Autorizadores ven:
                 // 1. Sus propias solicitudes (si las tienen)
                 // 2. Solicitudes en estado 'pendiente' (ya procesadas por registradores)
                 solicitudesFiltradas = solicitudesDesactivacion.filter(s =>
                     s.solicitadoPor === userName ||
                     s.estado === 'pendiente'
                 );
             }

             if (solicitudesFiltradas.length === 0) {
                 container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No hay solicitudes pendientes</p>';
                 return;
             }

             // Ordenar por fecha más reciente
             solicitudesFiltradas.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

             solicitudesFiltradas.forEach(solicitud => {
                 const solicitudCard = createSolicitudCard(solicitud);
                 container.appendChild(solicitudCard);
             });
         }

         // Crear tarjeta de solicitud
         function createSolicitudCard(solicitud) {
             const card = document.createElement('div');
             card.className = 'registro-card';

             const initials = solicitud.nombrePersona.split(' ').map(n => n[0]).join('').substring(0, 2);

             const tipoIcon = solicitud.tipo === 'desactivacion' ? '🔒' : '🗑️';
             const tipoText = solicitud.tipo === 'desactivacion' ? 'Desactivación' : 'Eliminación';

             const estadoClass = {
                 'pendiente_supervisor': 'status-pending',
                 'pendiente': 'status-pending',
                 'aprobada': 'status-authorized',
                 'rechazada': 'status-rejected',
                 'procesada': 'status-authorized'
             }[solicitud.estado] || 'status-pending';

             let estadoText = solicitud.estado;
             if (solicitud.estado === 'pendiente_supervisor') {
                 estadoText = 'Pendiente Supervisor';
             } else if (solicitud.estado === 'pendiente') {
                 estadoText = 'Pendiente Autorización';
             } else if (solicitud.estado === 'procesada') {
                 estadoText = 'Procesada';
             } else if (solicitud.estado === 'aprobada') {
                 estadoText = 'Aprobada';
             } else if (solicitud.estado === 'rechazada') {
                 estadoText = 'Rechazada';
             }

             // Botones según el rol y estado
             let actionButtons = '';
             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

             if (userRole === 'registrador' && solicitud.estado === 'pendiente_supervisor' && solicitud.supervisorDestino === userName) {
                 // Registrador puede aprobar/rechazar solicitudes de sus sub-registradores
                 const btnTextoEnviar = solicitud.tipo === 'desactivacion' ? 'Enviar para Desactivación' : 'Enviar para Eliminación';
                 actionButtons += `
                     <button class="btn-sm btn-primary" onclick="window.aprobarSolicitudSupervisor('${solicitud.id}')">${btnTextoEnviar}</button>
                     <button class="btn-sm btn-reject" onclick="window.rechazarSolicitudSupervisor('${solicitud.id}')">Rechazar Solicitud</button>
                 `;
             } else if ((userRole === 'administrador' || userRole === 'autorizador') && solicitud.estado === 'pendiente') {
                 // Admin/Autorizador pueden procesar solicitudes finales
                 actionButtons += `
                     <button class="btn-sm btn-primary" onclick="window.procesarSolicitud('${solicitud.id}', 'aprobar')">Aprobar ${tipoText}</button>
                     <button class="btn-sm btn-reject" onclick="window.procesarSolicitud('${solicitud.id}', 'rechazar')">Rechazar Solicitud</button>
                 `;
             }

             // Información de flujo completo
             let flujoInfo = '';

             // SIEMPRE mostrar el solicitante original
             flujoInfo += `
                 <div class="user-detail-item">
                     <span class="user-detail-label">Solicitado Originalmente por:</span>
                     <span class="user-detail-value">${solicitud.solicitadoPor} (${solicitud.solicitadoPorRol.toUpperCase()})</span>
                 </div>
             `;

             // Si fue enviado por un sub-registrador y hay supervisor
             if (solicitud.solicitadoPorRol === 'sub-registrador' && solicitud.supervisorDestino) {
                 flujoInfo += `
                     <div class="user-detail-item">
                         <span class="user-detail-label">Supervisor Asignado:</span>
                         <span class="user-detail-value">${solicitud.supervisorDestino} (REGISTRADOR)</span>
                     </div>
                 `;
             }

             // Si fue aprobado por supervisor (registrador)
             if (solicitud.aprobadoPorSupervisor) {
                 flujoInfo += `
                     <div class="user-detail-item">
                         <span class="user-detail-label">Enviado por Supervisor:</span>
                         <span class="user-detail-value">${solicitud.aprobadoPorSupervisor} (REGISTRADOR)</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Fecha Envío:</span>
                         <span class="user-detail-value">${solicitud.fechaAprobacionSupervisor || 'N/A'}</span>
                     </div>
                 `;
             }

             // Si fue rechazado por supervisor
             if (solicitud.rechazadoPorSupervisor) {
                 flujoInfo += `
                     <div class="user-detail-item">
                         <span class="user-detail-label">Rechazado por Supervisor:</span>
                         <span class="user-detail-value">${solicitud.rechazadoPorSupervisor} (REGISTRADOR)</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Motivo Rechazo Supervisor:</span>
                         <span class="user-detail-value">${solicitud.motivoRechazoSupervisor || 'N/A'}</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Fecha Rechazo:</span>
                         <span class="user-detail-value">${solicitud.fechaRechazoSupervisor || 'N/A'}</span>
                     </div>
                 `;
             }

             // Si fue procesado finalmente
             if (solicitud.procesadoPor) {
                 flujoInfo += `
                     <div class="user-detail-item">
                         <span class="user-detail-label">Procesado Finalmente por:</span>
                         <span class="user-detail-value">${solicitud.procesadoPor} (${userRole === 'administrador' ? 'ADMINISTRADOR' : 'AUTORIZADOR'})</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Fecha Procesamiento:</span>
                         <span class="user-detail-value">${solicitud.fechaProcesamiento || 'N/A'}</span>
                     </div>
                 `;
             }

             // Si fue rechazado en la etapa final
             if (solicitud.rechazadoPor) {
                 flujoInfo += `
                     <div class="user-detail-item">
                         <span class="user-detail-label">Rechazado Finalmente por:</span>
                         <span class="user-detail-value">${solicitud.rechazadoPor}</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Motivo Rechazo Final:</span>
                         <span class="user-detail-value">${solicitud.motivoRechazo || 'N/A'}</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Fecha Rechazo Final:</span>
                         <span class="user-detail-value">${solicitud.fechaRechazo || 'N/A'}</span>
                     </div>
                 `;
             }

             card.innerHTML = `
                 <div class="role-badge role-${solicitud.solicitadoPorRol}">${solicitud.solicitadoPorRol.toUpperCase()}</div>
                 <div class="user-card-header">
                     <div class="user-card-avatar">${initials}</div>
                     <div class="user-card-info">
                         <h3>${tipoIcon} Solicitud de ${tipoText}</h3>
                         <p><strong>${solicitud.nombrePersona}</strong></p>
                     </div>
                 </div>
                 <div class="user-card-details">
                     <div class="user-detail-item">
                         <span class="user-detail-label">Documento:</span>
                         <span class="user-detail-value">${solicitud.documentoPersona}</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Empresa:</span>
                         <span class="user-detail-value">${solicitud.empresaPersona}</span>
                     </div>
                     ${solicitud.subcontratoPersona ? `
                         <div class="user-detail-item">
                             <span class="user-detail-label">Subcontrato:</span>
                             <span class="user-detail-value">${solicitud.subcontratoPersona}</span>
                         </div>
                     ` : ''}
                     <div class="user-detail-item">
                         <span class="user-detail-label">Estado:</span>
                         <span class="status-badge ${estadoClass}">${estadoText}</span>
                     </div>
                     ${flujoInfo}
                     <div class="user-detail-item">
                         <span class="user-detail-label">Fecha Solicitud:</span>
                         <span class="user-detail-value">${solicitud.fechaSolicitud}</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Motivo Original:</span>
                         <span class="user-detail-value" style="white-space: pre-wrap; background: rgba(255,255,255,0.05); padding: 8px; border-radius: 4px; border-left: 3px solid #667eea;">${solicitud.motivo}</span>
                     </div>
                 </div>
                 <div class="user-card-actions">
                     ${actionButtons}
                 </div>
             `;

             return card;
         }

         // Aprobar solicitud por supervisor (registrador)
         async function aprobarSolicitudSupervisor(solicitudId) {
             if (!confirm('¿Está seguro de que desea aprobar esta solicitud y enviarla a autorización final?')) {
                 return;
             }

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const datosActualizados = {
                     estado: 'pendiente',
                     aprobadoPorSupervisor: userName,
                     fechaAprobacionSupervisor: new Date().toISOString().split('T')[0]
                 };

                 await actualizarRegistro(solicitudId, datosActualizados, 'solicitudes_desactivacion');

                 const solicitudIndex = solicitudesDesactivacion.findIndex(s => s.id === solicitudId);
                 if (solicitudIndex !== -1) {
                     solicitudesDesactivacion[solicitudIndex] = { ...solicitudesDesactivacion[solicitudIndex], ...datosActualizados };
                 }

                 renderSolicitudes();
                 showNotification('Solicitud aprobada y enviada para autorización final', 'success');
             } catch (error) {
                 console.error('Error aprobando solicitud:', error);
                 showNotification('Error al procesar solicitud', 'error');
             }
         }

         // Rechazar solicitud por supervisor (registrador)
         async function rechazarSolicitudSupervisor(solicitudId) {
             const motivo = await mostrarModalMotivo('rechazo de la solicitud', 'el supervisor');
             if (!motivo) return;

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const datosActualizados = {
                     estado: 'rechazada',
                     rechazadoPorSupervisor: userName,
                     motivoRechazoSupervisor: motivo,
                     fechaRechazoSupervisor: new Date().toISOString().split('T')[0]
                 };

                 await actualizarRegistro(solicitudId, datosActualizados, 'solicitudes_desactivacion');

                 const solicitudIndex = solicitudesDesactivacion.findIndex(s => s.id === solicitudId);
                 if (solicitudIndex !== -1) {
                     solicitudesDesactivacion[solicitudIndex] = { ...solicitudesDesactivacion[solicitudIndex], ...datosActualizados };
                 }

                 renderSolicitudes();
                 showNotification('Solicitud rechazada por supervisor', 'info');
             } catch (error) {
                 console.error('Error rechazando solicitud:', error);
                 showNotification('Error al procesar solicitud', 'error');
             }
         }

         // Procesar solicitud final (admin/autorizador)
         async function procesarSolicitud(solicitudId, accion) {
             const solicitud = solicitudesDesactivacion.find(s => s.id === solicitudId);
             if (!solicitud) return;

             const confirmarTexto = accion === 'aprobar' ?
                 `¿Está seguro de que desea ${solicitud.tipo === 'desactivacion' ? 'desactivar' : 'eliminar'} a ${solicitud.nombrePersona}?` :
                 '¿Está seguro de que desea rechazar esta solicitud?';

             if (!confirm(confirmarTexto)) return;

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                 if (accion === 'aprobar') {
                     // Ejecutar la acción en el registro
                     if (solicitud.tipo === 'desactivacion') {
                         const datosDesactivacion = {
                             activo: false,
                             estado: 'desvinculado',
                             fechaDesvinculacion: new Date().toISOString().split('T')[0],
                             desvinculadoPor: userName,
                             motivoDesvinculacion: solicitud.motivo
                         };

                         await actualizarRegistro(solicitud.registroId, datosDesactivacion);

                         // Actualizar en memoria en todos los arrays
                         const registroIndex = registros.findIndex(r => r.id === solicitud.registroId);
                         if (registroIndex !== -1) {
                             registros[registroIndex] = { ...registros[registroIndex], ...datosDesactivacion };
                         }

                         // También actualizar en registrosOriginales si existe
                         const registroOriginalIndex = registrosOriginales.findIndex(r => r.id === solicitud.registroId);
                         if (registroOriginalIndex !== -1) {
                             registrosOriginales[registroOriginalIndex] = { ...registrosOriginales[registroOriginalIndex], ...datosDesactivacion };
                         }

                         // Actualizar en registrosBusqueda si existe
                         const registroBusquedaIndex = registrosBusqueda.findIndex(r => r.id === solicitud.registroId);
                         if (registroBusquedaIndex !== -1) {
                             registrosBusqueda[registroBusquedaIndex] = { ...registrosBusqueda[registroBusquedaIndex], ...datosDesactivacion };
                         }

                     } else if (solicitud.tipo === 'eliminacion') {
                         await eliminarRegistroFirebase(solicitud.registroId);
                         // Eliminar de memoria en todos los arrays
                         registros = registros.filter(r => r.id !== solicitud.registroId);
                         registrosOriginales = registrosOriginales.filter(r => r.id !== solicitud.registroId);
                         registrosBusqueda = registrosBusqueda.filter(r => r.id !== solicitud.registroId);
                     }

                     // Actualizar solicitud
                     await actualizarRegistro(solicitudId, {
                         estado: 'procesada',
                         procesadoPor: userName,
                         fechaProcesamiento: new Date().toISOString().split('T')[0]
                     }, 'solicitudes_desactivacion');

                     renderRegistros();
                     renderSolicitudes();
                     showNotification(`${solicitud.tipo === 'desactivacion' ? 'Desactivación' : 'Eliminación'} procesada correctamente`, 'success');
                 } else {
                     // Rechazar solicitud
                     const motivo = await mostrarModalMotivo('rechazo de la solicitud', solicitud.nombrePersona);
                     if (!motivo) return;

                     await actualizarRegistro(solicitudId, {
                         estado: 'rechazada',
                         rechazadoPor: userName,
                         motivoRechazo: motivo,
                         fechaRechazo: new Date().toISOString().split('T')[0]
                     }, 'solicitudes_desactivacion');

                     renderSolicitudes();
                     showNotification('Solicitud rechazada', 'info');
                 }
             } catch (error) {
                 console.error('Error procesando solicitud:', error);
                 showNotification('Error al procesar solicitud', 'error');
             }
         }



         // Mostrar alerta de acceso denegado para personas desvinculadas
         function mostrarAlertaAccesoDenegado(registro) {
             // Eliminar alertas anteriores
             const alertaAnterior = document.getElementById('alertaAccesoDenegado');
             if (alertaAnterior) {
                 alertaAnterior.remove();
             }

             const container = document.getElementById('registrosHoy');
             const alertDiv = document.createElement('div');
             alertDiv.className = 'notification error';
             alertDiv.id = 'alertaAccesoDenegado';
             alertDiv.style.position = 'relative';
             alertDiv.style.margin = '10px 0';
             alertDiv.style.borderRadius = 'var(--border-radius-sm)';
             alertDiv.style.fontSize = '1.1rem';
             alertDiv.style.fontWeight = '600';

             const estadoTexto = registro.estado === 'desvinculado' ? 'DESVINCULADA' : 'DESACTIVADA';
             const fechaTexto = registro.fechaDesvinculacion ? ` el ${registro.fechaDesvinculacion}` : '';

             alertDiv.innerHTML = `
                 <div style="display: flex; align-items: center; gap: 12px;">
                     <span style="font-size: 2rem;">🚫</span>
                     <div>
                         <strong>⚠️ ACCESO DENEGADO ⚠️</strong><br>
                         <span style="font-size: 0.95rem;">
                             La persona <strong>${registro.nombre}</strong> ha sido <strong>${estadoTexto}</strong>${fechaTexto}.<br>
                             <strong style="color: #ffeb3b;">🔔 CONTACTE INMEDIATAMENTE A SU SUPERVISOR</strong><br>
                             No está autorizada para ingresar a las instalaciones.
                         </span>
                     </div>
                     <button onclick="cerrarAlertaAccesoDenegado()" style="margin-left: auto; background: transparent; border: none; color: white; cursor: pointer; font-size: 1.5rem;">×</button>
                 </div>
             `;

             container.parentNode.insertBefore(alertDiv, container);
         }

         // Mostrar alerta para trabajadores no autorizados
         function mostrarAlertaTrabajadorNoAutorizado() {
             // Eliminar alertas anteriores
             const alertaAnterior = document.getElementById('alertaTrabajadorNoAutorizado');
             if (alertaAnterior) {
                 alertaAnterior.remove();
             }

             const container = document.getElementById('registrosHoy');
             const alertDiv = document.createElement('div');
             alertDiv.className = 'notification error';
             alertDiv.id = 'alertaTrabajadorNoAutorizado';
             alertDiv.style.position = 'relative';
             alertDiv.style.margin = '10px 0';
             alertDiv.style.borderRadius = 'var(--border-radius-sm)';
             alertDiv.style.fontSize = '1.1rem';
             alertDiv.style.fontWeight = '600';

             alertDiv.innerHTML = `
                 <div style="display: flex; align-items: center; gap: 12px;">
                     <span style="font-size: 2rem;">⛔</span>
                     <div>
                         <strong>⚠️ TRABAJADOR NO AUTORIZADO ⚠️</strong><br>
                         <span style="font-size: 0.95rem;">
                             Esta persona no está registrada en el sistema o no tiene autorización vigente.<br>
                             <strong style="color: #ffeb3b;">🔔 CONTACTE A SU SUPERVISOR ANTES DE PERMITIR EL ACCESO</strong><br>
                             No puede ingresar sin autorización previa.
                         </span>
                     </div>
                     <button onclick="cerrarAlertaTrabajadorNoAutorizado()" style="margin-left: auto; background: transparent; border: none; color: white; cursor: pointer; font-size: 1.5rem;">×</button>
                 </div>
             `;

             container.parentNode.insertBefore(alertDiv, container);
         }

         // Funciones para cerrar alertas
         function cerrarAlertaAccesoDenegado() {
             const alerta = document.getElementById('alertaAccesoDenegado');
             if (alerta) {
                 alerta.remove();
             }
         }

         function cerrarAlertaTrabajadorNoAutorizado() {
             const alerta = document.getElementById('alertaTrabajadorNoAutorizado');
             if (alerta) {
                 alerta.remove();
             }
         }


         // Variables para selección avanzada
         let empresasPendientes = new Map();
         let subcontratosPendientes = new Map();

         // Mostrar tab de selección
         function showSelectionTab(tabName) {
             // Actualizar tabs
             const tabs = document.querySelectorAll('.selection-tab');
             tabs.forEach(tab => tab.classList.remove('active'));
             event.target.classList.add('active');

             // Mostrar contenido
             const contents = document.querySelectorAll('.selection-content');
             contents.forEach(content => content.classList.remove('active'));
             document.getElementById(`selection${tabName.charAt(0).toUpperCase() + tabName.slice(1)}`).classList.add('active');

             // Actualizar filtros si es necesario
             if (tabName === 'empresa') {
                 actualizarFiltrosEmpresas();
             } else if (tabName === 'subcontrato') {
                 actualizarFiltrosSubcontratos();
             }
         }

         // Actualizar controles de selección avanzada
         function actualizarControlesSeleccionAvanzada() {
             const advancedControls = document.getElementById('advancedSelectionControls');
             const registrosPendientes = registros.filter(r => r.estado === 'pendiente');

             // Filtrar según el rol
             let registrosFiltrados = registrosPendientes;
             if (userRole === 'autorizador') {
                 registrosFiltrados = registrosPendientes.filter(r =>
                     r.registradoPorRol === 'registrador' ||
                     r.registradoPorRol === 'sub-registrador'
                 );
             }

             if (registrosFiltrados.length > 0 && (userRole === 'administrador' || userRole === 'autorizador')) {
                 advancedControls.style.display = 'block';

                 // Actualizar mapas de empresas y subcontratos
                 empresasPendientes.clear();
                 subcontratosPendientes.clear();

                 registrosFiltrados.forEach(registro => {
                     // Contar por empresa
                     const empresa = registro.empresa || 'Sin empresa';
                     if (empresasPendientes.has(empresa)) {
                         empresasPendientes.set(empresa, empresasPendientes.get(empresa) + 1);
                     } else {
                         empresasPendientes.set(empresa, 1);
                     }

                     // Contar por subcontrato
                     const subcontrato = registro.subContrato || 'Sin subcontrato';
                     if (subcontratosPendientes.has(subcontrato)) {
                         subcontratosPendientes.set(subcontrato, subcontratosPendientes.get(subcontrato) + 1);
                     } else {
                         subcontratosPendientes.set(subcontrato, 1);
                     }
                 });
             } else {
                 advancedControls.style.display = 'none';
             }
         }

         // Actualizar filtros de empresas
         function actualizarFiltrosEmpresas() {
             const container = document.getElementById('empresasFilter');
             container.innerHTML = '';

             empresasPendientes.forEach((count, empresa) => {
                 const filterItem = document.createElement('div');
                 filterItem.className = 'filter-item';
                 filterItem.innerHTML = `
                     <input type="checkbox" id="empresa-${empresa.replace(/\s+/g, '-')}"
                            onchange="toggleSelectionByEmpresa('${empresa}')">
                     <label for="empresa-${empresa.replace(/\s+/g, '-')}">${empresa}</label>
                     <span class="filter-count">${count}</span>
                 `;
                 container.appendChild(filterItem);
             });
         }

         // Actualizar filtros de subcontratos
         function actualizarFiltrosSubcontratos() {
             const container = document.getElementById('subcontratosFilter');
             container.innerHTML = '';

             subcontratosPendientes.forEach((count, subcontrato) => {
                 const filterItem = document.createElement('div');
                 filterItem.className = 'filter-item';
                 filterItem.innerHTML = `
                     <input type="checkbox" id="subcontrato-${subcontrato.replace(/\s+/g, '-')}"
                            onchange="toggleSelectionBySubcontrato('${subcontrato}')">
                     <label for="subcontrato-${subcontrato.replace(/\s+/g, '-')}">${subcontrato}</label>
                     <span class="filter-count">${count}</span>
                 `;
                 container.appendChild(filterItem);
             });
         }

         // Seleccionar por empresa
         function toggleSelectionByEmpresa(empresa) {
             const registrosPendientes = registros.filter(r =>
                 r.estado === 'pendiente' &&
                 (r.empresa || 'Sin empresa') === empresa
             );

             const checkbox = document.getElementById(`empresa-${empresa.replace(/\s+/g, '-')}`);

             registrosPendientes.forEach(registro => {
                 const registroCheckbox = document.getElementById(`select-${registro.id}`);
                 const card = document.querySelector(`[data-registro-id="${registro.id}"]`);

                 if (checkbox.checked) {
                     selectedRegistros.add(registro.id);
                     if (registroCheckbox) registroCheckbox.checked = true;
                     if (card) card.classList.add('selected');
                 } else {
                     selectedRegistros.delete(registro.id);
                     if (registroCheckbox) registroCheckbox.checked = false;
                     if (card) card.classList.remove('selected');
                 }
             });

             updateSelectionControls();
         }

         // Seleccionar por subcontrato
         function toggleSelectionBySubcontrato(subcontrato) {
             const registrosPendientes = registros.filter(r =>
                 r.estado === 'pendiente' &&
                 (r.subContrato || 'Sin subcontrato') === subcontrato
             );

             const checkbox = document.getElementById(`subcontrato-${subcontrato.replace(/\s+/g, '-')}`);

             registrosPendientes.forEach(registro => {
                 const registroCheckbox = document.getElementById(`select-${registro.id}`);
                 const card = document.querySelector(`[data-registro-id="${registro.id}"]`);

                 if (checkbox.checked) {
                     selectedRegistros.add(registro.id);
                     if (registroCheckbox) registroCheckbox.checked = true;
                     if (card) card.classList.add('selected');
                 } else {
                     selectedRegistros.delete(registro.id);
                     if (registroCheckbox) registroCheckbox.checked = false;
                     if (card) card.classList.remove('selected');
                 }
             });

             updateSelectionControls();
         }

         // Seleccionar todas las empresas
         function selectAllEmpresas() {
             const checkboxes = document.querySelectorAll('#empresasFilter input[type="checkbox"]');
             checkboxes.forEach(checkbox => {
                 if (!checkbox.checked) {
                     checkbox.checked = true;
                     checkbox.dispatchEvent(new Event('change'));
                 }
             });
         }

         // Limpiar selección de empresas
         function clearEmpresasSelection() {
             const checkboxes = document.querySelectorAll('#empresasFilter input[type="checkbox"]');
             checkboxes.forEach(checkbox => {
                 if (checkbox.checked) {
                     checkbox.checked = false;
                     checkbox.dispatchEvent(new Event('change'));
                 }
             });
         }

         // Seleccionar todos los subcontratos
         function selectAllSubcontratos() {
             const checkboxes = document.querySelectorAll('#subcontratosFilter input[type="checkbox"]');
             checkboxes.forEach(checkbox => {
                 if (!checkbox.checked) {
                     checkbox.checked = true;
                     checkbox.dispatchEvent(new Event('change'));
                 }
             });
         }

         // Limpiar selección de subcontratos
         function clearSubcontratosSelection() {
             const checkboxes = document.querySelectorAll('#subcontratosFilter input[type="checkbox"]');
             checkboxes.forEach(checkbox => {
                 if (checkbox.checked) {
                     checkbox.checked = false;
                     checkbox.dispatchEvent(new Event('change'));
                 }
             });
         }

         // Función para editar solo patentes en asistencias de trabajadores
         function editarRegistroLimitado(id) {
             const registro = registros.find(r => r.id === id);
             if (!registro) return;

             if (registro.tipo !== 'asistencia_trabajador') {
                 showNotification('Esta función solo está disponible para asistencias de trabajadores', 'error');
                 return;
             }

             // Mostrar modal para editar solo patentes
             mostrarModalEditarPatentes(registro);
         }

         // Modal para editar solo patentes
         function mostrarModalEditarPatentes(registro) {
             // Crear overlay
             const overlay = document.createElement('div');
             overlay.style.cssText = `
                 position: fixed;
                 top: 0;
                 left: 0;
                 width: 100%;
                 height: 100%;
                 background: rgba(0, 0, 0, 0.7);
                 display: flex;
                 justify-content: center;
                 align-items: center;
                 z-index: 1000;
             `;

             // Crear modal
             const modal = document.createElement('div');
             modal.style.cssText = `
                 background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                 border-radius: var(--border-radius);
                 padding: 40px;
                 max-width: 500px;
                 width: 90%;
                 border: 1px solid rgba(255, 255, 255, 0.2);
                 backdrop-filter: blur(20px);
                 box-shadow: var(--shadow-xl);
             `;

             const patentesActualesModal = [...(registro.patentes || [])];

             modal.innerHTML = `
                 <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                     ✏️ Editar Patentes
                 </h3>
                 <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                     Trabajador: <strong>${registro.nombre}</strong>
                 </p>
                 <div style="margin-bottom: 20px;">
                     <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                         Agregar Patente
                     </label>
                     <div style="display: flex; gap: 12px;">
                         <input type="text" id="nuevaPatenteModal"
                                style="flex: 1; padding: 12px; border-radius: 8px;
                                       border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                       color: white;" placeholder="AA-BB-11">
                         <button type="button" id="agregarPatenteModal" class="btn-primary">Agregar</button>
                     </div>
                 </div>
                 <div id="patentesModalContainer" style="margin-bottom: 20px;"></div>
                 <div style="display: flex; gap: 12px; justify-content: center;">
                     <button id="cancelarEdicionPatentes" class="btn-secondary">Cancelar</button>
                     <button id="guardarPatentes" class="btn-primary">Guardar Patentes</button>
                 </div>
             `;

             overlay.appendChild(modal);
             document.body.appendChild(overlay);

             // Renderizar patentes actuales
             function renderPatentesModal() {
                 const container = document.getElementById('patentesModalContainer');
                 container.innerHTML = '';

                 patentesActualesModal.forEach(patente => {
                     const patenteDiv = document.createElement('div');
                     patenteDiv.className = 'patente-tag';
                     patenteDiv.innerHTML = `
                         ${patente}
                         <button type="button" class="patente-remove" onclick="eliminarPatenteModal('${patente}')">×</button>
                     `;
                     container.appendChild(patenteDiv);
                 });

                 if (patentesActualesModal.length === 0) {
                     container.innerHTML = '<p style="color: #fbbf24; font-size: 0.8rem;">⚠️ Esta persona llega a pie</p>';
                 }
             }

             // Función para eliminar patente en modal
             window.eliminarPatenteModal = function(patente) {
                 const index = patentesActualesModal.indexOf(patente);
                 if (index > -1) {
                     patentesActualesModal.splice(index, 1);
                     renderPatentesModal();
                 }
             };

             renderPatentesModal();

             // Event listeners
             document.getElementById('agregarPatenteModal').onclick = () => {
                 const nuevaPatente = document.getElementById('nuevaPatenteModal').value.trim().toUpperCase();
                 if (nuevaPatente && !patentesActualesModal.includes(nuevaPatente)) {
                     patentesActualesModal.push(nuevaPatente);
                     document.getElementById('nuevaPatenteModal').value = '';
                     renderPatentesModal();
                 }
             };

             document.getElementById('cancelarEdicionPatentes').onclick = () => {
                 document.body.removeChild(overlay);
                 // Limpiar la función global
                 if (window.eliminarPatenteModal) {
                     delete window.eliminarPatenteModal;
                 }
             };

             document.getElementById('guardarPatentes').onclick = async () => {
                 try {
                     await actualizarRegistro(registro.id, { patentes: patentesActualesModal });

                     // Actualizar en memoria en TODOS los arrays
                     const registroIndex = registros.findIndex(r => r.id === registro.id);
                     if (registroIndex !== -1) {
                         registros[registroIndex].patentes = [...patentesActualesModal];
                     }

                     // También actualizar en registrosOriginales si existe
                     const registroOriginalIndex = registrosOriginales.findIndex(r => r.id === registro.id);
                     if (registroOriginalIndex !== -1) {
                         registrosOriginales[registroOriginalIndex].patentes = [...patentesActualesModal];
                     }

                     // Actualizar en registrosBusqueda si existe
                     const registroBusquedaIndex = registrosBusqueda.findIndex(r => r.id === registro.id);
                     if (registroBusquedaIndex !== -1) {
                         registrosBusqueda[registroBusquedaIndex].patentes = [...patentesActualesModal];
                     }

                     renderRegistros();
                     document.body.removeChild(overlay);
                     // Limpiar la función global
                     if (window.eliminarPatenteModal) {
                         delete window.eliminarPatenteModal;
                     }
                     showNotification('Patentes actualizadas correctamente', 'success');
                 } catch (error) {
                     showNotification('Error al actualizar patentes', 'error');
                 }
             };

             // Formateo de patente
             document.getElementById('nuevaPatenteModal').addEventListener('input', function(e) {
                 let patente = e.target.value.toUpperCase();
                 patente = patente.replace(/[^A-Z0-9]/g, '');

                 if (patente.length > 6) {
                     patente = patente.substring(0, 6);
                 }

                 if (patente.length > 4) {
                     patente = patente.substring(0, 4) + '-' + patente.substring(4);
                 } else if (patente.length > 2) {
                     patente = patente.substring(0, 2) + '-' + patente.substring(2);
                 }

                 e.target.value = patente;
             });
         }



         // Función específica para editar asistencias que funciona tanto en registros del día como en búsquedas
         function editarAsistenciaGuardia(registroId) {
             // Buscar el registro en todos los arrays posibles
             let registro = registros.find(r => r.id === registroId);
             if (!registro) {
                 registro = registrosOriginales.find(r => r.id === registroId);
             }
             if (!registro) {
                 registro = registrosBusqueda.find(r => r.id === registroId);
             }

             if (!registro) {
                 showNotification('Registro no encontrado', 'error');
                 return;
             }

             if (registro.tipo !== 'asistencia_trabajador') {
                 showNotification('Esta función solo está disponible para asistencias de trabajadores', 'error');
                 return;
             }

             // Verificar permisos
             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
             if (userRole === 'guardia' && registro.registradoPor !== userName) {
                 showNotification('Solo puedes editar asistencias que tú registraste', 'error');
                 return;
             }

             mostrarModalEditarPatentesAsistencia(registro);
         }

         // Modal específico para editar patentes de asistencias
         function mostrarModalEditarPatentesAsistencia(registro) {
             const overlay = document.createElement('div');
             overlay.style.cssText = `
                 position: fixed;
                 top: 0;
                 left: 0;
                 width: 100%;
                 height: 100%;
                 background: rgba(0, 0, 0, 0.7);
                 display: flex;
                 justify-content: center;
                 align-items: center;
                 z-index: 1000;
             `;

             const modal = document.createElement('div');
             modal.style.cssText = `
                 background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                 border-radius: var(--border-radius);
                 padding: 40px;
                 max-width: 500px;
                 width: 90%;
                 border: 1px solid rgba(255, 255, 255, 0.2);
                 backdrop-filter: blur(20px);
                 box-shadow: var(--shadow-xl);
             `;

             const patentesActualesModal = [...(registro.patentes || [])];

             modal.innerHTML = `
                 <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                     ✏️ Editar Patentes - Asistencia
                 </h3>
                 <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                     Trabajador: <strong>${registro.nombre}</strong><br>
                     Fecha: <strong>${registro.fecha}</strong>
                 </p>
                 <div style="margin-bottom: 20px;">
                     <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                         Agregar Patente
                     </label>
                     <div style="display: flex; gap: 12px;">
                         <input type="text" id="nuevaPatenteModalAsistencia"
                                style="flex: 1; padding: 12px; border-radius: 8px;
                                       border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                       color: white;" placeholder="AA-BB-11">
                         <button type="button" id="agregarPatenteModalAsistencia" class="btn-primary">Agregar</button>
                     </div>
                 </div>
                 <div id="patentesModalAsistenciaContainer" style="margin-bottom: 20px;"></div>
                 <div style="display: flex; gap: 12px; justify-content: center;">
                     <button id="cancelarEdicionPatentesAsistencia" class="btn-secondary">Cancelar</button>
                     <button id="guardarPatentesAsistencia" class="btn-primary">Guardar Patentes</button>
                 </div>
             `;

             overlay.appendChild(modal);
             document.body.appendChild(overlay);

             // Renderizar patentes actuales
             function renderPatentesModalAsistencia() {
                 const container = document.getElementById('patentesModalAsistenciaContainer');
                 container.innerHTML = '';

                 patentesActualesModal.forEach(patente => {
                     const patenteDiv = document.createElement('div');
                     patenteDiv.className = 'patente-tag';
                     patenteDiv.innerHTML = `
                         ${patente}
                         <button type="button" class="patente-remove" onclick="eliminarPatenteModalAsistencia('${patente}')">×</button>
                     `;
                     container.appendChild(patenteDiv);
                 });

                 if (patentesActualesModal.length === 0) {
                     container.innerHTML = '<p style="color: #fbbf24; font-size: 0.8rem;">⚠️ Esta persona llega a pie</p>';
                 }
             }

             // Función para eliminar patente en modal
             window.eliminarPatenteModalAsistencia = function(patente) {
                 const index = patentesActualesModal.indexOf(patente);
                 if (index > -1) {
                     patentesActualesModal.splice(index, 1);
                     renderPatentesModalAsistencia();
                 }
             };

             renderPatentesModalAsistencia();

             // Event listeners
             document.getElementById('agregarPatenteModalAsistencia').onclick = () => {
                 const nuevaPatente = document.getElementById('nuevaPatenteModalAsistencia').value.trim().toUpperCase();
                 if (nuevaPatente && !patentesActualesModal.includes(nuevaPatente)) {
                     patentesActualesModal.push(nuevaPatente);
                     document.getElementById('nuevaPatenteModalAsistencia').value = '';
                     renderPatentesModalAsistencia();
                 }
             };

             document.getElementById('cancelarEdicionPatentesAsistencia').onclick = () => {
                 document.body.removeChild(overlay);
                 delete window.eliminarPatenteModalAsistencia;
             };

             document.getElementById('guardarPatentesAsistencia').onclick = async () => {
                 try {
                     await actualizarRegistro(registro.id, { patentes: patentesActualesModal });

                     // Actualizar en TODOS los arrays
                     [registros, registrosOriginales, registrosBusqueda].forEach(array => {
                         const index = array.findIndex(r => r.id === registro.id);
                         if (index !== -1) {
                             array[index].patentes = [...patentesActualesModal];
                         }
                     });

                     renderRegistros();
                     // Si estamos en búsqueda, actualizar también
                     if (document.getElementById('resultadosBusqueda').children.length > 0) {
                         realizarBusqueda();
                     }

                     document.body.removeChild(overlay);
                     delete window.eliminarPatenteModalAsistencia;
                     showNotification('Patentes actualizadas correctamente', 'success');
                 } catch (error) {
                     showNotification('Error al actualizar patentes', 'error');
                 }
             };

             // Formateo de patente
             document.getElementById('nuevaPatenteModalAsistencia').addEventListener('input', function(e) {
                 let patente = e.target.value.toUpperCase();
                 patente = patente.replace(/[^A-Z0-9]/g, '');

                 if (patente.length > 6) {
                     patente = patente.substring(0, 6);
                 }

                 if (patente.length > 4) {
                     patente = patente.substring(0, 4) + '-' + patente.substring(4);
                 } else if (patente.length > 2) {
                     patente = patente.substring(0, 2) + '-' + patente.substring(2);
                 }

                 e.target.value = patente;
             });
         }

         // Función para eliminar asistencia con motivo (solo para guardias)
         function eliminarAsistenciaConMotivo(registroId) {
             // Buscar el registro
             let registro = registros.find(r => r.id === registroId);
             if (!registro) {
                 registro = registrosOriginales.find(r => r.id === registroId);
             }
             if (!registro) {
                 registro = registrosBusqueda.find(r => r.id === registroId);
             }

             if (!registro) {
                 showNotification('Registro no encontrado', 'error');
                 return;
             }

             // Verificar permisos
             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
             if (userRole === 'guardia' && registro.registradoPor !== userName) {
                 showNotification('Solo puedes eliminar asistencias que tú registraste', 'error');
                 return;
             }

             mostrarModalEliminarAsistencia(registro);
         }

         // Modal para eliminar asistencia con motivo
         function mostrarModalEliminarAsistencia(registro) {
             const overlay = document.createElement('div');
             overlay.style.cssText = `
                 position: fixed;
                 top: 0;
                 left: 0;
                 width: 100%;
                 height: 100%;
                 background: rgba(0, 0, 0, 0.7);
                 display: flex;
                 justify-content: center;
                 align-items: center;
                 z-index: 1000;
             `;

             const modal = document.createElement('div');
             modal.style.cssText = `
                 background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
                 border-radius: var(--border-radius);
                 padding: 40px;
                 max-width: 500px;
                 width: 90%;
                 border: 1px solid rgba(255, 255, 255, 0.2);
                 backdrop-filter: blur(20px);
                 box-shadow: var(--shadow-xl);
             `;

             modal.innerHTML = `
                 <h3 style="color: white; margin-bottom: 20px; text-align: center;">
                     🗑️ Eliminar Registro de Asistencia
                 </h3>
                 <p style="color: var(--text-light); margin-bottom: 20px; text-align: center;">
                     <strong>${registro.nombre}</strong><br>
                     Fecha: ${registro.fecha} - Hora: ${registro.hora}
                 </p>
                 <div style="margin-bottom: 20px;">
                     <label style="color: var(--text-light); display: block; margin-bottom: 8px;">
                         Motivo de eliminación *
                     </label>
                     <textarea id="motivoEliminacionAsistencia"
                              style="width: 100%; height: 100px; padding: 12px; border-radius: 8px;
                                     border: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.05);
                                     color: white; resize: vertical;"
                              placeholder="Explique el motivo por el cual está eliminando este registro de asistencia..."
                              required></textarea>
                 </div>
                 <div style="display: flex; gap: 12px; justify-content: center;">
                     <button id="cancelarEliminacionAsistencia" class="btn-secondary">Cancelar</button>
                     <button id="confirmarEliminacionAsistencia" class="btn-primary" style="background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);">Eliminar Registro</button>
                 </div>
             `;

             overlay.appendChild(modal);
             document.body.appendChild(overlay);

             // Enfocar el textarea
             setTimeout(() => {
                 document.getElementById('motivoEliminacionAsistencia').focus();
             }, 100);

             // Event listeners
             document.getElementById('cancelarEliminacionAsistencia').onclick = () => {
                 document.body.removeChild(overlay);
             };

             document.getElementById('confirmarEliminacionAsistencia').onclick = async () => {
                 const motivo = document.getElementById('motivoEliminacionAsistencia').value.trim();
                 if (!motivo) {
                     showNotification('Debe ingresar un motivo para la eliminación', 'error');
                     return;
                 }

                 try {
                     const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                     // Crear notificación para el administrador
                     const notificacionAdmin = {
                         tipo: 'eliminacion_asistencia',
                         registroId: registro.id,
                         documentoPersona: registro.documento,
                         nombrePersona: registro.nombre,
                         empresaPersona: registro.empresa,
                         fechaAsistencia: registro.fecha,
                         horaAsistencia: registro.hora,
                         patentesAsistencia: registro.patentes || [],
                         motivoEliminacion: motivo,
                         eliminadoPor: userName,
                         eliminadoPorRol: userRole,
                         fechaEliminacion: new Date().toISOString().split('T')[0],
                         horaEliminacion: new Date().toLocaleTimeString(),
                         timestamp: new Date().toISOString(),
                         estado: 'pendiente_revision'
                     };

                     // Guardar notificación en Firebase
                     await addDoc(collection(db, 'notificaciones_admin'), notificacionAdmin);

                     // Eliminar el registro
                     await eliminarRegistroFirebase(registro.id);

                     // Eliminar de memoria en todos los arrays
                     [registros, registrosOriginales, registrosBusqueda].forEach(array => {
                         const index = array.findIndex(r => r.id === registro.id);
                         if (index !== -1) {
                             array.splice(index, 1);
                         }
                     });

                     renderRegistros();
                     // Si estamos en búsqueda, actualizar también
                     if (document.getElementById('resultadosBusqueda').children.length > 0) {
                         realizarBusqueda();
                     }

                     document.body.removeChild(overlay);
                     showNotification('Registro eliminado y notificación enviada al administrador', 'success');
                 } catch (error) {
                     console.error('Error eliminando registro:', error);
                     showNotification('Error al eliminar registro', 'error');
                 }
             };

             // Cerrar con ESC
             const handleKeyPress = (e) => {
                 if (e.key === 'Escape') {
                     document.body.removeChild(overlay);
                     document.removeEventListener('keydown', handleKeyPress);
                 }
             };
             document.addEventListener('keydown', handleKeyPress);
         }


         // Variables para asistencias
         let asistenciasOriginales = [];
         let asistenciasFiltradas = [];

         // Cargar todas las asistencias para administrador
         async function cargarTodasAsistencias() {
             if (userRole !== 'administrador') return;

             try {
                 const querySnapshot = await getDocs(collection(db, 'registros'));
                 asistenciasOriginales = [];
                 querySnapshot.forEach((docSnapshot) => {
                     const registro = { id: docSnapshot.id, ...docSnapshot.data() };
                     // Solo asistencias, proveedores y visitas autorizados
                     if (registro.estado === 'autorizado' &&
                         (registro.tipo === 'asistencia_trabajador' ||
                          registro.tipo === 'proveedor' ||
                          registro.tipo === 'visita')) {
                         asistenciasOriginales.push(registro);
                     }
                 });

                 // Ordenar por fecha y hora más reciente
                 asistenciasOriginales.sort((a, b) => {
                     const fechaA = new Date(a.timestamp || `${a.fecha} ${a.hora}`);
                     const fechaB = new Date(b.timestamp || `${b.fecha} ${b.hora}`);
                     return fechaB - fechaA;
                 });

                 asistenciasFiltradas = [...asistenciasOriginales];
                 renderAsistencias();
             } catch (error) {
                 console.error('Error cargando asistencias:', error);
                 showNotification('Error al cargar asistencias', 'error');
             }
         }

         // Buscar en asistencias
         function buscarAsistencias() {
             const termino = document.getElementById('busquedaAsistencias').value.toLowerCase().trim();
             const filtroTipo = document.getElementById('filtroTipoAsistencia').value;
             const fechaDesde = document.getElementById('fechaDesdeAsistencias').value;
             const fechaHasta = document.getElementById('fechaHastaAsistencias').value;

             let resultados = [...asistenciasOriginales];

             // Filtro por término de búsqueda
             if (termino) {
                 resultados = resultados.filter(registro => {
                     const campos = [
                         registro.documento || '',
                         registro.nombre || '',
                         registro.empresa || '',
                         registro.subContrato || '',
                         registro.empresaProveedora || '',
                         ...(registro.patentes || [])
                     ];
                     return campos.some(campo =>
                         campo.toString().toLowerCase().includes(termino)
                     );
                 });
             }

             // Filtro por tipo
             if (filtroTipo) {
                 resultados = resultados.filter(registro => registro.tipo === filtroTipo);
             }

             // Filtro por fechas
             if (fechaDesde && fechaHasta) {
                 resultados = resultados.filter(registro => {
                     const fechaRegistro = registro.fecha;
                     return fechaRegistro >= fechaDesde && fechaRegistro <= fechaHasta;
                 });
             }

             asistenciasFiltradas = resultados;
             renderAsistencias();
         }

         // Renderizar asistencias
         function renderAsistencias() {
             const container = document.getElementById('resultadosAsistencias');
             const contador = document.getElementById('contadorAsistencias');
             const numeroAsistencias = document.getElementById('numeroAsistencias');

             // Actualizar contador
             numeroAsistencias.textContent = asistenciasFiltradas.length;
             contador.style.display = 'block';

             // Limpiar contenedor
             container.innerHTML = '';

             if (asistenciasFiltradas.length === 0) {
                 container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No se encontraron registros</p>';
                 return;
             }

             // Crear tarjetas de asistencias
             asistenciasFiltradas.forEach(registro => {
                 const asistenciaCard = createAsistenciaCard(registro);
                 container.appendChild(asistenciaCard);
             });
         }

         // Crear tarjeta específica para asistencias (admin)
         // Crear tarjeta específica para asistencias (admin)
         function createAsistenciaCard(registro) {
             const card = document.createElement('div');
             card.className = 'registro-card';
             card.setAttribute('data-registro-id', registro.id);

             const initials = registro.nombre.split(' ').map(n => n[0]).join('').substring(0, 2);

             // Tipo con iconos específicos
             let tipoDisplay, tipoIcon;
             if (registro.tipo === 'asistencia_trabajador') {
                 tipoDisplay = 'ASISTENCIA TRABAJADOR';
                 tipoIcon = '🛡️';
             } else if (registro.tipo === 'proveedor') {
                 tipoDisplay = 'PROVEEDOR';
                 tipoIcon = '🚛';
             } else if (registro.tipo === 'visita') {
                 tipoDisplay = 'VISITA';
                 tipoIcon = '👤';
             }

             const patentesHtml = registro.patentes && registro.patentes.length > 0
                 ? registro.patentes.map(p => `<span class="patente-tag">${p}</span>`).join('')
                 : '<span style="color: #fbbf24; font-size: 0.8rem;">🚶 Llega a pie</span>';

             // Información de acompañantes si los hay
             let acompañantesHtml = '';
             if (registro.acompañantes && registro.acompañantes.length > 0) {
                 acompañantesHtml = `
                     <div class="user-detail-item">
                         <span class="user-detail-label">Acompañantes:</span>
                         <span class="user-detail-value">${registro.acompañantes.length} persona(s)</span>
                     </div>
                 `;

                 registro.acompañantes.forEach((acomp, index) => {
                     acompañantesHtml += `
                         <div class="user-detail-item">
                             <span class="user-detail-label">Acomp. ${index + 1}:</span>
                             <span class="user-detail-value ${acomp.esDocumentoExtranjero ? 'documento-extranjero' : ''}">${acomp.nombre} (${acomp.documento})</span>
                         </div>
                     `;
                 });
             }

             // Información de registro delegado
             let registroDelegadoHtml = '';
             if (registro.registradoOriginalmentePor) {
                 registroDelegadoHtml = `
                     <div class="user-detail-item">
                         <span class="user-detail-label">Registrado originalmente por:</span>
                         <span class="user-detail-value">${registro.registradoOriginalmentePor} (ADMINISTRADOR)</span>
                     </div>
                 `;
             }
             if (registro.asignadoA) {
                 registroDelegadoHtml += `
                     <div class="user-detail-item">
                         <span class="user-detail-label">Asignado a:</span>
                         <span class="user-detail-value">${registro.asignadoA}</span>
                     </div>
                 `;
             }

             // SECCIÓN DE BOTONES MODIFICADA
             let actionButtons = '';

             if (registro.tipo === 'asistencia_trabajador') {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 if (registro.registradoPor === userName && userRole === 'guardia') {
                     actionButtons += `<button class="btn-sm btn-edit" onclick="editarAsistenciaGuardia('${registro.id}')">✏️ Editar Patentes</button>`;
                 } else if (userRole === 'administrador') {
                     actionButtons += `<button class="btn-sm btn-edit" onclick="editarAsistenciaGuardia('${registro.id}')">✏️ Editar Patentes</button>`;
                 }

                 if (userRole === 'guardia' && registro.registradoPor === userName) {
                     actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarAsistenciaConMotivo('${registro.id}')">🗑️ Eliminar</button>`;
                 } else if (userRole === 'administrador') {
                     actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarAsistenciaAdmin('${registro.id}')">🗑️ Eliminar</button>`;
                 }
             } else if (registro.tipo === 'proveedor' || registro.tipo === 'visita') {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 if (registro.registradoPor === userName && userRole === 'guardia') {
                     actionButtons += `<button class="btn-sm btn-edit" onclick="editarProveedorVisitaGuardiaAsistencias('${registro.id}')">✏️ Editar</button>`;
                     actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarProveedorVisitaGuardiaAsistencias('${registro.id}')">🗑️ Eliminar</button>`;
                 } else if (userRole === 'administrador') {
                     actionButtons += `<button class="btn-sm btn-edit" onclick="editarProveedorVisitaDesdeAsistencias('${registro.id}')">✏️ Editar</button>`;
                     actionButtons += `<button class="btn-sm btn-delete" onclick="eliminarAsistenciaAdmin('${registro.id}')">🗑️ Eliminar</button>`;
                 }
             }

             // Botón QR - Solo para trabajadores autorizados y activos
             if (registro.estado === 'autorizado' && registro.activo === true &&
                 (registro.tipo === 'trabajador' || registro.tipo === 'asistencia_trabajador')) {
                 actionButtons += `<button class="btn-sm btn-qr" onclick="generarQR('${registro.id}')">📱 Generar QR</button>`;
             }

             card.innerHTML = `
                 <div class="role-badge role-admin">ADMIN</div>
                 <div class="user-card-header">
                     <div class="user-card-avatar">${initials}</div>
                     <div class="user-card-info">
                         <h3>${registro.nombre}</h3>
                         <p class="${registro.esDocumentoExtranjero ? 'documento-extranjero' : ''}">${registro.documento}</p>
                     </div>
                 </div>
                 <div class="user-card-details">
                     <div class="user-detail-item">
                         <span class="user-detail-label">Tipo:</span>
                         <span class="user-detail-value">${tipoIcon} ${tipoDisplay}</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Empresa:</span>
                         <span class="user-detail-value">${registro.empresa}</span>
                     </div>
                     ${registro.subContrato ? `
                         <div class="user-detail-item">
                             <span class="user-detail-label">Sub Contrato:</span>
                             <span class="user-detail-value">${registro.subContrato}</span>
                         </div>
                     ` : ''}
                     ${registro.empresaProveedora ? `
                         <div class="user-detail-item">
                             <span class="user-detail-label">Empresa Proveedora:</span>
                             <span class="user-detail-value">${registro.empresaProveedora}</span>
                         </div>
                     ` : ''}
                     ${registro.numeroGuia ? `
                         <div class="user-detail-item">
                             <span class="user-detail-label">Número de Guía:</span>
                             <span class="user-detail-value">${registro.numeroGuia}</span>
                         </div>
                     ` : ''}
                     <div class="user-detail-item">
                         <span class="user-detail-label">Estado:</span>
                         <span class="status-badge status-authorized">AUTORIZADO</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Registrado por:</span>
                         <span class="user-detail-value">${registro.registradoPor}</span>
                     </div>
                     ${registroDelegadoHtml}
                     <div class="user-detail-item">
                         <span class="user-detail-label">Fecha:</span>
                         <span class="user-detail-value">${registro.fecha}</span>
                     </div>
                     <div class="user-detail-item">
                         <span class="user-detail-label">Hora:</span>
                         <span class="user-detail-value">${registro.hora}</span>
                     </div>
                     ${acompañantesHtml}
                 </div>
                 <div class="user-permissions">
                     <h4>Patentes:</h4>
                     <div class="patentes-container">${patentesHtml}</div>
                 </div>
                 <div class="user-card-actions">
                     ${actionButtons}
                 </div>
             `;

             return card;
         }

         // Limpiar búsqueda de asistencias
         function limpiarBusquedaAsistencias() {
             document.getElementById('busquedaAsistencias').value = '';
             document.getElementById('filtroTipoAsistencia').value = '';
             document.getElementById('fechaDesdeAsistencias').value = '';
             document.getElementById('fechaHastaAsistencias').value = '';

             const container = document.getElementById('resultadosAsistencias');
             const contador = document.getElementById('contadorAsistencias');

             container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">Utilice los filtros para buscar asistencias y visitas</p>';
             contador.style.display = 'none';

             asistenciasFiltradas = [];
             showNotification('Búsqueda limpiada', 'info');
         }

         // Editar registro completo (solo para administrador)
         function editarRegistroCompleto(registroId) {
             if (userRole !== 'administrador') {
                 showNotification('Solo los administradores pueden editar registros completos', 'error');
                 return;
             }

             // Buscar el registro en asistencias
             let registro = asistenciasOriginales.find(r => r.id === registroId);
             if (!registro) {
                 registro = registros.find(r => r.id === registroId);
             }
             if (!registro) {
                 registro = registrosOriginales.find(r => r.id === registroId);
             }

             if (!registro) {
                 showNotification('Registro no encontrado', 'error');
                 return;
             }

             // MARCAR COMO EDICIÓN ESPECIAL Y GUARDAR TIPO ORIGINAL
             window.editandoDesdeAsistencias = true;
             window.tipoOriginalRegistro = registro.tipo; // GUARDAR EL TIPO ORIGINAL
             editandoRegistro = registroId;

             // Llenar formulario
             document.getElementById('esDocumentoExtranjero').checked = registro.esDocumentoExtranjero || false;
             toggleDocumentoExtranjero();

             document.getElementById('documento').value = registro.documento;
             document.getElementById('nombreRegistro').value = registro.nombre;
             document.getElementById('empresaRegistro').value = registro.empresa;
             document.getElementById('subContrato').value = registro.subContrato || '';

             // MOSTRAR EN EL FORMULARIO COMO TRABAJADOR PERO MANTENER TIPO ORIGINAL
             const tipoParaFormulario = registro.tipo === 'asistencia_trabajador' ? 'trabajador' : registro.tipo;
             document.getElementById('tipoPersona').value = tipoParaFormulario;

             if (registro.empresaProveedora) {
                 document.getElementById('empresaProveedora').value = registro.empresaProveedora;
             }
             if (registro.numeroGuia) {
                 document.getElementById('numeroGuia').value = registro.numeroGuia;
             }

             // CARGAR ACOMPAÑANTES SI LOS HAY
             if (registro.acompañantes && registro.acompañantes.length > 0) {
                 // Mostrar el grupo de acompañantes
                 document.getElementById('acompañantesGroup').style.display = 'block';

                 // Establecer la cantidad
                 document.getElementById('cantidadAcompañantes').value = registro.acompañantes.length;

                 // Generar los campos
                 generarCamposAcompañantes();

                 // Llenar los datos después de que se generen los campos
                 setTimeout(() => {
                     registro.acompañantes.forEach((acomp, index) => {
                         const numero = index + 1;
                         const docInput = document.getElementById(`documentoAcomp${numero}`);
                         const nombreInput = document.getElementById(`nombreAcomp${numero}`);
                         const checkboxExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`);

                         if (docInput) {
                             docInput.value = acomp.documento;
                             // Validar el campo después de llenarlo
                             if (window.validarCampoAcompañante) {
                                 validarCampoAcompañante(numero, 'documento');
                             }
                         }

                         if (nombreInput) {
                             nombreInput.value = acomp.nombre;
                             // Validar el campo después de llenarlo
                             if (window.validarCampoAcompañante) {
                                 validarCampoAcompañante(numero, 'nombre');
                             }
                         }

                         if (checkboxExtranjero) {
                             checkboxExtranjero.checked = acomp.esDocumentoExtranjero || false;
                             toggleDocumentoExtranjeroAcompañante(numero);
                         }
                     });
                 }, 100);
             } else {
                 // Si no hay acompañantes, limpiar el campo de cantidad
                 document.getElementById('cantidadAcompañantes').value = '';
                 document.getElementById('acompañantesContainer').style.display = 'none';
             }

             patentesActuales = registro.patentes || [];
             renderPatentes();
             updateLlegaPieMessage();
             toggleProveedorFields();

             // Cambiar al tab de registro
             showTab('registrar');

             // CAMBIAR BOTÓN Y MOSTRAR MENSAJE ESPECIAL
             setTimeout(() => {
                 const submitBtn = document.querySelector('#registroForm button[type="submit"]');
                 if (submitBtn) {
                     submitBtn.innerHTML = '<span>✏️ Actualizar Registro</span>';
                     submitBtn.className = 'btn-primary';
                     submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
                     submitBtn.style.boxShadow = '0 8px 20px rgba(245, 158, 11, 0.3)';
                     submitBtn.disabled = false;
                 }
             }, 200);

             const tipoTexto = registro.tipo === 'asistencia_trabajador' ? 'asistencia de trabajador' :
                              registro.tipo === 'proveedor' ? 'proveedor' : 'visita';
             showNotification(`Editando ${tipoTexto}: ${registro.nombre} - Se mantendrá el tipo original`, 'info');
         }

         // Eliminar asistencia (solo admin)
         async function eliminarAsistenciaAdmin(registroId) {
             if (userRole !== 'administrador') {
                 showNotification('Solo los administradores pueden eliminar registros', 'error');
                 return;
             }

             const registro = asistenciasOriginales.find(r => r.id === registroId);
             if (!registro) return;

             if (confirm(`¿Está seguro de que desea eliminar el registro de ${registro.nombre}? Esta acción no se puede deshacer.`)) {
                 try {
                     await eliminarRegistroFirebase(registroId);

                     // Eliminar de todos los arrays
                     asistenciasOriginales = asistenciasOriginales.filter(r => r.id !== registroId);
                     asistenciasFiltradas = asistenciasFiltradas.filter(r => r.id !== registroId);
                     registros = registros.filter(r => r.id !== registroId);
                     registrosOriginales = registrosOriginales.filter(r => r.id !== registroId);
                     registrosBusqueda = registrosBusqueda.filter(r => r.id !== registroId);

                     renderAsistencias();
                     showNotification('Registro eliminado correctamente', 'success');
                 } catch (error) {
                     showNotification('Error al eliminar registro', 'error');
                 }
             }
         }

         // ===========================================
         // FUNCIONES AUXILIARES NUEVAS PARA ACOMPAÑANTES
         // ===========================================

         // Nueva función para validar campos de acompañantes
         function validarCampoAcompañante(numero, tipo) {
             const campo = document.getElementById(`${tipo}Acomp${numero}`);
             if (!campo) return;

             let esValido = false;

             if (tipo === 'documento') {
                 const esDocumentoExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`)?.checked || false;
                 const valor = campo.value.trim();

                 if (valor) {
                     if (!esDocumentoExtranjero && validarRUT(valor)) {
                         esValido = true;
                     } else if (esDocumentoExtranjero && valor.length >= 5) {
                         esValido = true;
                     }
                 }
             } else if (tipo === 'nombre') {
                 const valor = campo.value.trim();
                 if (valor && valor.length >= 3) {
                     esValido = true;
                 }
             }

             // Actualizar clases CSS
             if (esValido) {
                 campo.classList.remove('invalid');
                 campo.classList.add('valid');
             } else {
                 campo.classList.remove('valid');
                 if (campo.value.trim()) {
                     campo.classList.add('invalid');
                 }
             }

             // Verificar si el acompañante está completo
             verificarAcompañanteCompleto(numero);
         }

         // Verificar si un acompañante está completo
         function verificarAcompañanteCompleto(numero) {
             const documentoInput = document.getElementById(`documentoAcomp${numero}`);
             const nombreInput = document.getElementById(`nombreAcomp${numero}`);
             const acompañanteItem = document.querySelector(`[data-acompañante="${numero}"]`);

             if (!documentoInput || !nombreInput || !acompañanteItem) return;

             const documentoValido = documentoInput.classList.contains('valid');
             const nombreValido = nombreInput.classList.contains('valid');

             if (documentoValido && nombreValido) {
                 acompañanteItem.classList.add('complete');
             } else {
                 acompañanteItem.classList.remove('complete');
             }
         }

         // Agregar mensaje de ayuda dinámico
         function agregarMensajeAyudaAcompañantes(cantidad) {
             const lista = document.getElementById('acompañantesList');
             if (!lista) return;

             // Remover mensaje anterior si existe
             const mensajeAnterior = lista.querySelector('.acompañantes-help');
             if (mensajeAnterior) {
                 mensajeAnterior.remove();
             }

             if (cantidad > 0) {
                 const helpDiv = document.createElement('div');
                 helpDiv.className = 'acompañantes-help';
                 helpDiv.innerHTML = `Complete la información de ${cantidad === 1 ? '1 acompañante' : cantidad + ' acompañantes'} que viajan en el mismo vehículo`;
                 lista.appendChild(helpDiv);
             }
         }

         // Exponer las nuevas funciones globalmente
         window.validarCampoAcompañante = validarCampoAcompañante;
         window.verificarAcompañanteCompleto = verificarAcompañanteCompleto;
         window.agregarMensajeAyudaAcompañantes = agregarMensajeAyudaAcompañantes;

         // Mejorar la función existente agregarEventosAcompañante
         const originalAgregarEventos = window.agregarEventosAcompañante;
         window.agregarEventosAcompañante = function(numero) {
             // Llamar a la función original
             if (originalAgregarEventos) {
                 originalAgregarEventos(numero);
             }

             // Agregar validación en tiempo real
             const documentoInput = document.getElementById(`documentoAcomp${numero}`);
             const nombreInput = document.getElementById(`nombreAcomp${numero}`);

             if (documentoInput) {
                 documentoInput.addEventListener('input', () => validarCampoAcompañante(numero, 'documento'));
                 documentoInput.addEventListener('blur', () => validarCampoAcompañante(numero, 'documento'));
             }

             if (nombreInput) {
                 nombreInput.addEventListener('input', () => validarCampoAcompañante(numero, 'nombre'));
                 nombreInput.addEventListener('blur', () => validarCampoAcompañante(numero, 'nombre'));
             }
         };


         // Función específica para editar proveedores/visitas desde asistencias (admin)
         // Función específica para editar proveedores/visitas desde asistencias (admin)
         function editarProveedorVisitaDesdeAsistencias(registroId) {
             if (userRole !== 'administrador') {
                 showNotification('Solo los administradores pueden editar desde asistencias', 'error');
                 return;
             }

             // Buscar el registro en asistencias
             let registro = asistenciasOriginales.find(r => r.id === registroId);
             if (!registro) {
                 registro = registros.find(r => r.id === registroId);
             }
             if (!registro) {
                 registro = registrosOriginales.find(r => r.id === registroId);
             }

             if (!registro) {
                 showNotification('Registro no encontrado', 'error');
                 return;
             }

             if (registro.tipo !== 'proveedor' && registro.tipo !== 'visita') {
                 showNotification('Esta función solo está disponible para proveedores y visitas', 'error');
                 return;
             }

             // MARCAR COMO EDICIÓN ESPECIAL
             window.editandoDesdeAsistencias = true;
             window.tipoOriginalRegistro = registro.tipo;
             editandoRegistro = registroId;

             // Llenar formulario completo igual que editarRegistroCompleto
             document.getElementById('esDocumentoExtranjero').checked = registro.esDocumentoExtranjero || false;
             toggleDocumentoExtranjero();

             document.getElementById('documento').value = registro.documento;
             document.getElementById('nombreRegistro').value = registro.nombre;
             document.getElementById('empresaRegistro').value = registro.empresa;
             document.getElementById('subContrato').value = registro.subContrato || '';
             document.getElementById('tipoPersona').value = registro.tipo;

             if (registro.empresaProveedora) {
                 document.getElementById('empresaProveedora').value = registro.empresaProveedora;
             }
             if (registro.numeroGuia) {
                 document.getElementById('numeroGuia').value = registro.numeroGuia;
             }

             // CARGAR ACOMPAÑANTES SI LOS HAY
             if (registro.acompañantes && registro.acompañantes.length > 0) {
                 document.getElementById('acompañantesGroup').style.display = 'block';
                 document.getElementById('cantidadAcompañantes').value = registro.acompañantes.length;
                 generarCamposAcompañantes();

                 setTimeout(() => {
                     registro.acompañantes.forEach((acomp, index) => {
                         const numero = index + 1;
                         const docInput = document.getElementById(`documentoAcomp${numero}`);
                         const nombreInput = document.getElementById(`nombreAcomp${numero}`);
                         const checkboxExtranjero = document.getElementById(`esDocumentoExtranjeroAcomp${numero}`);

                         if (checkboxExtranjero) {
                             checkboxExtranjero.checked = acomp.esDocumentoExtranjero || false;
                             toggleDocumentoExtranjeroAcompañante(numero);
                         }
                         if (docInput) docInput.value = acomp.documento;
                         if (nombreInput) nombreInput.value = acomp.nombre;
                     });
                 }, 100);
             } else {
                 document.getElementById('cantidadAcompañantes').value = '';
                 document.getElementById('acompañantesContainer').style.display = 'none';
             }

             patentesActuales = registro.patentes || [];
             renderPatentes();
             updateLlegaPieMessage();
             toggleProveedorFields();

             // Cambiar al tab de registro
             showTab('registrar');

             // Cambiar botón
             setTimeout(() => {
                 const submitBtn = document.querySelector('#registroForm button[type="submit"]');
                 if (submitBtn) {
                     submitBtn.innerHTML = '<span>✏️ Actualizar Registro</span>';
                     submitBtn.className = 'btn-primary';
                     submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100())';
                     submitBtn.style.boxShadow = '0 8px 20px rgba(245, 158, 11, 0.3)';
                     submitBtn.disabled = false;
                 }
             }, 200);

             const tipoTexto = registro.tipo === 'proveedor' ? 'proveedor' : 'visita';
             showNotification(`Editando ${tipoTexto}: ${registro.nombre} - Se mantendrá el tipo original`, 'info');
         }


         // Variables globales para los nuevos tabs
         let misRegistrosOriginales = [];
         let misSubcontratosOriginales = [];

         async function cargarMisRegistros() {
             if (userRole !== 'registrador') return;

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const userEmpresa = currentUserData ? currentUserData.empresa : null;
                 const querySnapshot = await getDocs(collection(db, 'registros'));
                 misRegistrosOriginales = [];

                 querySnapshot.forEach((docSnapshot) => {
                     const registro = { id: docSnapshot.id, ...docSnapshot.data() };

                     if ((registro.tipo === 'trabajador' || registro.tipo === 'asistencia_trabajador') &&
                         registro.estado === 'autorizado') {

                         let incluirRegistro = false;

                         if (registro.registradoPor === userName && registro.registradoPorRol === 'registrador') {
                             incluirRegistro = true;
                         } else if (registro.registradoPorRol === 'administrador' &&
                             registro.empresa === userEmpresa &&
                             (!registro.subContrato || registro.subContrato.trim() === '')) {
                             incluirRegistro = true;
                         } else if (registro.esRegistroDelegado && registro.asignadoA === userName) {
                             incluirRegistro = true;
                         } else if (registro.asignacionRetroactiva && registro.asignadoA === userName) {
                             incluirRegistro = true;
                         }

                         if (incluirRegistro) {
                             misRegistrosOriginales.push(registro);
                         }
                     }
                 });

                 misRegistrosOriginales.sort((a, b) => {
                     const fechaA = new Date(a.timestamp || `${a.fecha} ${a.hora}`);
                     const fechaB = new Date(b.timestamp || `${b.fecha} ${b.hora}`);
                     return fechaB - fechaA;
                 });

                 renderMisRegistros();
             } catch (error) {
                 console.error('Error cargando mis registros:', error);
                 showNotification('Error al cargar registros', 'error');
             }
         }

         async function cargarMisSubcontratos() {
             if (userRole !== 'sub-registrador') return;

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const userSubcontrato = currentUserData ? currentUserData.subcontrato : null;
                 const querySnapshot = await getDocs(collection(db, 'registros'));
                 misSubcontratosOriginales = [];

                 querySnapshot.forEach((docSnapshot) => {
                     const registro = { id: docSnapshot.id, ...docSnapshot.data() };

                     if ((registro.registradoPor === userName ||
                          registro.asignadoA === userName ||
                          (registro.subContrato === userSubcontrato && userSubcontrato)) &&
                         (registro.tipo === 'trabajador' || registro.tipo === 'asistencia_trabajador') &&
                         registro.estado === 'autorizado') {
                         misSubcontratosOriginales.push(registro);
                     }
                 });

                 misSubcontratosOriginales.sort((a, b) => {
                     const fechaA = new Date(a.timestamp || `${a.fecha} ${a.hora}`);
                     const fechaB = new Date(b.timestamp || `${b.fecha} ${b.hora}`);
                     return fechaB - fechaA;
                 });

                 renderMisSubcontratos();
                 cargarSubcontratosEnFiltro();
             } catch (error) {
                 console.error('Error cargando mis subcontratos:', error);
                 showNotification('Error al cargar subcontratos', 'error');
             }
         }

         // Función corregida para renderizar registros en dos columnas
         function renderMisRegistros() {
             const container = document.getElementById('resultadosMisRegistros');
             if (!container) return;

             container.innerHTML = '';

             if (misRegistrosOriginales.length === 0) {
                 container.innerHTML = `
                     <div style="text-align: center; grid-column: 1 / -1; padding: 40px; color: var(--text-light);">
                         <h3>📋 No tienes registros asignados</h3>
                         <p>Aquí aparecerán:</p>
                         <ul style="text-align: left; display: inline-block; margin-top: 15px;">
                             <li>• Personas que registraste directamente</li>
                             <li>• Personas de tu empresa registradas por el administrador</li>
                             <li>• Registros asignados específicamente por el administrador</li>
                         </ul>
                     </div>
                 `;
                 return;
             }

             const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
             const userEmpresa = currentUserData ? currentUserData.empresa : null;

             // Agrupar por tipo de asignación
             const registrosPropios = misRegistrosOriginales.filter(r =>
                 r.registradoPor === userName &&
                 r.registradoPorRol === 'registrador'
             );

             const registrosDeEmpresa = misRegistrosOriginales.filter(r =>
                 r.registradoPorRol === 'administrador' &&
                 r.empresa === userEmpresa &&
                 (!r.subContrato || r.subContrato.trim() === '')
             );

             const registrosDelegados = misRegistrosOriginales.filter(r =>
                 r.esRegistroDelegado &&
                 r.asignadoA === userName
             );

             const registrosAsignacionRetroactiva = misRegistrosOriginales.filter(r =>
                 r.asignacionRetroactiva &&
                 r.asignadoA === userName
             );

             // Crear contenedor principal en dos columnas
             const mainWrapper = document.createElement('div');
             mainWrapper.style.cssText = `
                 display: grid;
                 grid-template-columns: 1fr 1fr;
                 gap: 30px;
                 width: 100%;
                 grid-column: 1 / -1;
                 min-height: 400px;
             `;

             // COLUMNA IZQUIERDA
             const columnaIzquierda = document.createElement('div');
             columnaIzquierda.style.cssText = `
                 display: flex;
                 flex-direction: column;
                 gap: 25px;
             `;

             // COLUMNA DERECHA
             const columnaDerecha = document.createElement('div');
             columnaDerecha.style.cssText = `
                 display: flex;
                 flex-direction: column;
                 gap: 25px;
             `;

             // Sección 1: Mis Registros Directos (COLUMNA IZQUIERDA)
             if (registrosPropios.length > 0) {
                 const seccionPropios = document.createElement('div');
                 seccionPropios.style.cssText = `
                     display: flex;
                     flex-direction: column;
                     gap: 15px;
                 `;

                 seccionPropios.innerHTML = `
                     <h4 style="color: #3b82f6; margin: 0; padding: 15px; background: rgba(59, 130, 246, 0.1);
                                border-radius: 8px; border-left: 4px solid #3b82f6; font-size: 1.1rem;">
                         🏢 Mis Registros Directos (${registrosPropios.length})
                     </h4>
                 `;

                 const tarjetasPropios = document.createElement('div');
                 tarjetasPropios.style.cssText = `
                     display: flex;
                     flex-direction: column;
                     gap: 15px;
                 `;

                 registrosPropios.forEach(registro => {
                     const registroCard = createMisRegistrosCard(registro, 'propio');
                     registroCard.style.width = '100%';
                     tarjetasPropios.appendChild(registroCard);
                 });

                 seccionPropios.appendChild(tarjetasPropios);
                 columnaIzquierda.appendChild(seccionPropios);
             }

             // Sección 3: Asignaciones Específicas (COLUMNA IZQUIERDA)
             if (registrosDelegados.length > 0) {
                 const seccionDelegados = document.createElement('div');
                 seccionDelegados.style.cssText = `
                     display: flex;
                     flex-direction: column;
                     gap: 15px;
                 `;

                 seccionDelegados.innerHTML = `
                     <h4 style="color: #ec4899; margin: 0; padding: 15px; background: rgba(236, 72, 153, 0.1);
                                border-radius: 8px; border-left: 4px solid #ec4899; font-size: 1.1rem;">
                         📋 Asignaciones Específicas (${registrosDelegados.length})
                     </h4>
                 `;

                 const tarjetasDelegados = document.createElement('div');
                 tarjetasDelegados.style.cssText = `
                     display: flex;
                     flex-direction: column;
                     gap: 15px;
                 `;

                 registrosDelegados.forEach(registro => {
                     const registroCard = createMisRegistrosCard(registro, 'delegado');
                     registroCard.style.width = '100%';
                     tarjetasDelegados.appendChild(registroCard);
                 });

                 seccionDelegados.appendChild(tarjetasDelegados);
                 columnaIzquierda.appendChild(seccionDelegados);
             }

             // Sección 2: Mi Empresa (Admin) (COLUMNA DERECHA)
             if (registrosDeEmpresa.length > 0) {
                 const seccionEmpresa = document.createElement('div');
                 seccionEmpresa.style.cssText = `
                     display: flex;
                     flex-direction: column;
                     gap: 15px;
                 `;

                 seccionEmpresa.innerHTML = `
                     <h4 style="color: #f59e0b; margin: 0; padding: 15px; background: rgba(245, 158, 11, 0.1);
                                border-radius: 8px; border-left: 4px solid #f59e0b; font-size: 1.1rem;">
                         🎯 Mi Empresa (Registradas por Admin) (${registrosDeEmpresa.length})
                     </h4>
                 `;

                 const tarjetasEmpresa = document.createElement('div');
                 tarjetasEmpresa.style.cssText = `
                     display: flex;
                     flex-direction: column;
                     gap: 15px;
                 `;

                 registrosDeEmpresa.forEach(registro => {
                     const registroCard = createMisRegistrosCard(registro, 'empresa');
                     registroCard.style.width = '100%';
                     tarjetasEmpresa.appendChild(registroCard);
                 });

                 seccionEmpresa.appendChild(tarjetasEmpresa);
                 columnaDerecha.appendChild(seccionEmpresa);
             }

             // Sección 4: Asignaciones Automáticas (COLUMNA DERECHA)
             if (registrosAsignacionRetroactiva.length > 0) {
                 const seccionRetroactiva = document.createElement('div');
                 seccionRetroactiva.style.cssText = `
                     display: flex;
                     flex-direction: column;
                     gap: 15px;
                 `;

                 seccionRetroactiva.innerHTML = `
                     <h4 style="color: #8b5cf6; margin: 0; padding: 15px; background: rgba(139, 92, 246, 0.1);
                                border-radius: 8px; border-left: 4px solid #8b5cf6; font-size: 1.1rem;">
                         🔄 Asignaciones Automáticas (${registrosAsignacionRetroactiva.length})
                     </h4>
                 `;

                 const tarjetasRetroactiva = document.createElement('div');
                 tarjetasRetroactiva.style.cssText = `
                     display: flex;
                     flex-direction: column;
                     gap: 15px;
                 `;

                 registrosAsignacionRetroactiva.forEach(registro => {
                     const registroCard = createMisRegistrosCard(registro, 'retroactiva');
                     registroCard.style.width = '100%';
                     tarjetasRetroactiva.appendChild(registroCard);
                 });

                 seccionRetroactiva.appendChild(tarjetasRetroactiva);
                 columnaDerecha.appendChild(seccionRetroactiva);
             }

             // Agregar mensaje si alguna columna está vacía
             if (columnaIzquierda.children.length === 0) {
                 const mensajeVacio = document.createElement('div');
                 mensajeVacio.style.cssText = `
                     padding: 20px;
                     text-align: center;
                     color: var(--text-light);
                     background: rgba(255, 255, 255, 0.05);
                     border-radius: 8px;
                     border: 2px dashed rgba(255, 255, 255, 0.1);
                 `;
                 mensajeVacio.innerHTML = `
                     <p style="margin: 0; font-style: italic;">
                         No hay registros directos ni asignaciones específicas
                     </p>
                 `;
                 columnaIzquierda.appendChild(mensajeVacio);
             }

             if (columnaDerecha.children.length === 0) {
                 const mensajeVacio = document.createElement('div');
                 mensajeVacio.style.cssText = `
                     padding: 20px;
                     text-align: center;
                     color: var(--text-light);
                     background: rgba(255, 255, 255, 0.05);
                     border-radius: 8px;
                     border: 2px dashed rgba(255, 255, 255, 0.1);
                 `;
                 mensajeVacio.innerHTML = `
                     <p style="margin: 0; font-style: italic;">
                         No hay registros de empresa ni asignaciones automáticas
                     </p>
                 `;
                 columnaDerecha.appendChild(mensajeVacio);
             }

             mainWrapper.appendChild(columnaIzquierda);
             mainWrapper.appendChild(columnaDerecha);
             container.appendChild(mainWrapper);
         }

         // También necesitas agregar responsividad para pantallas pequeñas
         function agregarResponsividad() {
             const style = document.createElement('style');
             style.textContent = `
                 @media (max-width: 1200px) {
                     #resultadosMisRegistros > div {
                         grid-template-columns: 1fr !important;
                         gap: 20px !important;
                     }
                 }

                 @media (max-width: 768px) {
                     #resultadosMisRegistros > div {
                         grid-template-columns: 1fr !important;
                         gap: 15px !important;
                     }
                 }
             `;
             document.head.appendChild(style);
         }

         // Llamar la función de responsividad una vez al cargar
         if (!document.getElementById('responsividad-mis-registros')) {
             agregarResponsividad();
             // Marcar que ya se agregó para evitar duplicados
             const marker = document.createElement('div');
             marker.id = 'responsividad-mis-registros';
             marker.style.display = 'none';
             document.body.appendChild(marker);
         }

         // Función corregida para crear tarjetas con badges mejorados
         function createMisRegistrosCard(registro, tipoOrigen) {
             const card = createRegistroCard(registro); // Usar la función existente

             // Remover el border-left que se aplicaba antes
             card.style.borderLeft = 'none';

             // Agregar badge mejorado según el origen
             let badgeOrigen = '';

             switch (tipoOrigen) {
                 case 'propio':
                     badgeOrigen = `
                         <div style="position: absolute; top: 10px; right: 10px; z-index: 10;
                                    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
                                    color: white; padding: 6px 12px; border-radius: 20px;
                                    font-size: 0.75rem; font-weight: bold; text-transform: uppercase;
                                    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);">
                             Mi Registro
                         </div>
                     `;
                     break;
                 case 'empresa':
                     badgeOrigen = `
                         <div style="position: absolute; top: 10px; right: 10px; z-index: 10;
                                    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
                                    color: white; padding: 6px 12px; border-radius: 20px;
                                    font-size: 0.75rem; font-weight: bold; text-transform: uppercase;
                                    box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3);">
                             Admin → REG
                         </div>
                     `;
                     break;
                 case 'delegado':
                     badgeOrigen = `
                         <div style="position: absolute; top: 10px; right: 10px; z-index: 10;
                                    background: linear-gradient(135deg, #ec4899 0%, #be185d 100%);
                                    color: white; padding: 6px 12px; border-radius: 20px;
                                    font-size: 0.75rem; font-weight: bold; text-transform: uppercase;
                                    box-shadow: 0 2px 8px rgba(236, 72, 153, 0.3);">
                             Asignación
                         </div>
                     `;
                     break;
                 case 'retroactiva':
                     badgeOrigen = `
                         <div style="position: absolute; top: 10px; right: 10px; z-index: 10;
                                    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
                                    color: white; padding: 6px 12px; border-radius: 20px;
                                    font-size: 0.75rem; font-weight: bold; text-transform: uppercase;
                                    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.3);">
                             Automática
                         </div>
                     `;
                     break;
             }

             // Hacer la tarjeta relativa para posicionar el badge
             card.style.position = 'relative';

             // Agregar el badge al inicio de la tarjeta
             card.insertAdjacentHTML('afterbegin', badgeOrigen);

             return card;
         }

         // Función para mejorar el badge de rol existente
         function mejorarBadgeRol(card) {
             const roleBadge = card.querySelector('.role-badge');
             if (roleBadge) {
                 // Asegurar que no interfiera con el nuevo badge
                 roleBadge.style.cssText += `
                     top: 10px;
                     left: 10px;
                     z-index: 9;
                     padding: 4px 8px;
                     font-size: 0.7rem;
                 `;
             }
         }

         // Renderizar registros del sub-registrador
         function renderMisSubcontratos() {
             const container = document.getElementById('resultadosMisSubcontratos');
             if (!container) return;

             container.innerHTML = '';

             if (misSubcontratosOriginales.length === 0) {
                 container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No tienes subcontratos asignados</p>';
                 return;
             }

             misSubcontratosOriginales.forEach(registro => {
                 const registroCard = createRegistroCard(registro);
                 registroCard.classList.add('registro-subcontrato');
                 container.appendChild(registroCard);
             });
         }

         // Buscar en mis registros (registrador)
         function buscarMisRegistros() {
             const termino = document.getElementById('buscarMisRegistros').value.toLowerCase().trim();
             const filtroTipo = document.getElementById('filtroTipoMisRegistros').value;
             const filtroEstado = document.getElementById('filtroEstadoMisRegistros').value;

             let registrosFiltrados = [...misRegistrosOriginales];

             // Filtro por término de búsqueda
             if (termino) {
                 registrosFiltrados = registrosFiltrados.filter(registro => {
                     const campos = [
                         registro.documento || '',
                         registro.nombre || '',
                         registro.empresa || '',
                         registro.subContrato || ''
                     ];
                     return campos.some(campo =>
                         campo.toString().toLowerCase().includes(termino)
                     );
                 });
             }

             // Filtro por tipo
             if (filtroTipo) {
                 registrosFiltrados = registrosFiltrados.filter(registro => registro.tipo === filtroTipo);
             }

             // Filtro por estado
             if (filtroEstado) {
                 registrosFiltrados = registrosFiltrados.filter(registro => registro.estado === filtroEstado);
             }

             // Actualizar contador
             const contador = document.getElementById('contadorMisRegistros');
             const numeroRegistros = document.getElementById('numeroMisRegistros');

             numeroRegistros.textContent = registrosFiltrados.length;
             contador.style.display = 'block';

             // Renderizar resultados
             const container = document.getElementById('resultadosMisRegistros');
             container.innerHTML = '';

             if (registrosFiltrados.length === 0) {
                 container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No se encontraron registros</p>';
                 return;
             }

             registrosFiltrados.forEach(registro => {
                 const registroCard = createRegistroCard(registro);
                 registroCard.classList.add('registro-asignado');
                 container.appendChild(registroCard);
             });
         }

         // Buscar en mis subcontratos (sub-registrador)
         function buscarMisSubcontratos() {
             const termino = document.getElementById('buscarMisSubcontratos').value.toLowerCase().trim();
             const filtroSubcontrato = document.getElementById('filtroSubcontrato').value;
             const filtroEstado = document.getElementById('filtroEstadoSubcontratos').value;

             let registrosFiltrados = [...misSubcontratosOriginales];

             // Filtro por término de búsqueda
             if (termino) {
                 registrosFiltrados = registrosFiltrados.filter(registro => {
                     const campos = [
                         registro.documento || '',
                         registro.nombre || '',
                         registro.empresa || '',
                         registro.subContrato || ''
                     ];
                     return campos.some(campo =>
                         campo.toString().toLowerCase().includes(termino)
                     );
                 });
             }

             // Filtro por subcontrato
             if (filtroSubcontrato) {
                 registrosFiltrados = registrosFiltrados.filter(registro =>
                     registro.subContrato === filtroSubcontrato
                 );
             }

             // Filtro por estado
             if (filtroEstado) {
                 registrosFiltrados = registrosFiltrados.filter(registro => registro.estado === filtroEstado);
             }

             // Actualizar contador
             const contador = document.getElementById('contadorMisSubcontratos');
             const numeroRegistros = document.getElementById('numeroMisSubcontratos');

             numeroRegistros.textContent = registrosFiltrados.length;
             contador.style.display = 'block';

             // Renderizar resultados
             const container = document.getElementById('resultadosMisSubcontratos');
             container.innerHTML = '';

             if (registrosFiltrados.length === 0) {
                 container.innerHTML = '<p style="color: var(--text-light); text-align: center; grid-column: 1 / -1;">No se encontraron registros</p>';
                 return;
             }

             registrosFiltrados.forEach(registro => {
                 const registroCard = createRegistroCard(registro);
                 registroCard.classList.add('registro-subcontrato');
                 container.appendChild(registroCard);
             });
         }

         // Cargar subcontratos en el filtro
         function cargarSubcontratosEnFiltro() {
             const select = document.getElementById('filtroSubcontrato');
             if (!select) return;

             // Limpiar opciones existentes (excepto "Todos")
             select.innerHTML = '<option value="">Todos</option>';

             // Obtener subcontratos únicos
             const subcontratos = [...new Set(misSubcontratosOriginales
                 .filter(r => r.subContrato)
                 .map(r => r.subContrato))];

             subcontratos.forEach(subcontrato => {
                 const option = document.createElement('option');
                 option.value = subcontrato;
                 option.textContent = subcontrato;
                 select.appendChild(option);
             });
         }

         // Función corregida para mis registros
         function actualizarContadorMisRegistros() {
             const counter = document.getElementById('counter-mis-registros');
             if (counter) {
                 // Solo mostrar si hay datos cargados
                 if (misRegistrosOriginales && misRegistrosOriginales.length > 0) {
                     counter.textContent = misRegistrosOriginales.length;
                     counter.style.display = 'inline';
                 } else {
                     counter.style.display = 'none';
                 }
             }
         }

         // Función corregida para mis subcontratos
         function actualizarContadorMisSubcontratos() {
             const counter = document.getElementById('counter-mis-subcontratos');
             if (counter) {
                 // Solo mostrar si hay datos cargados
                 if (misSubcontratosOriginales && misSubcontratosOriginales.length > 0) {
                     counter.textContent = misSubcontratosOriginales.length;
                     counter.style.display = 'inline';
                 } else {
                     counter.style.display = 'none';
                 }
             }
         }

         // FUNCIÓN FALTANTE 1
         function selectAllDiasEspecialesPendientesAutorizacion() {
             const diasPendientes = diasEspeciales.filter(d => d.estado === 'pendiente');

             diasPendientes.forEach(dia => {
                 selectedDiasEspeciales.add(dia.id);
                 const checkbox = document.getElementById(`select-dia-${dia.id}`);
                 const card = document.querySelector(`[data-dia-id="${dia.id}"]`);

                 if (checkbox) checkbox.checked = true;
                 if (card) card.classList.add('selected');
             });

             updateDiasEspecialesAutorizacionControls();
         }

         // FUNCIÓN FALTANTE 2
         function clearAllDiasEspecialesAutorizacionSelections() {
             selectedDiasEspeciales.forEach(diaId => {
                 const checkbox = document.getElementById(`select-dia-${diaId}`);
                 const card = document.querySelector(`[data-dia-id="${diaId}"]`);

                 if (checkbox) checkbox.checked = false;
                 if (card) card.classList.remove('selected');
             });

             selectedDiasEspeciales.clear();
             updateDiasEspecialesAutorizacionControls();
         }

         // FUNCIÓN FALTANTE 3
         async function autorizarDiasEspecialesSeleccionados() {
             if (selectedDiasEspeciales.size === 0) {
                 showNotification('No hay días especiales seleccionados', 'error');
                 return;
             }

             const count = selectedDiasEspeciales.size;
             if (!confirm(`¿Está seguro de que desea autorizar ${count} día(s) especiales?`)) {
                 return;
             }

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const promises = [];

                 selectedDiasEspeciales.forEach(diaId => {
                     const datosActualizados = {
                         estado: 'autorizado',
                         autorizadoPor: userName,
                         fechaAutorizacion: new Date().toISOString().split('T')[0],
                         horaAutorizacion: new Date().toLocaleTimeString()
                     };

                     promises.push(actualizarRegistro(diaId, datosActualizados, 'dias_especiales'));
                 });

                 await Promise.all(promises);

                 // Actualizar en memoria
                 selectedDiasEspeciales.forEach(diaId => {
                     const diaIndex = diasEspeciales.findIndex(d => d.id === diaId);
                     if (diaIndex !== -1) {
                         diasEspeciales[diaIndex].estado = 'autorizado';
                         diasEspeciales[diaIndex].autorizadoPor = userName;
                         diasEspeciales[diaIndex].fechaAutorizacion = new Date().toISOString().split('T')[0];
                         diasEspeciales[diaIndex].horaAutorizacion = new Date().toLocaleTimeString();
                     }
                 });

                 selectedDiasEspeciales.clear();
                 renderTablaDiasEspeciales();
                 actualizarContadoresTabs();
                 showNotification(`${count} día(s) especiales autorizados exitosamente`, 'success');

             } catch (error) {
                 console.error('Error autorizando días especiales:', error);
                 showNotification('Error al autorizar días especiales', 'error');
             }
         }

         // FUNCIÓN FALTANTE 4
         async function rechazarDiasEspecialesSeleccionados() {
             if (selectedDiasEspeciales.size === 0) {
                 showNotification('No hay días especiales seleccionados', 'error');
                 return;
             }

             const count = selectedDiasEspeciales.size;
             if (!confirm(`¿Está seguro de que desea rechazar ${count} día(s) especiales?`)) {
                 return;
             }

             try {
                 const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                 const promises = [];

                 selectedDiasEspeciales.forEach(diaId => {
                     const datosActualizados = {
                         estado: 'rechazado',
                         rechazadoPor: userName,
                         fechaRechazo: new Date().toISOString().split('T')[0],
                         horaRechazo: new Date().toLocaleTimeString()
                     };

                     promises.push(actualizarRegistro(diaId, datosActualizados, 'dias_especiales'));
                 });

                 await Promise.all(promises);

                 // Actualizar en memoria
                 selectedDiasEspeciales.forEach(diaId => {
                     const diaIndex = diasEspeciales.findIndex(d => d.id === diaId);
                     if (diaIndex !== -1) {
                         diasEspeciales[diaIndex].estado = 'rechazado';
                         diasEspeciales[diaIndex].rechazadoPor = userName;
                         diasEspeciales[diaIndex].fechaRechazo = new Date().toISOString().split('T')[0];
                         diasEspeciales[diaIndex].horaRechazo = new Date().toLocaleTimeString();
                     }
                 });

                 selectedDiasEspeciales.clear();
                 renderTablaDiasEspeciales();
                 actualizarContadoresTabs();
                 showNotification(`${count} día(s) especiales rechazados`, 'info');

             } catch (error) {
                 console.error('Error rechazando días especiales:', error);
                 showNotification('Error al rechazar días especiales', 'error');
             }
         }

         // ===== FUNCIONES DE REPORTES =====

         function cambiarTipoReporte() {
             const tipo = document.getElementById('tipoReporte').value;
             const filtrosAdicionales = document.getElementById('filtrosAdicionales');

             if (tipo) {
                 filtrosAdicionales.style.display = 'block';
             } else {
                 filtrosAdicionales.style.display = 'none';
             }

             ocultarPrevisualizacion();
         }

         function cambiarFiltroFechaReporte() {
             const filtro = document.getElementById('filtroFechaReporte').value;
             const fechasPersonalizadas = document.getElementById('fechasPersonalizadasReporte');

             if (filtro === 'personalizado') {
                 fechasPersonalizadas.style.display = 'flex';
                 // Establecer fechas por defecto
                 const hoy = new Date().toISOString().split('T')[0];
                 const haceUnMes = new Date();
                 haceUnMes.setMonth(haceUnMes.getMonth() - 1);
                 document.getElementById('fechaDesdeReporte').value = haceUnMes.toISOString().split('T')[0];
                 document.getElementById('fechaHastaReporte').value = hoy;
             } else {
                 fechasPersonalizadas.style.display = 'none';
             }

             ocultarPrevisualizacion();
         }

         function ocultarPrevisualizacion() {
             document.getElementById('previsualizacionReporte').style.display = 'none';
         }

         // NUEVA FUNCIÓN - Agregar antes de obtenerDatosReporte
         async function cargarFeriadosParaReporte() {
             try {
                 // Solo cargar si no están cargados o están vacíos
                 if (!feriados || feriados.length === 0) {
                     console.log('Cargando feriados para reporte...');
                     const querySnapshot = await getDocs(collection(db, 'feriados'));
                     feriados = [];
                     querySnapshot.forEach((docSnapshot) => {
                         feriados.push({
                             id: docSnapshot.id,
                             ...docSnapshot.data()
                         });
                     });
                     console.log('Feriados cargados:', feriados.length);
                 }
             } catch (error) {
                 console.error('Error cargando feriados para reporte:', error);
                 feriados = []; // Asegurar que esté inicializado
             }
         }

         async function obtenerDatosReporte() {
           await cargarFeriadosParaReporte();
             const tipo = document.getElementById('tipoReporte').value;
             const filtroFecha = document.getElementById('filtroFechaReporte').value;
             const filtroEstado = document.getElementById('filtroEstadoReporte').value;
             const filtroEmpresa = document.getElementById('filtroEmpresaReporte').value.toLowerCase().trim();

             if (!tipo) {
                 showNotification('Seleccione un tipo de reporte', 'error');
                 return null;
             }

             let datos = [];

             // Obtener datos según el tipo
             try {
                 switch (tipo) {
                     case 'registros':
                         const queryRegistros = await getDocs(collection(db, 'registros'));
                         queryRegistros.forEach(doc => {
                             const data = doc.data();
                             if (data.tipo === 'trabajador' && data.estado === 'autorizado') {
                                 datos.push({ id: doc.id, ...data });
                             }
                         });
                         break;

                     case 'asistencias':
                         const queryAsistencias = await getDocs(collection(db, 'registros'));
                         queryAsistencias.forEach(doc => {
                             const data = doc.data();
                             if (data.tipo === 'asistencia_trabajador') {
                                 datos.push({ id: doc.id, ...data });
                             }
                         });
                         break;

                     case 'proveedores-visitas':
                         const queryProveedoresVisitas = await getDocs(collection(db, 'registros'));
                         queryProveedoresVisitas.forEach(doc => {
                             const data = doc.data();
                             if (data.tipo === 'proveedor' || data.tipo === 'visita') {
                                 datos.push({ id: doc.id, ...data });
                             }
                         });
                         break;

                     case 'dias-especiales':
                         const queryDias = await getDocs(collection(db, 'dias_especiales'));
                         queryDias.forEach(doc => {
                             datos.push({ id: doc.id, ...doc.data() });
                         });
                         break;

                     case 'esperadas':
                         const queryEsperadas = await getDocs(collection(db, 'esperadas'));
                         queryEsperadas.forEach(doc => {
                             datos.push({ id: doc.id, ...doc.data() });
                         });
                         break;

                     case 'bloqueos':
                         const queryBloqueos = await getDocs(collection(db, 'bloqueos'));
                         queryBloqueos.forEach(doc => {
                             datos.push({ id: doc.id, ...doc.data() });
                         });
                         break;

                     case 'solicitudes':
                         const querySolicitudes = await getDocs(collection(db, 'solicitudes_desactivacion'));
                         querySolicitudes.forEach(doc => {
                             datos.push({ id: doc.id, ...doc.data() });
                         });
                         break;

                     case 'usuarios':
                         const queryUsuarios = await getDocs(collection(db, 'usuarios'));
                         queryUsuarios.forEach(doc => {
                             datos.push({ id: doc.id, ...doc.data() });
                         });
                         break;
                 }
             } catch (error) {
                 console.error('Error obteniendo datos:', error);
                 showNotification('Error al obtener datos del reporte', 'error');
                 return null;
             }

             // Aplicar filtros de fecha
             if (filtroFecha !== 'todos') {
                 const hoy = new Date();
                 let fechaInicio, fechaFin;

                 switch (filtroFecha) {
                     case 'hoy':
                         fechaInicio = fechaFin = hoy.toISOString().split('T')[0];
                         break;
                     case 'semana':
                         const inicioSemana = new Date(hoy);
                         inicioSemana.setDate(hoy.getDate() - hoy.getDay());
                         fechaInicio = inicioSemana.toISOString().split('T')[0];
                         fechaFin = hoy.toISOString().split('T')[0];
                         break;
                     case 'mes':
                         fechaInicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1).toISOString().split('T')[0];
                         fechaFin = hoy.toISOString().split('T')[0];
                         break;
                     case 'personalizado':
                         fechaInicio = document.getElementById('fechaDesdeReporte').value;
                         fechaFin = document.getElementById('fechaHastaReporte').value;
                         break;
                 }

                 if (fechaInicio && fechaFin) {
                     datos = datos.filter(item => {
                         const fechaItem = item.fecha || item.fechaRegistro || item.fechaCreacion || item.fechaSolicitud;
                         return fechaItem && fechaItem >= fechaInicio && fechaItem <= fechaFin;
                     });
                 }
             }

             // Aplicar filtro de estado
             if (filtroEstado) {
                 datos = datos.filter(item => item.estado === filtroEstado || item.activo?.toString() === filtroEstado);
             }

             // Aplicar filtro de empresa
             if (filtroEmpresa) {
                 datos = datos.filter(item => {
                     const empresa = (item.empresa || item.empresaPersona || '').toLowerCase();
                     return empresa.includes(filtroEmpresa);
                 });
             }

             return datos;
         }


         async function previsualizarReporte() {
             // Asegurar que los feriados estén cargados ANTES de obtener datos
             await cargarFeriadosParaReporte();

             const datos = await obtenerDatosReporte();
             if (!datos) return;

             const tipo = document.getElementById('tipoReporte').value;
             const previsualizacion = document.getElementById('previsualizacionReporte');
             const contenido = document.getElementById('contenidoReporte');
             const contador = document.getElementById('totalRegistrosReporte');

             contador.textContent = datos.length;

             if (datos.length === 0) {
                 contenido.innerHTML = '<p style="text-align: center; color: var(--text-light);">No hay datos para mostrar con los filtros seleccionados.</p>';
                 previsualizacion.style.display = 'block';
                 return;
             }

             // Generar tabla según el tipo (ahora es síncrono)
             let tabla = generarTablaReporte(datos, tipo);
             contenido.innerHTML = tabla;
             previsualizacion.style.display = 'block';
         }


         function generarTablaReporte(datos, tipo) {
             if (datos.length === 0) return '<p>No hay datos para mostrar.</p>';

             let headers = [];
             let filas = [];

             switch (tipo) {
                 case 'registros':
                     headers = ['Documento', 'Nombre', 'Empresa', 'Subcontrato', 'Estado', 'Fecha Registro'];
                     filas = datos.map(item => ({
                         celdas: [
                             item.documento || '-',
                             item.nombre || '-',
                             item.empresa || '-',
                             item.subContrato || '-',
                             item.estado || '-',
                             item.fecha || '-'
                         ],
                         esDocumentoExtranjero: item.esDocumentoExtranjero || false
                     }));
                     break;

                 case 'asistencias':
                     headers = ['Tipo', 'Documento', 'Nombre', 'Empresa', 'Patentes', 'Acompañantes', 'Fecha', 'Hora'];
                     filas = datos.map(item => {
                         let acompañantesInfo = '-';
                         if (item.acompañantes && item.acompañantes.length > 0) {
                             acompañantesInfo = `${item.acompañantes.length} persona(s): ${item.acompañantes.map(a => `${a.nombre} (${a.documento})`).join(', ')}`;
                         }

                         return {
                             celdas: [
                                 item.tipo === 'asistencia_trabajador' ? 'Asistencia' : item.tipo || '-',
                                 item.documento || '-',
                                 item.nombre || '-',
                                 item.empresa || '-',
                                 (item.patentes || []).join(', ') || 'A pie',
                                 acompañantesInfo,
                                 item.fecha || '-',
                                 item.hora || '-'
                             ],
                             esDocumentoExtranjero: item.esDocumentoExtranjero || false
                         };
                     });
                     break;

                 case 'proveedores-visitas':
                     headers = ['Tipo', 'Documento', 'Nombre', 'Empresa', 'Empresa Proveedora', 'Número Guía', 'Acompañantes', 'Patentes', 'Fecha', 'Hora'];
                     filas = datos.filter(item => item.tipo === 'proveedor' || item.tipo === 'visita').map(item => {
                         let acompañantesInfo = '-';
                         if (item.acompañantes && item.acompañantes.length > 0) {
                             acompañantesInfo = `${item.acompañantes.length}: ${item.acompañantes.map(a => `${a.nombre} (${a.documento})`).join(', ')}`;
                         }

                         return {
                             celdas: [
                                 item.tipo.toUpperCase(),
                                 item.documento || '-',
                                 item.nombre || '-',
                                 item.empresa || '-',
                                 item.empresaProveedora || '-',
                                 item.numeroGuia || '-',
                                 acompañantesInfo,
                                 (item.patentes || []).join(', ') || 'A pie',
                                 item.fecha || '-',
                                 item.hora || '-'
                             ],
                             esDocumentoExtranjero: item.esDocumentoExtranjero || false
                         };
                     });
                     break;

                 case 'dias-especiales':
                     headers = ['Documento', 'Nombre', 'Empresa', 'Fechas Autorizadas', 'Estado', 'Motivo'];
                     filas = datos.map(item => {
                         let fechasDetalle = [];

                         // Formatear fechas de sábados de manera más compacta
                         if (item.fechasSabado && item.fechasSabado.length > 0) {
                             const fechasSabados = item.fechasSabado
                                 .map(fecha => new Date(fecha + 'T00:00:00').toLocaleDateString('es-CL', {
                                     day: '2-digit',
                                     month: '2-digit'
                                 }))
                                 .join(', ');
                             fechasDetalle.push(`SÁBADOS: ${fechasSabados}`);
                         }

                         // Formatear fechas de domingos de manera más compacta
                         if (item.fechasDomingo && item.fechasDomingo.length > 0) {
                             const fechasDomingos = item.fechasDomingo
                                 .map(fecha => new Date(fecha + 'T00:00:00').toLocaleDateString('es-CL', {
                                     day: '2-digit',
                                     month: '2-digit'
                                 }))
                                 .join(', ');
                             fechasDetalle.push(`DOMINGOS: ${fechasDomingos}`);
                         }

                         // Formatear feriados con nombres y fechas de manera más compacta
                         if (item.feriadosSeleccionados && item.feriadosSeleccionados.length > 0) {
                             const feriadosInfo = item.feriadosSeleccionados.map(fId => {
                                 const feriado = feriados.find(f => f.id === fId);
                                 if (feriado) {
                                     const fechaFormateada = new Date(feriado.fecha + 'T00:00:00')
                                         .toLocaleDateString('es-CL', {
                                             day: '2-digit',
                                             month: '2-digit'
                                         });
                                     return `${feriado.nombre} (${fechaFormateada})`;
                                 }
                                 return 'Feriado no encontrado';
                             });
                             fechasDetalle.push(`FERIADOS: ${feriadosInfo.join(', ')}`);
                         }

                         // Unir con saltos de línea para mejor legibilidad
                         const fechasFormateadas = fechasDetalle.join('\n');

                         return {
                             celdas: [
                                 item.documentoPersona || '-',
                                 item.nombrePersona || '-',
                                 item.empresaPersona || '-',
                                 fechasFormateadas || '-',
                                 item.estado || '-',
                                 item.motivo || '-'
                             ],
                             esDocumentoExtranjero: item.esDocumentoExtranjero || false
                         };
                     });
                     break;

                 case 'esperadas':
                     headers = ['Documento', 'Nombre', 'Fecha Esperada', 'Quien Espera', 'Estado'];
                     filas = datos.map(item => ({
                         celdas: [
                             item.documento || '-',
                             item.nombre || '-',
                             item.fechaEspera || '-',
                             item.quienEspera || '-',
                             item.estado || '-'
                         ],
                         esDocumentoExtranjero: item.esDocumentoExtranjero || false
                     }));
                     break;

                 case 'bloqueos':
                     headers = ['Tipo', 'Documento/Patente', 'Nombre', 'Motivo', 'Estado', 'Fecha Bloqueo'];
                     filas = datos.map(item => ({
                         celdas: [
                             item.tipo || '-',
                             item.documento || item.patente || '-',
                             item.nombre || '-',
                             item.motivo === 'otro' ? item.otroMotivo : item.motivo || '-',
                             item.activo === false ? 'Inactivo' : 'Activo',
                             item.fechaBloqueo || '-'
                         ],
                         esDocumentoExtranjero: item.esDocumentoExtranjero || false
                     }));
                     break;

                 case 'solicitudes':
                     headers = ['Tipo', 'Documento', 'Nombre', 'Empresa', 'Estado', 'Solicitado Por'];
                     filas = datos.map(item => ({
                         celdas: [
                             item.tipo || '-',
                             item.documentoPersona || '-',
                             item.nombrePersona || '-',
                             item.empresaPersona || '-',
                             item.estado || '-',
                             item.solicitadoPor || '-'
                         ],
                         esDocumentoExtranjero: item.esDocumentoExtranjero || false
                     }));
                     break;

                 case 'usuarios':
                     headers = ['RUT', 'Nombre', 'Usuario', 'Rol', 'Empresa', 'Estado'];
                     filas = datos.map(item => ({
                         celdas: [
                             item.rut || '-',
                             item.nombre || '-',
                             item.usuario || '-',
                             item.rol || '-',
                             item.empresa || '-',
                             item.activo ? 'Activo' : 'Inactivo'
                         ],
                         esDocumentoExtranjero: false // Los usuarios siempre tienen RUT
                     }));
                     break;
             }

             let tabla = '<table style="width: 100%; border-collapse: collapse; font-size: 0.9rem;">';
             tabla += '<thead><tr>';
             headers.forEach(header => {
                 tabla += `<th style="border: 1px solid #ddd; padding: 8px; background: #f5f5f5; font-weight: bold;">${header}</th>`;
             });
             tabla += '</tr></thead><tbody>';

             filas.forEach(fila => {
                 // Determinar si la fila debe tener fondo gris para documento extranjero
                 const estiloFila = fila.esDocumentoExtranjero ? 'background-color: #f3f4f6;' : '';

                 tabla += `<tr style="${estiloFila}">`;

                 fila.celdas.forEach((celda, index) => {
                     // Aplicar estilo especial para la columna de fechas autorizadas
                     let estiloColumna = 'border: 1px solid #ddd; padding: 6px;';

                     if (tipo === 'dias-especiales' && headers[index] === 'Fechas Autorizadas') {
                         estiloColumna += ' white-space: pre-line; vertical-align: top; font-size: 0.8rem; max-width: 300px;';
                     }

                     // Resaltar documento extranjero en rojo (columna "Documento")
                     if (fila.esDocumentoExtranjero &&
                         (headers[index] === 'Documento' || headers[index] === 'Documento/Patente')) {
                         estiloColumna += ' color: #ef4444; font-weight: bold;';
                     }

                     tabla += `<td style="${estiloColumna}">${celda}</td>`;
                 });
                 tabla += '</tr>';
             });

             tabla += '</tbody></table>';
             return tabla;
         }

         async function descargarReportePDF() {
             // Asegurar que los feriados estén cargados
             await cargarFeriadosParaReporte();
             const datos = await obtenerDatosReporte();
             if (!datos) return;

             if (datos.length === 0) {
                 showNotification('No hay datos para generar el reporte', 'error');
                 return;
             }

             // Usar jsPDF para generar PDF
             const script = document.createElement('script');
             script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
             script.onload = function() {
                 generarPDF(datos);
             };
             document.head.appendChild(script);
         }

         function generarPDF(datos) {
             const { jsPDF } = window.jspdf;
             const doc = new jsPDF();

             const tipo = document.getElementById('tipoReporte').value;
             const fechaReporte = new Date().toLocaleDateString('es-CL');

             // Encabezado
             doc.setFontSize(18);
             doc.text('SISTEMA DE GESTIÓN DE ACCESO', 20, 20);
             doc.setFontSize(14);
             doc.text(`Reporte de ${tipo.charAt(0).toUpperCase() + tipo.slice(1)}`, 20, 30);
             doc.setFontSize(10);
             doc.text(`Generado el: ${fechaReporte}`, 20, 40);
             doc.text(`Total de registros: ${datos.length}`, 20, 50);

             // Tabla simplificada para PDF
             let yPosition = 70;
             const lineHeight = 6;

             datos.forEach((item, index) => {
                 if (yPosition > 280) {
                     doc.addPage();
                     yPosition = 20;
                 }

                 let texto = '';
                 switch (tipo) {
                     case 'registros':
                         texto = `${index + 1}. ${item.nombre} (${item.documento}) - ${item.empresa}`;
                         break;
                     case 'asistencias':
                         texto = `${index + 1}. ${item.nombre} - ${item.empresa} - ${item.fecha}`;
                         break;
                     case 'dias-especiales':
                         texto = `${index + 1}. ${item.nombrePersona} - ${item.empresaPersona} - ${(item.tipos || []).join(', ')}`;
                         break;
                     default:
                         texto = `${index + 1}. ${item.nombre || item.nombrePersona || 'N/A'}`;
                 }

                 doc.text(texto, 20, yPosition);
                 yPosition += lineHeight;
             });

             // Descargar
             const nombreArchivo = `Reporte_${tipo}_${new Date().toISOString().split('T')[0]}.pdf`;
             doc.save(nombreArchivo);

             showNotification('Reporte PDF descargado exitosamente', 'success');
         }

         // Función para obtener fecha local sin problemas de zona horaria
         function obtenerFechaLocal() {
             const ahora = new Date();
             const año = ahora.getFullYear();
             const mes = String(ahora.getMonth() + 1).padStart(2, '0');
             const dia = String(ahora.getDate()).padStart(2, '0');
             return `${año}-${mes}-${dia}`;
         }

         // Sistema de notificaciones
         function showNotification(message, type = 'success') {
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notif => notif.remove());

            const notification = document.createElement('div');
            notification.className = `notification ${type}`;

            const icons = {
                success: '✅',
                error: '❌',
                info: 'ℹ️',
                warning: '⚠️'
            };

            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 12px;">
                    <span style="font-size: 1.2rem;">${icons[type] || '📢'}</span>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }, 4000);
         }

         // Hacer funciones accesibles globalmente
         window.showLogin = showLogin;
         window.logout = logout;
         window.updatePermissions = updatePermissions;
         window.limpiarUsuario = limpiarUsuario;
         window.limpiarRegistro = limpiarRegistro;
         window.editarUsuario = editarUsuario;
         window.editarRegistro = editarRegistro;
         window.toggleUsuario = toggleUsuario;
         window.toggleRegistro = toggleRegistro;
         window.eliminarUsuarioConfirm = eliminarUsuarioConfirm;
         window.eliminarRegistroConfirm = eliminarRegistroConfirm;
         window.eliminarPatente = eliminarPatente;
         window.toggleDocumentoExtranjero = toggleDocumentoExtranjero;
         window.toggleProveedorFields = toggleProveedorFields;
         window.agregarPatente = agregarPatente;
         window.autorizarRegistro = autorizarRegistro;
         window.generarQR = generarQR;
         window.toggleRegistroSelection = toggleRegistroSelection;
         window.selectAllPending = selectAllPending;
         window.clearAllSelections = clearAllSelections;
         window.authorizeSelected = authorizeSelected;
         window.rejectSelected = rejectSelected;
         window.rechazarRegistro = rechazarRegistro;
         window.realizarBusqueda = realizarBusqueda;
         window.limpiarBusqueda = limpiarBusqueda;
         window.cambiarFiltroFecha = cambiarFiltroFecha;
         window.limpiarBusquedaSilenciosa = limpiarBusquedaSilenciosa;
         // Exponer nuevas funciones globalmente
         window.toggleDocumentoExtranjeroEsperada = toggleDocumentoExtranjeroEsperada;
         window.limpiarEsperada = limpiarEsperada;
         window.cambiarTipoBloqueo = cambiarTipoBloqueo;
         window.toggleDocumentoExtranjeroBloqueo = toggleDocumentoExtranjeroBloqueo;
         window.toggleFechasBloqueo = toggleFechasBloqueo;
         window.limpiarBloqueo = limpiarBloqueo;
         window.buscarBloqueos = buscarBloqueos;
         window.limpiarFeriado = limpiarFeriado;
         window.generarFeriadosChile = generarFeriadosChile;
         window.autorizarEsperada = autorizarEsperada;
         window.rechazarEsperada = rechazarEsperada;
         window.desbloquear = desbloquear;
         window.reactivarBloqueo = reactivarBloqueo;
         // Exponer funciones adicionales globalmente
         window.cerrarAlertaBloqueo = cerrarAlertaBloqueo;
         window.editarEsperada = editarEsperada;
         window.toggleEsperada = toggleEsperada;
         window.eliminarEsperadaConfirm = eliminarEsperadaConfirm;
         window.editarBloqueo = editarBloqueo;
         window.cerrarBloqueo = cerrarBloqueo;
         window.eliminarBloqueoConfirm = eliminarBloqueoConfirm;
         window.eliminarFeriadoConfirm = eliminarFeriadoConfirm;
         // Exponer funciones de días especiales globalmente - COMPLETO
         window.buscarPersonaDiasEspeciales = buscarPersonaDiasEspeciales;
         window.seleccionarPersonaDias = seleccionarPersonaDias;
         window.cambiarSeleccionDias = cambiarSeleccionDias;
         window.toggleTipoDia = toggleTipoDia;
         window.toggleFechasSabado = toggleFechasSabado;
         window.toggleFechasDomingo = toggleFechasDomingo;
         window.agregarFechaSabado = agregarFechaSabado;
         window.agregarFechaDomingo = agregarFechaDomingo;
         window.eliminarFechaSabado = eliminarFechaSabado;
         window.eliminarFechaDomingo = eliminarFechaDomingo;
         window.toggleFeriado = toggleFeriado;
         window.limpiarDiasEspeciales = limpiarDiasEspecialesSeguro;
         window.buscarDiasEspeciales = buscarDiasEspeciales;
         window.autorizarDiaEspecial = autorizarDiaEspecial;
         window.rechazarDiaEspecial = rechazarDiaEspecial;
         window.toggleDiaEspecial = toggleDiaEspecial;
         window.editarDiaEspecial = editarDiaEspecial;
         window.eliminarDiaEspecialConfirm = eliminarDiaEspecialConfirm;
         window.cargarDatosAutomaticos = cargarDatosAutomaticos;
         window.mostrarPanelAsistenciaGuardia = mostrarPanelAsistenciaGuardia;
         window.verificarTrabajadorAutorizado = verificarTrabajadorAutorizado;
         // Agregar al final de las funciones globales
         window.limpiarFormularioCompleto = limpiarFormularioCompleto;
         // Agregar al final de las funciones globales
         window.prepararFormularioAsistencia = prepararFormularioAsistencia;
         // Agregar las nuevas funciones globales
         window.actualizarTextoBotonRegistro = actualizarTextoBotonRegistro;
         window.configurarBotonInicialRegistro = configurarBotonInicialRegistro;
         // Exponer nuevas funciones de supervisor globalmente
         window.toggleRegistroSelectionSupervisor = toggleRegistroSelectionSupervisor;
         window.selectAllSubRegistradores = selectAllSubRegistradores;
         window.clearAllSelectionsSupervisor = clearAllSelectionsSupervisor;
         window.enviarRegistrosSeleccionados = enviarRegistrosSeleccionados;
         window.enviarRegistroIndividual = enviarRegistroIndividual;
         // Exponer funciones de paginación globalmente
         window.cargarMasRegistros = cargarMasRegistros;
         window.mostrarTodosLosRegistros = mostrarTodosLosRegistros;
         // Exponer funciones de alertas globalmente
         window.cerrarAlertaPersonaEsperada = cerrarAlertaPersonaEsperada;
         window.cerrarAlertaBloqueoDocumento = cerrarAlertaBloqueoDocumento;
         window.cerrarAlertaBloqueoPatente = cerrarAlertaBloqueoPatente;
         window.verificarPersonaEsperada = verificarPersonaEsperada;
         window.verificarBloqueosPorDocumento = verificarBloqueosPorDocumento;
         window.verificarBloqueosPorPatente = verificarBloqueosPorPatente;
         window.solicitarDesactivacion = solicitarDesactivacion;
         window.solicitarEliminacion = solicitarEliminacion;
         window.configurarFechasVigencia = configurarFechasVigencia;
         window.cargarSolicitudesDesactivacion = cargarSolicitudesDesactivacion;
         // Exponer funciones de solicitudes globalmente
         window.aprobarSolicitudSupervisor = aprobarSolicitudSupervisor;
         window.rechazarSolicitudSupervisor = rechazarSolicitudSupervisor;
         window.procesarSolicitud = procesarSolicitud;
         window.cargarSolicitudes = cargarSolicitudes;
         window.reactivarPersona = reactivarPersona;
         window.cerrarAlertaPersonaDesvinculada = cerrarAlertaPersonaDesvinculada;
         // Exponer funciones de alertas de acceso globalmente
         window.cerrarAlertaAccesoDenegado = cerrarAlertaAccesoDenegado;
         window.cerrarAlertaTrabajadorNoAutorizado = cerrarAlertaTrabajadorNoAutorizado;
         // Exponer funciones de acompañantes globalmente
         window.generarCamposAcompañantes = generarCamposAcompañantes;
         window.eliminarAcompañante = eliminarAcompañante;
         window.toggleDocumentoExtranjeroAcompañante = toggleDocumentoExtranjeroAcompañante;
         // Exponer función de filtrado globalmente
         window.filtrarOpcionesRol = filtrarOpcionesRol;
         // Exponer funciones de selección avanzada globalmente
         window.showSelectionTab = showSelectionTab;
         window.toggleSelectionByEmpresa = toggleSelectionByEmpresa;
         window.toggleSelectionBySubcontrato = toggleSelectionBySubcontrato;
         window.selectAllEmpresas = selectAllEmpresas;
         window.clearEmpresasSelection = clearEmpresasSelection;
         window.selectAllSubcontratos = selectAllSubcontratos;
         window.clearSubcontratosSelection = clearSubcontratosSelection;
         // Exponer nueva función globalmente
         window.editarRegistroLimitado = editarRegistroLimitado;
         // Agregar estas líneas con las otras funciones globales
         window.editarAsistenciaGuardia = editarAsistenciaGuardia;
         window.eliminarAsistenciaConMotivo = eliminarAsistenciaConMotivo;
         // Hacer la función showTab accesible globalmente
         window.showTab = showTab;
         // Funciones adicionales que faltan
         window.editarAsistenciaGuardia = editarAsistenciaGuardia;
         window.eliminarAsistenciaConMotivo = eliminarAsistenciaConMotivo;
         window.eliminarRegistroConfirm = eliminarRegistroConfirm;
         window.editarRegistro = editarRegistro;
         window.generarQR = generarQR;
         window.enviarRegistroIndividual = enviarRegistroIndividual;
         window.reactivarPersona = reactivarPersona;
         window.toggleRegistro = toggleRegistro;
         window.solicitarDesactivacion = solicitarDesactivacion;
         window.autorizarRegistro = autorizarRegistro;
         window.rechazarRegistro = rechazarRegistro;
         window.configurarFechasVigencia = configurarFechasVigencia;
         window.toggleRegistroSelectionSupervisor = toggleRegistroSelectionSupervisor;
         window.toggleRegistroSelection = toggleRegistroSelection;
         // Exponer funciones globalmente
         window.cargarTodasAsistencias = cargarTodasAsistencias;
         window.buscarAsistencias = buscarAsistencias;
         window.limpiarBusquedaAsistencias = limpiarBusquedaAsistencias;
         window.editarRegistroCompleto = editarRegistroCompleto;
         window.eliminarAsistenciaAdmin = eliminarAsistenciaAdmin;
         // Variable global para controlar edición desde asistencias
         window.editandoDesdeAsistencias = false;
         window.tipoOriginalRegistro = null;
         // Exponer nuevas funciones globalmente
         window.toggleRegistroDelegado = toggleRegistroDelegado;
         window.buscarResponsableEmpresa = buscarResponsableEmpresa;
         // Exponer nueva función globalmente
         window.editarProveedorVisitaDesdeAsistencias = editarProveedorVisitaDesdeAsistencias;
         window.actualizarContadoresTabs = actualizarContadoresTabs;
         // Agregar al final de las funciones globales (antes del cierre del script)
         window.escanearQRGuardia = escanearQRGuardia;
         window.procesarQRPorGuardia = procesarQRPorGuardia;
         window.buscarRegistroPorId = buscarRegistroPorId;
         window.mostrarModalConfirmacionLlegada = mostrarModalConfirmacionLlegada;
         window.registrarLlegadaConPatente = registrarLlegadaConPatente;
         // Agregar al final del archivo, junto con las otras funciones globales
         window.mostrarBotonEscanerGuardia = mostrarBotonEscanerGuardia;
         window.ocultarBotonEscanerGuardia = ocultarBotonEscanerGuardia;
         window.imprimirQRConDatos = imprimirQRConDatos;
         // Agregar al final del archivo
         window.descargarQRConDatos = descargarQRConDatos;
         // Exponer las nuevas funciones globalmente
         window.escanearQRGuardia = escanearQRGuardia;
         window.procesarQRPorGuardia = procesarQRPorGuardia;
         window.mostrarModalConfirmacionLlegadaQR = mostrarModalConfirmacionLlegadaQR;
         // Agregar al final del archivo con las otras funciones globales
         window.seleccionarEmpresaCompleta = seleccionarEmpresaCompleta;
         window.seleccionarSubcontratoEspecifico = seleccionarSubcontratoEspecifico;
         // Exponer funciones globalmente
         window.toggleDiaEspecialSelection = toggleDiaEspecialSelection;
         window.selectAllDiasEspecialesPendientes = selectAllDiasEspecialesPendientes;
         window.clearAllDiasEspecialesSelections = clearAllDiasEspecialesSelections;
         window.enviarDiasEspecialesSeleccionados = enviarDiasEspecialesSeleccionados;
         window.enviarDiaEspecialIndividual = enviarDiaEspecialIndividual;
         window.actualizarContadoresDiasEspeciales = actualizarContadoresDiasEspeciales;
         // Agregar esta línea:
         window.procesarAsignacionesRetroactivas = procesarAsignacionesRetroactivas;
         // Exponer funciones globalmente
         window.cargarMisRegistros = cargarMisRegistros;
         window.cargarMisSubcontratos = cargarMisSubcontratos;
         window.buscarMisRegistros = buscarMisRegistros;
         window.buscarMisSubcontratos = buscarMisSubcontratos;
         window.renderMisRegistros = renderMisRegistros;
         window.renderMisSubcontratos = renderMisSubcontratos;
         window.actualizarContadorMisRegistros = actualizarContadorMisRegistros;
         window.actualizarContadorMisSubcontratos = actualizarContadorMisSubcontratos;
         // Exponer la nueva función globalmente
         window.createMisRegistrosCard = createMisRegistrosCard;
         // AGREGAR SOLO ESTAS (las que ya creaste):
         window.actualizarContadoresIniciales = actualizarContadoresIniciales;
         window.toggleDiaEspecialAutorizacion = toggleDiaEspecialAutorizacion;
         window.updateDiasEspecialesAutorizacionControls = updateDiasEspecialesAutorizacionControls;
         window.mostrarControlesAutorizacionDiasEspeciales = mostrarControlesAutorizacionDiasEspeciales;
         // AGREGAR ESTAS LÍNEAS ADICIONALES:
         window.selectAllDiasEspecialesPendientesAutorizacion = selectAllDiasEspecialesPendientesAutorizacion;
         window.clearAllDiasEspecialesAutorizacionSelections = clearAllDiasEspecialesAutorizacionSelections;
         window.autorizarDiasEspecialesSeleccionados = autorizarDiasEspecialesSeleccionados;
         window.rechazarDiasEspecialesSeleccionados = rechazarDiasEspecialesSeleccionados;
         // Exponer funciones globalmente
         window.cambiarTipoReporte = cambiarTipoReporte;
         window.cambiarFiltroFechaReporte = cambiarFiltroFechaReporte;
         window.previsualizarReporte = previsualizarReporte;
         window.descargarReportePDF = descargarReportePDF;
         // Agregar esta línea con las otras funciones globales
         window.cargarFeriadosParaReporte = cargarFeriadosParaReporte;
         // Agregar estas funciones al listado de funciones globales
         window.editarProveedorVisitaGuardia = editarProveedorVisitaGuardia;
         window.eliminarProveedorVisitaGuardia = eliminarProveedorVisitaGuardia;
         window.eliminarTrabajadorGuardia = eliminarTrabajadorGuardia;
         window.mostrarModalReportarProblema = mostrarModalReportarProblema;
         window.eliminarRegistroConMotivo = eliminarRegistroConMotivo;
         window.obtenerFechaLocal = obtenerFechaLocal;
         // Agregar al final del archivo con las otras funciones globales
         window.editarProveedorVisitaGuardiaAsistencias = editarProveedorVisitaGuardiaAsistencias;
         window.eliminarProveedorVisitaGuardiaAsistencias = eliminarProveedorVisitaGuardiaAsistencias;
         window.mostrarModalEliminarConMotivoAsistencias = mostrarModalEliminarConMotivoAsistencias;
         // Agregar al final del archivo con las otras funciones globales
         window.eliminarProveedorVisitaConMotivoRegistros = eliminarProveedorVisitaConMotivoRegistros;
         window.mostrarModalEliminarConMotivoRegistros = mostrarModalEliminarConMotivoRegistros;


         // Event listeners
         document.addEventListener('DOMContentLoaded', function() {
            initializeSystem();

            // Manejar login
            document.getElementById('loginForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                const username = document.getElementById('username').value.trim();
                const password = document.getElementById('password').value;
                if (!username || !password) {
                    showNotification('Complete todos los campos', 'error');
                    return;
                }
                await login(username, password);
            });

            // Formateo automático y validación de RUT para usuarios
            document.getElementById('rutUsuario').addEventListener('input', function(e) {
                let rut = e.target.value;
                let rutFormateado = formatearRUT(rut);
                e.target.value = rutFormateado;

                const icon = document.getElementById('rutValidationIcon');
                const message = document.getElementById('rutMessage');

                if (rut.replace(/[^0-9kK]/g, '').length >= 8) {
                    if (validarRUT(rutFormateado)) {
                        e.target.classList.remove('rut-invalid');
                        e.target.classList.add('rut-valid', 'with-icon');
                        icon.textContent = '✓';
                        icon.className = 'validation-icon valid';
                        icon.style.display = 'block';
                        message.textContent = 'RUT válido';
                        message.className = 'rut-message valid';
                        message.style.display = 'block';
                    } else {
                        e.target.classList.remove('rut-valid');
                        e.target.classList.add('rut-invalid', 'with-icon');
                        icon.textContent = '✗';
                        icon.className = 'validation-icon invalid';
                        icon.style.display = 'block';
                        message.textContent = 'RUT inválido';
                        message.className = 'rut-message invalid';
                        message.style.display = 'block';
                    }
                } else {
                    e.target.classList.remove('rut-valid', 'rut-invalid', 'with-icon');
                    icon.style.display = 'none';
                    message.style.display = 'none';
                }
            });

            // Formateo de RUT para registro (solo si no es documento extranjero)
            document.getElementById('documento').addEventListener('input', function(e) {
                const esDocumentoExtranjero = document.getElementById('esDocumentoExtranjero').checked;

                if (!esDocumentoExtranjero) {
                    let rut = e.target.value;
                    let rutFormateado = formatearRUT(rut);
                    e.target.value = rutFormateado;

                    const message = document.getElementById('documentoMessage');

                    if (rut.replace(/[^0-9kK]/g, '').length >= 8) {
                        if (validarRUT(rutFormateado)) {
                            e.target.classList.remove('rut-invalid');
                            e.target.classList.add('rut-valid');
                            message.textContent = 'RUT válido';
                            message.style.color = '#22c55e';
                            message.style.display = 'block';
                        } else {
                            e.target.classList.remove('rut-valid');
                            e.target.classList.add('rut-invalid');
                            message.textContent = 'RUT inválido';
                            message.style.color = '#ef4444';
                            message.style.display = 'block';
                        }
                    } else {
                        e.target.classList.remove('rut-valid', 'rut-invalid');
                        message.style.display = 'none';
                    }
                }
            });

            // Conversión automática a mayúsculas
            const camposMayuscula = ['nombreUsuario', 'empresaUsuario', 'subcontratoUsuario', 'nombreRegistro', 'empresaRegistro', 'subContrato', 'empresaProveedora'];

            camposMayuscula.forEach(campoId => {
                const campo = document.getElementById(campoId);
                if (campo) {
                    campo.addEventListener('input', function(e) {
                        const cursorPos = e.target.selectionStart;
                        e.target.value = convertirAMayuscula(e.target.value);
                        e.target.setSelectionRange(cursorPos, cursorPos);
                    });
                }
            });

            // Toggle para mostrar/ocultar contraseña
            document.getElementById('togglePassword').addEventListener('click', function() {
                const passwordInput = document.getElementById('passwordUsuario');
                const toggleBtn = document.getElementById('togglePassword');

                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    toggleBtn.textContent = '🙈';
                    toggleBtn.title = 'Ocultar contraseña';
                } else {
                    passwordInput.type = 'password';
                    toggleBtn.textContent = '👁️';
                    toggleBtn.title = 'Mostrar contraseña';
                }
            });

            // Formateo de patente
            document.getElementById('patente').addEventListener('input', function(e) {
                let patente = e.target.value.toUpperCase();
                // Formato AA-BB-11 o ABCD-12
                patente = patente.replace(/[^A-Z0-9]/g, '');

                if (patente.length > 6) {
                    patente = patente.substring(0, 6);
                }

                if (patente.length > 4) {
                    patente = patente.substring(0, 4) + '-' + patente.substring(4);
                } else if (patente.length > 2) {
                    patente = patente.substring(0, 2) + '-' + patente.substring(2);
                }

                e.target.value = patente;
            });

            // Permitir agregar patente con Enter
            document.getElementById('patente').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    agregarPatente();
                }
            });

            // Event listener para carga automática por documento (CORREGIDO - Sin borrar campo)
            document.getElementById('documento').addEventListener('blur', function(e) {
                if (userRole === 'guardia') {
                    const valor = e.target.value.trim();
                    if (valor && valor.length >= 3) {
                        cargarDatosAutomaticos('documento', valor);
                    }
                }
            });

            // Event listener para carga automática por nombre (CORREGIDO - Sin borrar campo)
            document.getElementById('nombreRegistro').addEventListener('blur', function(e) {
                if (userRole === 'guardia') {
                    const valor = e.target.value.trim();
                    if (valor && valor.length >= 3) {
                        cargarDatosAutomaticos('nombre', valor);
                    }
                }
            });

            // Manejar formulario de registro (versión modificada con verificación de bloqueos)
            // Manejar formulario de registro (versión corregida completa con asignación retroactiva)
            document.getElementById('registroForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());

                // Validaciones básicas
                if (!data.documento || !data.nombreRegistro || !data.empresaRegistro || !data.tipoPersona) {
                    showNotification('Complete todos los campos obligatorios', 'error');
                    return;
                }

                // Validar RUT si no es documento extranjero
                const esDocumentoExtranjero = document.getElementById('esDocumentoExtranjero').checked;
                if (!esDocumentoExtranjero && !validarRUT(data.documento)) {
                    showNotification('Debe ingresar un RUT válido', 'error');
                    document.getElementById('documento').focus();
                    return;
                }

                // Validar campos específicos para proveedor
                if (data.tipoPersona === 'proveedor') {
                    if (!data.empresaProveedora || !data.numeroGuia) {
                        showNotification('Para proveedores es obligatorio ingresar la empresa proveedora y número de guía', 'error');
                        return;
                    }
                }

                // Validación especial para guardias
                if (userRole === 'guardia') {
                    // Para trabajadores, verificar que esté autorizado y activo
                    if (data.tipoPersona === 'trabajador') {
                        const trabajadorAutorizado = await verificarTrabajadorAutorizado(data.documento);
                        if (!trabajadorAutorizado) {
                            showNotification('Este trabajador no está autorizado o no está activo. No se puede registrar asistencia.', 'error');
                            return;
                        }

                        // Verificar si ya marcó asistencia HOY (solo para guardias registrando asistencia)
                        const hoy = new Date().toISOString().split('T')[0];
                        const asistenciaHoy = await verificarAsistenciaHoy(data.documento, hoy);
                        if (asistenciaHoy) {
                            showNotification('Este trabajador ya marcó asistencia el día de hoy', 'error');
                            return;
                        }

                        // CAMBIAR TIPO A ASISTENCIA SOLO PARA GUARDIAS
                        data.tipoPersona = 'asistencia_trabajador';
                    }

                    // Para proveedores y visitas, solo verificar bloqueos
                    if (data.tipoPersona === 'proveedor' || data.tipoPersona === 'visita') {
                        const bloqueosEncontradosGuardia = await verificarBloqueos(data.documento, patentesActuales);
                        if (bloqueosEncontradosGuardia.length > 0) {
                            const motivosBloqueo = bloqueosEncontradosGuardia.map(b =>
                                `• ${b.tipo === 'persona' ? 'Persona' : 'Vehículo'} bloqueada: ${b.motivo === 'otro' ? b.otroMotivo : b.motivo}`
                            ).join('\n');

                            showNotification(`No se puede registrar debido a bloqueos activos:\n${motivosBloqueo}`, 'error');
                            return;
                        }
                    }
                }

                // Verificar bloqueos para otros roles
                let saltarVerificacionBloqueos = false;
                if (userRole === 'guardia' && (data.tipoPersona === 'proveedor' || data.tipoPersona === 'visita' || data.tipoPersona === 'asistencia_trabajador')) {
                    saltarVerificacionBloqueos = true;
                }

                if (!saltarVerificacionBloqueos) {
                    const bloqueosEncontrados = await verificarBloqueos(data.documento, patentesActuales);
                    if (bloqueosEncontrados.length > 0) {
                        const container = document.getElementById('registrosHoy');
                        const alertDiv = document.createElement('div');
                        alertDiv.className = 'bloqueo-alert';
                        alertDiv.id = 'bloqueoAlert';

                        let motivosBloqueo = bloqueosEncontrados.map(b =>
                            `• ${b.tipo === 'persona' ? 'Persona' : 'Vehículo'} bloqueada: ${b.motivo === 'otro' ? b.otroMotivo : b.motivo}`
                        ).join('<br>');

                        alertDiv.innerHTML = `
                            <div>
                                <strong>⚠️ REGISTRO BLOQUEADO</strong><br>
                                No se puede registrar debido a los siguientes bloqueos activos:<br>
                                ${motivosBloqueo}
                            </div>
                            <button class="btn-secondary btn-sm" onclick="cerrarAlertaBloqueo()" style="margin-left: auto;">Cerrar</button>
                        `;

                        const alertaAnterior = document.getElementById('bloqueoAlert');
                        if (alertaAnterior) {
                            alertaAnterior.remove();
                        }

                        container.parentNode.insertBefore(alertDiv, container);
                        showNotification('Registro bloqueado. Contacte al administrador para desbloquear.', 'error');
                        return;
                    }
                }

                try {
                    if (editandoRegistro) {
                        // VERIFICAR SI ES EDICIÓN DESDE ASISTENCIAS
                        if (window.editandoDesdeAsistencias) {
                            console.log('Editando desde asistencias, saltando verificación de duplicados');
                        } else {
                            const documentoExiste = await verificarDocumentoExistente(data.documento, editandoRegistro);
                            if (documentoExiste) {
                                showNotification('Ya existe un registro con este documento', 'error');
                                return;
                            }
                        }

                        // Recopilar acompañantes si los hay
                        const acompañantes = recopilarDatosAcompañantes();

                        // DETERMINAR TIPO FINAL - PRESERVAR TIPO ORIGINAL SI VIENE DE ASISTENCIAS
                        let tipoFinal = data.tipoPersona;
                        if (window.editandoDesdeAsistencias && window.tipoOriginalRegistro) {
                            tipoFinal = window.tipoOriginalRegistro; // MANTENER EL TIPO ORIGINAL
                            console.log(`Preservando tipo original: ${tipoFinal}`);
                        }

                        const datosActualizados = {
                            documento: data.documento,
                            esDocumentoExtranjero: esDocumentoExtranjero,
                            nombre: data.nombreRegistro,
                            empresa: data.empresaRegistro,
                            subContrato: data.subContrato || null,
                            tipo: tipoFinal, // USAR EL TIPO FINAL (PRESERVADO)
                            empresaProveedora: data.empresaProveedora || null,
                            numeroGuia: data.numeroGuia || null,
                            patentes: patentesActuales,
                            acompañantes: acompañantes,
                            cantidadAcompañantes: acompañantes.length
                        };

                        await actualizarRegistro(editandoRegistro, datosActualizados);

                        // Actualizar en TODOS los arrays
                        const registroIndex = registros.findIndex(r => r.id === editandoRegistro);
                        if (registroIndex !== -1) {
                            registros[registroIndex] = { ...registros[registroIndex], ...datosActualizados };
                        }

                        const registroOriginalIndex = registrosOriginales.findIndex(r => r.id === editandoRegistro);
                        if (registroOriginalIndex !== -1) {
                            registrosOriginales[registroOriginalIndex] = { ...registrosOriginales[registroOriginalIndex], ...datosActualizados };
                        }

                        const registroBusquedaIndex = registrosBusqueda.findIndex(r => r.id === editandoRegistro);
                        if (registroBusquedaIndex !== -1) {
                            registrosBusqueda[registroBusquedaIndex] = { ...registrosBusqueda[registroBusquedaIndex], ...datosActualizados };
                        }

                        // Si hay asistencias cargadas, actualizar también
                        if (typeof asistenciasOriginales !== 'undefined') {
                            const asistenciaIndex = asistenciasOriginales.findIndex(r => r.id === editandoRegistro);
                            if (asistenciaIndex !== -1) {
                                asistenciasOriginales[asistenciaIndex] = { ...asistenciasOriginales[asistenciaIndex], ...datosActualizados };
                            }

                            const asistenciaFiltradaIndex = asistenciasFiltradas.findIndex(r => r.id === editandoRegistro);
                            if (asistenciaFiltradaIndex !== -1) {
                                asistenciasFiltradas[asistenciaFiltradaIndex] = { ...asistenciasFiltradas[asistenciaFiltradaIndex], ...datosActualizados };
                            }
                        }

                        renderRegistros();
                        renderRegistrosPendientes();

                        // Si se editó desde asistencias, actualizar también esa vista
                        if (window.editandoDesdeAsistencias && typeof renderAsistencias === 'function') {
                            renderAsistencias();
                        }

                        limpiarRegistro();

                        if (userRole === 'guardia') {
                            cerrarAlertaPersonaEsperada();
                            cerrarAlertaBloqueoDocumento();
                            cerrarAlertaBloqueoPatente();
                            cerrarAlertaPersonaDesvinculada();
                        }

                        const tipoTexto = tipoFinal === 'asistencia_trabajador' ? 'asistencia de trabajador' :
                                         tipoFinal === 'proveedor' ? 'proveedor' : 'visita';
                        showNotification(`${tipoTexto} actualizada exitosamente`, 'success');
                      } else {
                          // Nuevo registro - verificación mejorada CORREGIDA
                          if (userRole === 'guardia') {
                              if (data.tipoPersona === 'asistencia_trabajador') {
                                  // Para asistencia, permitir (ya verificamos que no haya duplicado hoy)
                              } else if (data.tipoPersona === 'proveedor' || data.tipoPersona === 'visita') {
                                  const fechaLocal = obtenerFechaLocal(); // Usar fecha local
                                  const documentoExisteHoy = await verificarDocumentoExistente(data.documento, null, data.tipoPersona, fechaLocal);
                                  if (documentoExisteHoy) {
                                      showNotification(`Este ${data.tipoPersona} ya fue registrado por un guardia el día de hoy`, 'error');
                                      return;
                                  }
                              }
                          } else {
                              // Para otros roles (admin, autorizador, registrador, sub-registrador)
                              if (data.tipoPersona === 'proveedor' || data.tipoPersona === 'visita') {
                                  const hoy = new Date().toISOString().split('T')[0];
                                  const documentoExisteHoy = await verificarDocumentoExistente(data.documento, null, data.tipoPersona, hoy);
                                  if (documentoExisteHoy) {
                                      showNotification(`Este ${data.tipoPersona} ya fue registrado el día de hoy`, 'error');
                                      return;
                                  }
                              } else {
                                  // Para trabajadores, verificación global normal
                                  const documentoExiste = await verificarDocumentoExistente(data.documento, null, data.tipoPersona);
                                  if (documentoExiste) {
                                      showNotification('Ya existe un registro con este documento', 'error');
                                      return;
                                  }
                              }
                          }

                        const ahora = new Date();
                        const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';

                        // Recopilar acompañantes si los hay
                        const acompañantes = recopilarDatosAcompañantes();

                        // Verificar si es registro delegado PRIMERO - VERSIÓN MEJORADA CON ASIGNACIÓN RETROACTIVA
                        let esRegistroDelegado = false;
                        let asignadoA = null;
                        let registradoOriginalmentePor = null;
                        let registradorFinal = userName;
                        let registradorRolFinal = userRole;
                        let pendienteAsignacionFutura = false;

                        // Si es administrador y marca registro delegado
                        if (userRole === 'administrador' && document.getElementById('esRegistroDelegado')?.checked) {
                            console.log('=== REGISTRO DELEGADO ACTIVADO ===');
                            console.log('Empresa:', data.empresaRegistro);
                            console.log('Subcontrato:', data.subContrato);

                            // Buscar al registrador/sub-registrador correspondiente
                            asignadoA = await buscarResponsableEmpresa(data.empresaRegistro, data.subContrato);
                            console.log('Resultado buscarResponsableEmpresa:', asignadoA);

                            if (asignadoA && !asignadoA.pendienteAsignacion) {
                                // Hay registrador disponible - asignación inmediata
                                esRegistroDelegado = true;
                                registradoOriginalmentePor = userName;
                                registradorFinal = asignadoA.nombre;
                                registradorRolFinal = asignadoA.rol;
                                console.log('Asignación inmediata a:', asignadoA.nombre);
                            } else if (asignadoA && asignadoA.pendienteAsignacion) {
                                // No hay registrador - marcar para asignación futura
                                pendienteAsignacionFutura = true;
                                registradoOriginalmentePor = userName;
                                console.log('Marcando para asignación futura');
                                showNotification('No existe registrador para esta empresa/subcontrato. El registro será asignado automáticamente cuando se cree el usuario correspondiente.', 'info');
                            } else {
                                showNotification('Error al verificar responsables de empresa/subcontrato', 'error');
                                return;
                            }
                        }

                        // Determinar estado según el registro delegado o rol normal
                        let estadoInicial = 'pendiente';
                        let autorizadoPorInicial = null;

                        if (esRegistroDelegado) {
                            // REGISTRO DELEGADO: SIEMPRE va a pendiente_supervisor primero
                            if (asignadoA.rol === 'sub-registrador') {
                                estadoInicial = 'pendiente_supervisor'; // Sub-registrador → Registrador → Autorizador
                            } else if (asignadoA.rol === 'registrador') {
                                estadoInicial = 'pendiente_supervisor'; // CAMBIO: Registrador también pasa por supervisor (él mismo)
                            }
                            autorizadoPorInicial = null; // NO autorizar automáticamente
                        } else if (pendienteAsignacionFutura) {
                            // PENDIENTE DE ASIGNACIÓN FUTURA: Autorizar inmediatamente pero marcar para asignación
                            estadoInicial = 'autorizado';
                            autorizadoPorInicial = userName;
                        } else {
                            // REGISTRO NORMAL: Lógica original
                            if (userRole === 'administrador' || userRole === 'autorizador') {
                                estadoInicial = 'autorizado';
                                autorizadoPorInicial = userName;
                            } else if (userRole === 'sub-registrador') {
                                estadoInicial = 'pendiente_supervisor';
                            } else if (userRole === 'guardia' && (data.tipoPersona === 'proveedor' || data.tipoPersona === 'visita' || data.tipoPersona === 'asistencia_trabajador')) {
                                estadoInicial = 'autorizado';
                                autorizadoPorInicial = userName;
                            }
                        }

                        const nuevoRegistro = {
                            documento: data.documento,
                            esDocumentoExtranjero: esDocumentoExtranjero,
                            nombre: data.nombreRegistro,
                            empresa: data.empresaRegistro,
                            subContrato: data.subContrato || null,
                            tipo: data.tipoPersona,
                            empresaProveedora: data.empresaProveedora || null,
                            numeroGuia: data.numeroGuia || null,
                            patentes: patentesActuales,
                            acompañantes: acompañantes,
                            cantidadAcompañantes: acompañantes.length,
                            estado: estadoInicial,
                            activo: true,
                            registroDiario: (data.tipoPersona === 'proveedor' || data.tipoPersona === 'visita') ?
                                `${data.documento}-${ahora.toISOString().split('T')[0]}` : null,
                            registradoPor: registradorFinal,
                            registradoPorRol: registradorRolFinal,
                            registradoOriginalmentePor: registradoOriginalmentePor,
                            asignadoA: asignadoA && !asignadoA.pendienteAsignacion ? asignadoA.nombre : null,
                            supervisor: esRegistroDelegado && asignadoA && !asignadoA.pendienteAsignacion ?
                                (asignadoA.rol === 'sub-registrador' ? asignadoA.supervisor : asignadoA.nombre) :
                                (userRole === 'sub-registrador' ? currentUserData.supervisor : null),
                            esRegistroDelegado: esRegistroDelegado,
                            autorizadoPor: autorizadoPorInicial,
                            fecha: ahora.toISOString().split('T')[0],
                            hora: ahora.toLocaleTimeString(),
                            timestamp: ahora.toISOString(),

                            // NUEVOS CAMPOS PARA ASIGNACIÓN RETROACTIVA
                            pendienteAsignacion: pendienteAsignacionFutura,
                            empresaSinRegistrador: pendienteAsignacionFutura ? data.empresaRegistro : null,
                            subcontratoSinRegistrador: pendienteAsignacionFutura ? (data.subContrato || null) : null,
                            asignacionRetroactiva: false
                        };

                        const docId = await guardarRegistro(nuevoRegistro);
                        nuevoRegistro.id = docId;
                        registros.push(nuevoRegistro);

                        renderRegistros();
                        renderRegistrosPendientes();
                        limpiarRegistro();

                        // Mensajes según el tipo de registro - MEJORADOS
                        if (pendienteAsignacionFutura) {
                            showNotification(`Registro autorizado y marcado para asignación automática futura (${data.empresaRegistro}${data.subContrato ? ' - ' + data.subContrato : ''})`, 'success');
                        } else if (esRegistroDelegado) {
                            // Mensaje especial para registro delegado
                            if (asignadoA.rol === 'sub-registrador') {
                                showNotification(`Registro delegado creado para ${asignadoA.nombre} (Sub-Registrador). Pendiente de envío por supervisor.`, 'info');
                            } else if (asignadoA.rol === 'registrador') {
                                showNotification(`Registro delegado creado para ${asignadoA.nombre} (Registrador). Pendiente de autorización final.`, 'info');
                            }
                        } else if (nuevoRegistro.estado === 'autorizado') {
                            if (userRole === 'guardia') {
                                if (data.tipoPersona === 'asistencia_trabajador') {
                                    showNotification('Asistencia de trabajador registrada exitosamente', 'success');
                                } else {
                                    showNotification(`${data.tipoPersona === 'proveedor' ? 'Proveedor' : 'Visita'} registrado y autorizado automáticamente`, 'success');
                                }

                                setTimeout(() => {
                                    limpiarRegistro();
                                    cerrarAlertaPersonaEsperada();
                                    cerrarAlertaBloqueoDocumento();
                                    cerrarAlertaBloqueoPatente();
                                    cerrarAlertaPersonaDesvinculada();
                                }, 1500);
                            } else {
                                showNotification('Registro creado y autorizado automáticamente', 'success');
                            }
                        } else {
                            showNotification('Registro creado, pendiente de autorización', 'info');
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al procesar la solicitud', 'error');
                }
            });



            // Manejar formulario de usuario
            document.getElementById('usuarioForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());

                // Validaciones básicas
                if (!data.rutUsuario || !data.nombreUsuario || !data.empresaUsuario || !data.usuarioLogin || !data.tipoRol || !data.passwordUsuario) {
                    showNotification('Complete todos los campos obligatorios', 'error');
                    return;
                }

                // Validar RUT
                if (!validarRUT(data.rutUsuario)) {
                    showNotification('Debe ingresar un RUT válido', 'error');
                    document.getElementById('rutUsuario').focus();
                    return;
                }

                // Obtener permisos seleccionados
                const permisosSeleccionados = [];
                const checkboxes = document.querySelectorAll('input[name="permisos"]:checked');
                checkboxes.forEach(cb => permisosSeleccionados.push(cb.value));

                if (permisosSeleccionados.length === 0) {
                    showNotification('Debe seleccionar al menos un permiso', 'error');
                    return;
                }

                try {
                    if (editandoUsuario) {
                        const rutExiste = await verificarRutExistente(data.rutUsuario, editandoUsuario);
                        const usuarioExiste = await verificarUsuarioExistente(data.usuarioLogin, editandoUsuario);

                        if (rutExiste) {
                            showNotification('Ya existe otro usuario con este RUT', 'error');
                            return;
                        }

                        if (usuarioExiste) {
                            showNotification('Ya existe otro usuario con este nombre de usuario', 'error');
                            return;
                        }

                        const datosActualizados = {
                            rut: data.rutUsuario,
                            nombre: data.nombreUsuario,
                            empresa: data.empresaUsuario,
                            usuario: data.usuarioLogin,
                            rol: data.tipoRol,
                            password: data.passwordUsuario,
                            supervisor: data.supervisorUsuario || null,
                            subcontrato: data.subcontratoUsuario || null,
                            permisos: permisosSeleccionados
                        };

                        await actualizarUsuario(editandoUsuario, datosActualizados);

                        const usuarioIndex = usuarios.findIndex(u => u.id === editandoUsuario);
                        if (usuarioIndex !== -1) {
                            usuarios[usuarioIndex] = { ...usuarios[usuarioIndex], ...datosActualizados };
                        }

                        renderUsers();
                        limpiarUsuario();
                        showNotification('Usuario actualizado exitosamente', 'success');
                    } else {
                        const rutExiste = await verificarRutExistente(data.rutUsuario);
                        const usuarioExiste = await verificarUsuarioExistente(data.usuarioLogin);

                        if (rutExiste) {
                            showNotification('Ya existe un usuario con este RUT', 'error');
                            return;
                        }

                        if (usuarioExiste) {
                            showNotification('Ya existe un usuario con este nombre de usuario', 'error');
                            return;
                        }

                        const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                        const nuevoUsuario = {
                            rut: data.rutUsuario,
                            nombre: data.nombreUsuario,
                            empresa: data.empresaUsuario,
                            usuario: data.usuarioLogin,
                            rol: data.tipoRol,
                            password: data.passwordUsuario,
                            activo: true,
                            registradoPor: userName,
                            autorizadoPor: userName,
                            supervisor: data.supervisorUsuario || null,
                            subcontrato: data.subcontratoUsuario || null,
                            permisos: permisosSeleccionados,
                            fechaCreacion: new Date().toISOString().split('T')[0]
                        };

                        const docId = await guardarUsuario(nuevoUsuario);
                        nuevoUsuario.id = docId;
                        usuarios.push(nuevoUsuario);

                        await procesarAsignacionesRetroactivas(nuevoUsuario);

                        renderUsers();
                        limpiarUsuario();
                        showNotification('Usuario creado exitosamente', 'success');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al procesar la solicitud', 'error');
                }
            });

            // Formateo de RUT para esperadas (solo si no es documento extranjero)
            document.getElementById('documentoEsperada').addEventListener('input', function(e) {
                const esDocumentoExtranjero = document.getElementById('esDocumentoExtranjeroEsperada').checked;
                if (!esDocumentoExtranjero) {
                    let rut = e.target.value;
                    let rutFormateado = formatearRUT(rut);
                    e.target.value = rutFormateado;

                    const message = document.getElementById('documentoEsperadaMessage');
                    if (rut.replace(/[^0-9kK]/g, '').length >= 8) {
                        if (validarRUT(rutFormateado)) {
                            e.target.classList.remove('rut-invalid');
                            e.target.classList.add('rut-valid');
                            message.textContent = 'RUT válido';
                            message.style.color = '#22c55e';
                            message.style.display = 'block';
                        } else {
                            e.target.classList.remove('rut-valid');
                            e.target.classList.add('rut-invalid');
                            message.textContent = 'RUT inválido';
                            message.style.color = '#ef4444';
                            message.style.display = 'block';
                        }
                    } else {
                        e.target.classList.remove('rut-valid', 'rut-invalid');
                        message.style.display = 'none';
                    }
                }
            });

            // Formateo de RUT para bloqueos (solo si no es documento extranjero)
            document.getElementById('documentoBloqueo').addEventListener('input', function(e) {
                const esDocumentoExtranjero = document.getElementById('esDocumentoExtranjeroBloqueo').checked;
                if (!esDocumentoExtranjero) {
                    let rut = e.target.value;
                    let rutFormateado = formatearRUT(rut);
                    e.target.value = rutFormateado;
                }
            });

            // Formateo de patente para bloqueos
            document.getElementById('patenteBloqueo').addEventListener('input', function(e) {
                let patente = e.target.value.toUpperCase();
                patente = patente.replace(/[^A-Z0-9]/g, '');

                if (patente.length > 6) {
                    patente = patente.substring(0, 6);
                }

                if (patente.length > 4) {
                    patente = patente.substring(0, 4) + '-' + patente.substring(4);
                } else if (patente.length > 2) {
                    patente = patente.substring(0, 2) + '-' + patente.substring(2);
                }

                e.target.value = patente;
            });

            // Mostrar/ocultar campo de "otro motivo"
            document.getElementById('motivoBloqueo').addEventListener('change', function(e) {
                const otroMotivoGroup = document.getElementById('otroMotivoGroup');
                const otroMotivo = document.getElementById('otroMotivo');

                if (e.target.value === 'otro') {
                    otroMotivoGroup.style.display = 'block';
                    otroMotivo.required = true;
                } else {
                    otroMotivoGroup.style.display = 'none';
                    otroMotivo.required = false;
                    otroMotivo.value = '';
                }
            });

            // Conversión a mayúsculas para campos de texto de esperadas y bloqueos
            const camposMayusculaNuevos = ['nombreEsperada', 'quienEspera', 'nombreBloqueo', 'nombreFeriado', 'otroMotivo'];

            camposMayusculaNuevos.forEach(campoId => {
                const campo = document.getElementById(campoId);
                if (campo) {
                    campo.addEventListener('input', function(e) {
                        const cursorPos = e.target.selectionStart;
                        e.target.value = convertirAMayuscula(e.target.value);
                        e.target.setSelectionRange(cursorPos, cursorPos);
                    });
                }
            });

            // Establecer fecha de hoy por defecto en esperadas
            document.getElementById('fechaEspera').value = new Date().toISOString().split('T')[0];

            // Establecer fechas por defecto en bloqueos
            const hoy = new Date().toISOString().split('T')[0];
            document.getElementById('fechaDesdeBloqueo').value = hoy;
            const mañana = new Date();
            mañana.setDate(mañana.getDate() + 1);
            document.getElementById('fechaHastaBloqueo').value = mañana.toISOString().split('T')[0];

            // Manejar formulario de esperadas
            document.getElementById('esperadaForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());

                // Validaciones básicas
                if (!data.documentoEsperada || !data.nombreEsperada || !data.fechaEspera || !data.quienEspera) {
                    showNotification('Complete todos los campos obligatorios', 'error');
                    return;
                }

                // Validar RUT si no es documento extranjero
                const esDocumentoExtranjero = document.getElementById('esDocumentoExtranjeroEsperada').checked;
                if (!esDocumentoExtranjero && !validarRUT(data.documentoEsperada)) {
                    showNotification('Debe ingresar un RUT válido', 'error');
                    return;
                }

                try {
                    const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                    const ahora = new Date();

                    if (editandoEsperada) {
                        const datosActualizados = {
                            documento: data.documentoEsperada,
                            esDocumentoExtranjero: esDocumentoExtranjero,
                            nombre: data.nombreEsperada,
                            fechaEspera: data.fechaEspera,
                            quienEspera: data.quienEspera
                        };

                        await actualizarRegistro(editandoEsperada, datosActualizados, 'esperadas');

                        const esperadaIndex = esperadas.findIndex(e => e.id === editandoEsperada);
                        if (esperadaIndex !== -1) {
                            esperadas[esperadaIndex] = { ...esperadas[esperadaIndex], ...datosActualizados };
                        }

                        renderEsperadas();
                        limpiarEsperada();
                        showNotification('Persona esperada actualizada exitosamente', 'success');
                    } else {
                        const nuevaEsperada = {
                            documento: data.documentoEsperada,
                            esDocumentoExtranjero: esDocumentoExtranjero,
                            nombre: data.nombreEsperada,
                            fechaEspera: data.fechaEspera,
                            quienEspera: data.quienEspera,
                            estado: (userRole === 'administrador' || userRole === 'autorizador') ? 'autorizada' : 'pendiente',
                            activa: true,
                            registradoPor: userName,
                            registradoPorRol: userRole,
                            autorizadoPor: (userRole === 'administrador' || userRole === 'autorizador') ? userName : null,
                            fechaRegistro: ahora.toISOString().split('T')[0],
                            timestamp: ahora.toISOString()
                        };

                        const docRef = await addDoc(collection(db, 'esperadas'), nuevaEsperada);
                        nuevaEsperada.id = docRef.id;
                        esperadas.push(nuevaEsperada);

                        renderEsperadas();
                        limpiarEsperada();

                        if (nuevaEsperada.estado === 'autorizada') {
                            showNotification('Persona esperada registrada y autorizada', 'success');
                        } else {
                            showNotification('Persona esperada registrada, pendiente de autorización', 'info');
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al procesar persona esperada', 'error');
                }
            });

            // Manejar formulario de bloqueos
            document.getElementById('bloqueoForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());

                // Validaciones básicas
                if (!data.motivoBloqueo) {
                    showNotification('Debe seleccionar un motivo', 'error');
                    return;
                }

                if (tipoBloqueoActual === 'persona') {
                    if (!data.documentoBloqueo || !data.nombreBloqueo) {
                        showNotification('Complete todos los campos de persona', 'error');
                        return;
                    }

                    const esDocumentoExtranjero = document.getElementById('esDocumentoExtranjeroBloqueo').checked;
                    if (!esDocumentoExtranjero && !validarRUT(data.documentoBloqueo)) {
                        showNotification('Debe ingresar un RUT válido', 'error');
                        return;
                    }
                } else {
                    if (!data.patenteBloqueo) {
                        showNotification('Debe ingresar una patente', 'error');
                        return;
                    }
                }

                const esIndefinido = document.getElementById('bloqueoIndefinido').checked;
                if (!esIndefinido && (!data.fechaDesdeBloqueo || !data.fechaHastaBloqueo)) {
                    showNotification('Debe especificar las fechas del bloqueo', 'error');
                    return;
                }

                try {
                    const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                    const ahora = new Date();

                    if (editandoBloqueo) {
                        const datosActualizados = {
                            tipo: tipoBloqueoActual,
                            motivo: data.motivoBloqueo,
                            otroMotivo: data.otroMotivo || null,
                            indefinido: esIndefinido,
                            fechaDesde: esIndefinido ? null : data.fechaDesdeBloqueo,
                            fechaHasta: esIndefinido ? null : data.fechaHastaBloqueo
                        };

                        if (tipoBloqueoActual === 'persona') {
                            datosActualizados.documento = data.documentoBloqueo;
                            datosActualizados.nombre = data.nombreBloqueo;
                            datosActualizados.esDocumentoExtranjero = document.getElementById('esDocumentoExtranjeroBloqueo').checked;
                        } else {
                            datosActualizados.patente = data.patenteBloqueo;
                        }

                        await actualizarRegistro(editandoBloqueo, datosActualizados, 'bloqueos');

                        const bloqueoIndex = bloqueos.findIndex(b => b.id === editandoBloqueo);
                        if (bloqueoIndex !== -1) {
                            bloqueos[bloqueoIndex] = { ...bloqueos[bloqueoIndex], ...datosActualizados };
                        }

                        renderBloqueos();
                        limpiarBloqueo();
                        showNotification('Bloqueo actualizado exitosamente', 'success');
                    } else {
                        const nuevoBloqueo = {
                            tipo: tipoBloqueoActual,
                            motivo: data.motivoBloqueo,
                            otroMotivo: data.otroMotivo || null,
                            indefinido: esIndefinido,
                            fechaDesde: esIndefinido ? null : data.fechaDesdeBloqueo,
                            fechaHasta: esIndefinido ? null : data.fechaHastaBloqueo,
                            activo: true,
                            bloqueadoPor: userName,
                            bloqueadoPorRol: userRole,
                            fechaBloqueo: ahora.toISOString().split('T')[0],
                            timestamp: ahora.toISOString()
                        };

                        if (tipoBloqueoActual === 'persona') {
                            nuevoBloqueo.documento = data.documentoBloqueo;
                            nuevoBloqueo.nombre = data.nombreBloqueo;
                            nuevoBloqueo.esDocumentoExtranjero = document.getElementById('esDocumentoExtranjeroBloqueo').checked;
                        } else {
                            nuevoBloqueo.patente = data.patenteBloqueo;
                        }

                        const docRef = await addDoc(collection(db, 'bloqueos'), nuevoBloqueo);
                        nuevoBloqueo.id = docRef.id;
                        bloqueos.push(nuevoBloqueo);

                        renderBloqueos();
                        limpiarBloqueo();
                        showNotification('Bloqueo registrado exitosamente', 'success');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al procesar bloqueo', 'error');
                }
            });

            // Manejar formulario de feriados
            document.getElementById('feriadoForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());

                if (!data.fechaFeriado || !data.nombreFeriado) {
                    showNotification('Complete todos los campos', 'error');
                    return;
                }

                // Verificar si ya existe un feriado en esa fecha
                const existe = feriados.some(f => f.fecha === data.fechaFeriado);
                if (existe) {
                    showNotification('Ya existe un feriado en esa fecha', 'error');
                    return;
                }

                try {
                    const nuevoFeriado = {
                        fecha: data.fechaFeriado,
                        nombre: data.nombreFeriado,
                        tipo: 'personalizado',
                        fechaCreacion: new Date().toISOString().split('T')[0]
                    };

                    const docRef = await addDoc(collection(db, 'feriados'), nuevoFeriado);
                    nuevoFeriado.id = docRef.id;
                    feriados.push(nuevoFeriado);

                    renderFeriados();
                    limpiarFeriado();
                    showNotification('Feriado agregado exitosamente', 'success');
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al agregar feriado', 'error');
                }
            });


            // Manejar formulario de días especiales - VERSIÓN CORREGIDA ANTI-ERROR
            document.getElementById('diasEspecialesForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                console.log('=== DEBUG: Iniciando submit de días especiales ===');
                console.log('personaSeleccionadaDias:', personaSeleccionadaDias);

                // VALIDACIÓN INICIAL ROBUSTA
                if (!personaSeleccionadaDias) {
                    console.log('ERROR: personaSeleccionadaDias es null');
                    showNotification('Debe seleccionar una persona, empresa o subcontrato', 'error');
                    return;
                }

                // Verificar que el objeto no esté corrupto
                if (typeof personaSeleccionadaDias !== 'object') {
                    console.log('ERROR: personaSeleccionadaDias no es un objeto:', typeof personaSeleccionadaDias);
                    showNotification('Error en la selección. Por favor, seleccione nuevamente.', 'error');
                    personaSeleccionadaDias = null;
                    limpiarDiasEspeciales();
                    return;
                }

                // Determinar el tipo de selección de forma segura
                let tipoSeleccion = 'individual';
                let registrosProcesar = [];
                let cantidadTotal = 0;

                // Verificar si es selección múltiple
                if (personaSeleccionadaDias.tipo && (personaSeleccionadaDias.tipo === 'empresa' || personaSeleccionadaDias.tipo === 'subcontrato')) {
                    tipoSeleccion = personaSeleccionadaDias.tipo;

                    // Verificar que tenga registros válidos
                    if (!personaSeleccionadaDias.registros || !Array.isArray(personaSeleccionadaDias.registros)) {
                        showNotification('No hay trabajadores válidos en la selección múltiple', 'error');
                        return;
                    }

                    registrosProcesar = personaSeleccionadaDias.registros.filter(registro =>
                        registro && registro.documento && registro.nombre && registro.empresa
                    );

                    if (registrosProcesar.length === 0) {
                        showNotification('No hay trabajadores con datos válidos en la selección', 'error');
                        return;
                    }

                    cantidadTotal = registrosProcesar.length;
                } else {
                    // Selección individual
                    if (!personaSeleccionadaDias.documento || !personaSeleccionadaDias.nombre || !personaSeleccionadaDias.empresa) {
                        showNotification('Los datos de la persona seleccionada no son válidos', 'error');
                        return;
                    }
                    cantidadTotal = 1;
                }

                console.log('Tipo de selección:', tipoSeleccion, 'Cantidad:', cantidadTotal);

                // Validar que hay al menos un tipo seleccionado
                const tipoSabado = document.getElementById('tipoSabado').checked;
                const tipoDomingo = document.getElementById('tipoDomingo').checked;
                const tipoFeriado = document.getElementById('tipoFeriado').checked;

                if (!tipoSabado && !tipoDomingo && !tipoFeriado) {
                    showNotification('Debe seleccionar al menos un tipo de día especial', 'error');
                    return;
                }

                const motivo = document.getElementById('motivoDiasEspeciales').value.trim();
                if (!motivo) {
                    showNotification('Debe ingresar un motivo', 'error');
                    return;
                }

                // Validar fechas según los tipos seleccionados
                let fechasSabadoFinal = [];
                let fechasDomingoFinal = [];
                let feriadosSeleccionadosFinal = [];

                if (tipoSabado) {
                    const sabadoMultiples = document.getElementById('sabadoMultiples').checked;
                    const sabadoFecha = document.getElementById('sabadoFecha').checked;

                    if (sabadoMultiples) {
                        if (!Array.isArray(fechasSabado) || fechasSabado.length === 0) {
                            showNotification('Debe agregar al menos una fecha de sábado', 'error');
                            return;
                        }
                        fechasSabadoFinal = [...fechasSabado];
                    } else if (sabadoFecha) {
                        const fechaEspecifica = document.getElementById('sabadoFechaEspecifica').value;
                        if (!fechaEspecifica) {
                            showNotification('Debe seleccionar una fecha específica para sábado', 'error');
                            return;
                        }
                        fechasSabadoFinal = [fechaEspecifica];
                    } else {
                        showNotification('Debe configurar las fechas para sábados', 'error');
                        return;
                    }
                }

                if (tipoDomingo) {
                    const domingoMultiples = document.getElementById('domingoMultiples').checked;
                    const domingoFecha = document.getElementById('domingoFecha').checked;

                    if (domingoMultiples) {
                        if (!Array.isArray(fechasDomingo) || fechasDomingo.length === 0) {
                            showNotification('Debe agregar al menos una fecha de domingo', 'error');
                            return;
                        }
                        fechasDomingoFinal = [...fechasDomingo];
                    } else if (domingoFecha) {
                        const fechaEspecifica = document.getElementById('domingoFechaEspecifica').value;
                        if (!fechaEspecifica) {
                            showNotification('Debe seleccionar una fecha específica para domingo', 'error');
                            return;
                        }
                        fechasDomingoFinal = [fechaEspecifica];
                    } else {
                        showNotification('Debe configurar las fechas para domingos', 'error');
                        return;
                    }
                }

                if (tipoFeriado) {
                    if (!Array.isArray(feriadosSeleccionados) || feriadosSeleccionados.length === 0) {
                        showNotification('Debe seleccionar al menos un feriado', 'error');
                        return;
                    }
                    feriadosSeleccionadosFinal = [...feriadosSeleccionados];
                }

                try {
                    const userName = currentUserData ? (currentUserData.name || currentUserData.nombre) : 'Usuario';
                    const ahora = new Date();

                    const tipos = [];
                    if (tipoSabado) tipos.push('sabado');
                    if (tipoDomingo) tipos.push('domingo');
                    if (tipoFeriado) tipos.push('feriado');

                    console.log('Procesando con tipo:', tipoSeleccion);

                    if (editandoDiaEspecial) {
                        // MODO EDICIÓN: Solo personas individuales
                        console.log('Modo edición');

                        const datosActualizados = {
                            documentoPersona: personaSeleccionadaDias.documento,
                            esDocumentoExtranjero: personaSeleccionadaDias.esDocumentoExtranjero || false,
                            nombrePersona: personaSeleccionadaDias.nombre,
                            empresaPersona: personaSeleccionadaDias.empresa,
                            subcontratoPersona: personaSeleccionadaDias.subContrato || null,
                            tipos: tipos,
                            fechasSabado: fechasSabadoFinal,
                            fechasDomingo: fechasDomingoFinal,
                            feriadosSeleccionados: feriadosSeleccionadosFinal,
                            motivo: motivo
                        };

                        await actualizarRegistro(editandoDiaEspecial, datosActualizados, 'dias_especiales');

                        const diaIndex = diasEspeciales.findIndex(d => d.id === editandoDiaEspecial);
                        if (diaIndex !== -1) {
                            diasEspeciales[diaIndex] = { ...diasEspeciales[diaIndex], ...datosActualizados };
                        }

                        renderTablaDiasEspeciales();
                        limpiarDiasEspeciales();
                        showNotification('Días especiales actualizados exitosamente', 'success');

                    } else if (tipoSeleccion === 'empresa' || tipoSeleccion === 'subcontrato') {
                        // SELECCIÓN MÚLTIPLE
                        console.log('Procesando selección múltiple:', tipoSeleccion);
                        console.log('Registros a procesar:', registrosProcesar.length);

                        let contadorExitosos = 0;

                        for (const registro of registrosProcesar) {
                            try {
                                const nuevoDiaEspecial = {
                                    documentoPersona: registro.documento,
                                    esDocumentoExtranjero: registro.esDocumentoExtranjero || false,
                                    nombrePersona: registro.nombre,
                                    empresaPersona: registro.empresa,
                                    subcontratoPersona: registro.subContrato || null,
                                    tipos: tipos,
                                    fechasSabado: fechasSabadoFinal,
                                    fechasDomingo: fechasDomingoFinal,
                                    feriadosSeleccionados: feriadosSeleccionadosFinal,
                                    motivo: motivo,
                                    estado: (userRole === 'administrador' || userRole === 'autorizador') ? 'autorizado' :
                                            (userRole === 'sub-registrador') ? 'pendiente_supervisor' : 'pendiente',
                                    activo: true,
                                    registradoPor: userName,
                                    registradoPorRol: userRole,
                                    supervisor: (userRole === 'sub-registrador') ? currentUserData.supervisor : null,
                                    autorizadoPor: (userRole === 'administrador' || userRole === 'autorizador') ? userName : null,
                                    fechaRegistro: ahora.toISOString().split('T')[0],
                                    timestamp: ahora.toISOString(),
                                    // Campos adicionales para identificar selección múltiple
                                    tipoSeleccion: tipoSeleccion,
                                    seleccionOriginal: tipoSeleccion === 'empresa' ?
                                        `Empresa: ${personaSeleccionadaDias.empresa || 'N/A'}` :
                                        `Subcontrato: ${personaSeleccionadaDias.empresa || 'N/A'} - ${personaSeleccionadaDias.subcontrato || 'N/A'}`,
                                    cantidadSeleccionados: cantidadTotal
                                };

                                const docRef = await addDoc(collection(db, 'dias_especiales'), nuevoDiaEspecial);
                                nuevoDiaEspecial.id = docRef.id;
                                diasEspeciales.push(nuevoDiaEspecial);
                                contadorExitosos++;

                                console.log(`Procesado exitosamente: ${registro.nombre}`);
                            } catch (error) {
                                console.error(`Error registrando días especiales para ${registro.nombre}:`, error);
                            }
                        }

                        renderTablaDiasEspeciales();
                        limpiarDiasEspeciales();

                        const tipoTexto = tipoSeleccion === 'empresa' ? 'empresa' : 'subcontrato';
                        const estadoTexto = (userRole === 'administrador' || userRole === 'autorizador') ? 'registrados y autorizados' : 'registrados, pendientes de autorización';

                        showNotification(`Días especiales ${estadoTexto} para toda la ${tipoTexto}: ${contadorExitosos}/${cantidadTotal} personas procesadas`, 'success');

                    } else {
                        // SELECCIÓN INDIVIDUAL
                        console.log('Procesando selección individual');

                        const nuevoDiaEspecial = {
                            documentoPersona: personaSeleccionadaDias.documento,
                            esDocumentoExtranjero: personaSeleccionadaDias.esDocumentoExtranjero || false,
                            nombrePersona: personaSeleccionadaDias.nombre,
                            empresaPersona: personaSeleccionadaDias.empresa,
                            subcontratoPersona: personaSeleccionadaDias.subContrato || null,
                            tipos: tipos,
                            fechasSabado: fechasSabadoFinal,
                            fechasDomingo: fechasDomingoFinal,
                            feriadosSeleccionados: feriadosSeleccionadosFinal,
                            motivo: motivo,
                            estado: (userRole === 'administrador' || userRole === 'autorizador') ? 'autorizado' :
                                    (userRole === 'sub-registrador') ? 'pendiente_supervisor' : 'pendiente',
                            activo: true,
                            registradoPor: userName,
                            registradoPorRol: userRole,
                            supervisor: (userRole === 'sub-registrador') ? currentUserData.supervisor : null,
                            autorizadoPor: (userRole === 'administrador' || userRole === 'autorizador') ? userName : null,
                            fechaRegistro: ahora.toISOString().split('T')[0],
                            timestamp: ahora.toISOString(),
                            tipoSeleccion: 'individual'
                        };

                        const docRef = await addDoc(collection(db, 'dias_especiales'), nuevoDiaEspecial);
                        nuevoDiaEspecial.id = docRef.id;
                        diasEspeciales.push(nuevoDiaEspecial);

                        renderTablaDiasEspeciales();
                        limpiarDiasEspeciales();

                        if (nuevoDiaEspecial.estado === 'autorizado') {
                            showNotification('Días especiales registrados y autorizados automáticamente', 'success');
                        } else {
                            showNotification('Días especiales registrados, pendientes de autorización', 'info');
                        }
                    }

                    console.log('=== Proceso completado exitosamente ===');

                } catch (error) {
                    console.error('Error completo:', error);
                    showNotification('Error al procesar días especiales: ' + error.message, 'error');
                }
            });

            // Event listener para cantidad de acompañantes - FORZAR ejecución
            document.getElementById('cantidadAcompañantes').addEventListener('input', function(e) {
                console.log('Cantidad de acompañantes cambiada a:', e.target.value); // Debug
                setTimeout(() => {
                    generarCamposAcompañantes();
                }, 50);
            });

            document.getElementById('cantidadAcompañantes').addEventListener('change', function(e) {
                console.log('Cantidad de acompañantes change a:', e.target.value); // Debug
                setTimeout(() => {
                    generarCamposAcompañantes();
                }, 50);
            });

            // Ocultar resultados de búsqueda al hacer clic fuera
            document.addEventListener('click', function(e) {
                const busquedaInput = document.getElementById('buscarPersonaDiasEspeciales');
                const resultados = document.getElementById('resultadosBusquedaDias');

                if (busquedaInput && resultados && !busquedaInput.contains(e.target) && !resultados.contains(e.target)) {
                    resultados.style.display = 'none';
                }
            });

            // Event listener para cambio de tipo de persona
            document.getElementById('tipoPersona').addEventListener('change', function(e) {
                const tipoPersona = e.target.value;

                // Actualizar botón para guardias
                if (userRole === 'guardia') {
                    if (tipoPersona === 'trabajador') {
                        // Para trabajadores, verificar si está autorizado
                        const nombre = document.getElementById('nombreRegistro').value.trim();
                        const documento = document.getElementById('documento').value.trim();

                        if (nombre.length >= 3 || documento.length >= 8) {
                            // Buscar datos automáticamente
                            if (documento.length >= 8) {
                                cargarDatosAutomaticos('documento', documento);
                            } else if (nombre.length >= 3) {
                                cargarDatosAutomaticos('nombre', nombre);
                            }
                            // El botón se actualizará en cargarDatosAutomaticos
                        } else {
                            actualizarBotonGuardia(null);
                        }
                    } else if (tipoPersona === 'proveedor' || tipoPersona === 'visita') {
                        // Para proveedores y visitas, habilitar inmediatamente
                        actualizarBotonGuardia(tipoPersona);
                    } else {
                        // Sin tipo seleccionado
                        actualizarBotonGuardia(null);
                    }
                }

                // Mantener funcionalidad original
                toggleProveedorFields();
            });

            // Limpiar búsqueda al cerrar ventana/pestaña o recargar página
            window.addEventListener('beforeunload', function() {
                limpiarBusquedaSilenciosa();
            });

            // Limpiar búsqueda cuando se oculta la página (cambio de pestaña, minimizar, etc.)
            document.addEventListener('visibilitychange', function() {
                if (document.hidden) {
                    limpiarBusquedaSilenciosa();
                }
            });

            // Limpiar búsqueda al perder el foco de la ventana
            window.addEventListener('blur', function() {
                limpiarBusquedaSilenciosa();
            });

            // Inicializar mensajes de llegada a pie
            updateLlegaPieMessage();
         });

         console.log('%cSistema de Gestión de Acceso - Usuario de Prueba:', 'color: #667eea; font-size: 16px; font-weight: bold;');
         console.log('%cadmin / admin123 - Acceso completo al sistema', 'color: #22c55e;');
         </script>
         </body>
         </html>
